{"version":3,"sources":["App.tsx","index.tsx"],"names":["glsl","COLOR","App","canvas","useRef","useEffect","gl","current","getContext","Error","base","positions","colors","h","i","s","t","Math","PI","tt","nTwists","ct","cos","st","sin","ctt","stt","r1","r2","z1","z2","push","color","Array","fill","k","length","makeStrip","positionBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","colorBuffer","program","vsSource","fsSource","createProgram","attachShader","makeShader","VERTEX_SHADER","FRAGMENT_SHADER","linkProgram","getProgramParameter","LINK_STATUS","message","getProgramInfoLog","deleteProgram","buildProgram","useProgram","uniformMatrix4fv","getUniformLocation","matrix","mat4","create","translate","makeModelViewMatrix","width","height","perspective","makeProjectionMatrix","vertexAttribPointer","getAttribLocation","FLOAT","enableVertexAttribArray","clearColor","clearDepth","enable","DEPTH_TEST","depthFunc","LEQUAL","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","drawArrays","TRIANGLE_STRIP","className","ref","type","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7728882f.chunk.js","sourcesContent":["/* eslint-disable one-var */\r\n/* eslint-disable no-bitwise */\r\n\r\nimport { mat4 } from 'gl-matrix';\r\nimport React, { useEffect, useRef } from 'react';\r\nimport './App.scss';\r\n\r\nconst glsl = ([s]: TemplateStringsArray): string => s;\r\n\r\nconst BLUE = [0, 0, 1];\r\nconst GREEN = [0, 1, 0];\r\nconst YELLOW = [1, 1, 0];\r\nconst RED = [1, 0, 0];\r\n\r\nconst COLOR = [BLUE, GREEN, YELLOW, RED];\r\n\r\nexport default function App() {\r\n\r\n  const canvas = useRef<HTMLCanvasElement>(null);\r\n\r\n  useEffect(() => {\r\n    const gl = canvas.current?.getContext('webgl');\r\n\r\n    if (!gl) {\r\n      throw new Error('Failed to get a WebGL context.');\r\n    }\r\n\r\n    const { positions, colors } = makeStrip(0);\r\n\r\n    const positionBuffer = gl.createBuffer();\r\n    if (!positionBuffer) {\r\n      throw new Error('Failed to create position buffer.');\r\n    }\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);\r\n\r\n    const colorBuffer = gl.createBuffer();\r\n    if (!colorBuffer) {\r\n      throw new Error('Failed to create color buffer.');\r\n    }\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW);\r\n\r\n    const program = buildProgram(\r\n      gl,\r\n      glsl`\r\n        attribute vec4 aVertexPosition;\r\n        attribute vec4 aVertexColor;\r\n        uniform mat4 uModelViewMatrix;\r\n        uniform mat4 uProjectionMatrix;\r\n        varying lowp vec4 vColor;\r\n        void main(void) {\r\n          gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPosition;\r\n          vColor = aVertexColor;\r\n        }\r\n      `,\r\n      glsl`\r\n        varying lowp vec4 vColor;\r\n        void main(void) {\r\n          gl_FragColor = vColor;\r\n        }\r\n      `,\r\n    );\r\n\r\n    gl.useProgram(program);\r\n    gl.uniformMatrix4fv(gl.getUniformLocation(program, 'uModelViewMatrix'), false, makeModelViewMatrix());\r\n    gl.uniformMatrix4fv(gl.getUniformLocation(program, 'uProjectionMatrix'), false, makeProjectionMatrix(gl.canvas.width, gl.canvas.height));\r\n\r\n    // Bind the position buffer to attribute aVertexPosition.\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n    gl.vertexAttribPointer(gl.getAttribLocation(program, 'aVertexPosition'), 3, gl.FLOAT, false, 0, 0);\r\n    gl.enableVertexAttribArray(gl.getAttribLocation(program, 'aVertexPosition'));\r\n\r\n    // Bind the color buffer to attribute aVertexColor.\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);\r\n    gl.vertexAttribPointer(gl.getAttribLocation(program, 'aVertexColor'), 3, gl.FLOAT, false, 0, 0);\r\n    gl.enableVertexAttribArray(gl.getAttribLocation(program, 'aVertexColor'));\r\n\r\n    gl.clearColor(0, 0, 0, 1);\r\n    gl.clearDepth(1.0);\r\n    gl.enable(gl.DEPTH_TEST);\r\n    gl.depthFunc(gl.LEQUAL);\r\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, positions.length / 3);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <canvas width=\"640px\" height=\"640px\" ref={canvas} />\r\n        <p>\r\n          M&ouml;bius Clock\r\n        </p>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction makeStrip(base: number): { positions: number[], colors: number[] } {\r\n  const positions: number[] = [];\r\n  const colors: number[] = [];\r\n  const epsilon = 0.001;\r\n  const nTwists = 3;\r\n  const step = 1 / 30.0;\r\n  const R = 1.0; const h = 0.1;\r\n  const torsion = 0;\r\n  for (let i = 0; i < 2; i++) {\r\n    for (let s = 0.0; s < 1.0 + epsilon; s += step) {\r\n      const t = (i + s) * Math.PI;\r\n      const tt = nTwists * 0.5 * t - torsion;\r\n      const ct = Math.cos(t), st = Math.sin(t);\r\n      const ctt = Math.cos(tt), stt = Math.sin(tt);\r\n      const r1 = R - h * ctt;\r\n      const r2 = R + h * ctt;\r\n      const z1 = -h * stt;\r\n      const z2 = +h * stt;\r\n      positions.push(r2 * st, r2 * ct, z2);\r\n      positions.push(r1 * st, r1 * ct, z1);\r\n      const color = new Array(3).fill(0);\r\n      for (let k = 0; k < 3; k++) {\r\n        color[k] = (1 - s) * COLOR[base + i][k] + s * COLOR[(base + i + 1) % COLOR.length][k];\r\n      }\r\n      colors.push(...color, ...color);\r\n    }\r\n  }\r\n  return { positions, colors };\r\n}\r\n\r\nfunction buildProgram(gl: WebGLRenderingContext, vsSource: string, fsSource: string) {\r\n  const program = gl.createProgram();\r\n  if (!program) {\r\n    throw new Error('Failed to create program.');\r\n  }\r\n  gl.attachShader(program, makeShader(gl, gl.VERTEX_SHADER, vsSource));\r\n  gl.attachShader(program, makeShader(gl, gl.FRAGMENT_SHADER, fsSource));\r\n  gl.linkProgram(program);\r\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n    const message = `Unable to initialize the shader program: ${gl.getProgramInfoLog(program)}`;\r\n    gl.deleteProgram(program);\r\n    throw new Error(message);\r\n  }\r\n  return program;\r\n}\r\n\r\nfunction makeShader(gl: WebGLRenderingContext, type: number, source: string) {\r\n  const shader = gl.createShader(type);\r\n  if (!shader) {\r\n    throw new Error('Failed to create shader.');\r\n  }\r\n  gl.shaderSource(shader, source);\r\n  gl.compileShader(shader);\r\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n    const message = `An error occurred compiling the shaders: ${gl.getShaderInfoLog(shader)}`;\r\n    gl.deleteShader(shader);\r\n    throw new Error(message);\r\n  }\r\n  return shader;\r\n}\r\n\r\nfunction makeModelViewMatrix() {\r\n  const matrix = mat4.create();\r\n  mat4.translate(matrix, matrix, [0, 0, -4]);\r\n  return matrix;\r\n}\r\n\r\nfunction makeProjectionMatrix(width: number, height: number) {\r\n  const matrix = mat4.create();\r\n  mat4.perspective(matrix, Math.PI / 4, width / height, 0.1, 100);\r\n  return matrix;\r\n}\r\n\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport './index.scss'\r\n\r\n// You need bootstrap? $ yarn add bootstrap\r\n// See: https://create-react-app.dev/docs/adding-bootstrap\r\n// import 'bootstrap/dist/css/bootstrap.css';\r\n\r\n// Single-page application (SPA)\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want to Pre-render with react-snap\r\n// Step 1: install $ yarn add --dev react-snap\r\n// Step 2: add to package.json run script: \"postbuild\": \"react-snap\"\r\n// Step 3: Add to package.json: \"reactSnap\":{\"inlineCss\":true}\r\n// Step 3: replace to the script below.\r\n\r\n/*\r\nimport { hydrate, render } from 'react-dom'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nconst rootElement = document.getElementById('root')\r\nif (rootElement && rootElement!.hasChildNodes()) {\r\n  hydrate(<AppRouter />, rootElement)\r\n\r\n  // Precache - set to 'register' once you Pre-render\r\n  // If you want your app to work offline and load faster, you can change\r\n  // unregister() to register() below. Note this comes with some pitfalls.\r\n  // Learn more about service workers: http://bit.ly/CRA-PWA\r\n  serviceWorker.register()\r\n} else {\r\n  render(<AppRouter />, rootElement)\r\n}\r\n*/\r\n"],"sourceRoot":""}