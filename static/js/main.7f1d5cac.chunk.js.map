{"version":3,"sources":["App.tsx","index.tsx"],"names":["glsl","COLOR","App","useState","torsion","setTorsion","useEffect","afid","requestAnimationFrame","f","time","Math","PI","cancelAnimationFrame","canvas","useRef","gl","current","getContext","Error","makeStripBuffers","positions0","positions","colors0","colors","count0","count","positions2","colors2","count2","vsSource","fsSource","program","createProgram","attachShader","makeShader","VERTEX_SHADER","FRAGMENT_SHADER","linkProgram","getProgramParameter","LINK_STATUS","message","getProgramInfoLog","deleteProgram","attribs","position","getAttribLocation","color","uniforms","modelViewMatrix","getUniformLocation","projectionMatrix","buildProgram","useProgram","uniformMatrix4fv","distance","matrix","mat4","create","translate","makeModelViewMatrix","width","height","fovy","near","far","perspective","makeProjectionMatrix","enable","DEPTH_TEST","depthFunc","LEQUAL","clearDepth","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","CULL_FACE","cullFace","BACK","render","FRONT","className","ref","vertexPositionAttrib","vertexColorAttrib","bindBufferToAttribute","drawArrays","TRIANGLE_STRIP","bindBuffer","ARRAY_BUFFER","vertexAttribPointer","FLOAT","enableVertexAttribArray","base","h","i","s","t","tt","nTwists","ct","cos","st","sin","ctt","stt","r1","r2","z1","z2","push","Array","fill","k","length","makeStrip","makeBufferFromArray","positionBuffer","createBuffer","bufferData","Float32Array","STATIC_DRAW","type","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.7f1d5cac.chunk.js","sourcesContent":["/* eslint-disable one-var */\r\n/* eslint-disable no-bitwise */\r\n\r\nimport { mat4 } from 'gl-matrix';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport './App.scss';\r\n\r\nconst glsl = ([s]: TemplateStringsArray): string => s;\r\n\r\nconst BLUE = [0, 0, 1];\r\nconst GREEN = [0, 1, 0];\r\nconst YELLOW = [1, 1, 0];\r\nconst RED = [1, 0, 0];\r\n\r\nconst COLOR = [BLUE, GREEN, YELLOW, RED];\r\n\r\nexport default function App() {\r\n\r\n  const [torsion, setTorsion] = useState(0);\r\n\r\n  useEffect(() => {\r\n    let afid = requestAnimationFrame(function f(time) {\r\n      setTorsion(time / 4000 * Math.PI);\r\n      afid = requestAnimationFrame(f);\r\n    });\r\n    return () => {\r\n      cancelAnimationFrame(afid);\r\n    };\r\n  }, []);\r\n\r\n  const canvas = useRef<HTMLCanvasElement>(null);\r\n\r\n  useEffect(() => {\r\n    const gl = canvas.current?.getContext('webgl');\r\n\r\n    if (!gl) {\r\n      throw new Error('Failed to get a WebGL context.');\r\n    }\r\n\r\n    const { positions: positions0, colors: colors0, count: count0 } = makeStripBuffers(gl, torsion, 0);\r\n    const { positions: positions2, colors: colors2, count: count2 } = makeStripBuffers(gl, torsion, 2);\r\n\r\n    const { program, attribs, uniforms } = buildProgram(gl);\r\n\r\n    gl.useProgram(program);\r\n    gl.uniformMatrix4fv(uniforms.modelViewMatrix, false, makeModelViewMatrix(4));\r\n    gl.uniformMatrix4fv(uniforms.projectionMatrix, false, makeProjectionMatrix(gl.canvas.width, gl.canvas.height, Math.PI / 5, 0.1, 100));\r\n\r\n    gl.enable(gl.DEPTH_TEST);\r\n    gl.depthFunc(gl.LEQUAL);\r\n    gl.clearDepth(1);\r\n    gl.clearColor(0, 0, 0, 1);\r\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n    gl.enable(gl.CULL_FACE);\r\n    gl.cullFace(gl.BACK);\r\n    render(gl, program, attribs.position, attribs.color, count0 / 3, positions0, colors0);\r\n    gl.cullFace(gl.FRONT);\r\n    render(gl, program, attribs.position, attribs.color, count2 / 3, positions2, colors2);\r\n\r\n  }, [torsion]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <canvas width=\"480px\" height=\"480px\" ref={canvas} />\r\n        <p>\r\n          M&ouml;bius Clock\r\n        </p>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction render(gl: WebGLRenderingContext, program: WebGLProgram, vertexPositionAttrib: number, vertexColorAttrib: number, count: number, positions: WebGLBuffer, colors: WebGLBuffer) {\r\n  bindBufferToAttribute(gl, positions, vertexPositionAttrib);\r\n  bindBufferToAttribute(gl, colors, vertexColorAttrib);\r\n  gl.drawArrays(gl.TRIANGLE_STRIP, 0, count);\r\n}\r\n\r\nfunction bindBufferToAttribute(gl: WebGLRenderingContext, positions: WebGLBuffer, vertexPositionAttrib: number) {\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, positions);\r\n  gl.vertexAttribPointer(vertexPositionAttrib, 3, gl.FLOAT, false, 0, 0);\r\n  gl.enableVertexAttribArray(vertexPositionAttrib);\r\n}\r\n\r\nfunction makeStripBuffers(gl: WebGLRenderingContext, torsion: number, base: number) {\r\n  const { positions, colors } = makeStrip(torsion, base);\r\n  return {\r\n    positions: makeBufferFromArray(gl, positions),\r\n    colors: makeBufferFromArray(gl, colors),\r\n    count: positions.length,\r\n  };\r\n}\r\n\r\nfunction makeBufferFromArray(gl: WebGLRenderingContext, positions: number[]) {\r\n  const positionBuffer = gl.createBuffer();\r\n  if (!positionBuffer) {\r\n    throw new Error('Failed to create position buffer.');\r\n  }\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);\r\n  return positionBuffer;\r\n}\r\n\r\nfunction makeStrip(torsion: number, base: number) {\r\n  const positions: number[] = [];\r\n  const colors: number[] = [];\r\n  const nTwists = 3;\r\n  const R = 1.0; const h = 0.1;\r\n  for (let i = 0; i < 2; i++) {\r\n    const epsilon = 0.001;\r\n    const step = 1 / 30.0;\r\n    for (let s = 0.0; s < 1.0 + epsilon; s += step) {\r\n      const t = (i + s) * Math.PI;\r\n      const tt = nTwists * 0.5 * t - torsion;\r\n      const ct = Math.cos(t), st = Math.sin(t);\r\n      const ctt = Math.cos(tt), stt = Math.sin(tt);\r\n      const r1 = R - h * ctt;\r\n      const r2 = R + h * ctt;\r\n      const z1 = -h * stt;\r\n      const z2 = +h * stt;\r\n      positions.push(r2 * st, r2 * ct, z2);\r\n      positions.push(r1 * st, r1 * ct, z1);\r\n      const color = new Array(3).fill(0);\r\n      for (let k = 0; k < 3; k++) {\r\n        color[k] = (1 - s) * COLOR[base + i][k] + s * COLOR[(base + i + 1) % COLOR.length][k];\r\n      }\r\n      colors.push(...color, ...color);\r\n    }\r\n  }\r\n  return { positions, colors };\r\n}\r\n\r\nfunction buildProgram(gl: WebGLRenderingContext) {\r\n  const vsSource = glsl`\r\n    attribute vec4 aVertexPosition;\r\n    attribute vec4 aVertexColor;\r\n    uniform mat4 uModelViewMatrix;\r\n    uniform mat4 uProjectionMatrix;\r\n    varying lowp vec4 vColor;\r\n    void main(void) {\r\n      gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPosition;\r\n      vColor = aVertexColor;\r\n    }\r\n  `;\r\n  const fsSource = glsl`\r\n    varying lowp vec4 vColor;\r\n    void main(void) {\r\n      gl_FragColor = vColor;\r\n    }\r\n  `;\r\n  const program = gl.createProgram();\r\n  if (!program) {\r\n    throw new Error('Failed to create program.');\r\n  }\r\n  gl.attachShader(program, makeShader(gl, gl.VERTEX_SHADER, vsSource));\r\n  gl.attachShader(program, makeShader(gl, gl.FRAGMENT_SHADER, fsSource));\r\n  gl.linkProgram(program);\r\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n    const message = `Unable to initialize the shader program: ${gl.getProgramInfoLog(program)}`;\r\n    gl.deleteProgram(program);\r\n    throw new Error(message);\r\n  }\r\n  return {\r\n    program,\r\n    attribs: {\r\n      position: gl.getAttribLocation(program, 'aVertexPosition'),\r\n      color: gl.getAttribLocation(program, 'aVertexColor'),\r\n    },\r\n    uniforms: {\r\n      modelViewMatrix: gl.getUniformLocation(program, 'uModelViewMatrix'),\r\n      projectionMatrix: gl.getUniformLocation(program, 'uProjectionMatrix'),\r\n    },\r\n  };\r\n}\r\n\r\nfunction makeShader(gl: WebGLRenderingContext, type: number, source: string) {\r\n  const shader = gl.createShader(type);\r\n  if (!shader) {\r\n    throw new Error('Failed to create shader.');\r\n  }\r\n  gl.shaderSource(shader, source);\r\n  gl.compileShader(shader);\r\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n    const message = `An error occurred compiling the shaders: ${gl.getShaderInfoLog(shader)}`;\r\n    gl.deleteShader(shader);\r\n    throw new Error(message);\r\n  }\r\n  return shader;\r\n}\r\n\r\nfunction makeModelViewMatrix(distance: number) {\r\n  const matrix = mat4.create();\r\n  mat4.translate(matrix, matrix, [0, 0, -distance]);\r\n  return matrix;\r\n}\r\n\r\nfunction makeProjectionMatrix(width: number, height: number, fovy: number, near: number, far: number) {\r\n  const matrix = mat4.create();\r\n  mat4.perspective(matrix, fovy, width / height, near, far);\r\n  return matrix;\r\n}\r\n\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport './index.scss'\r\n\r\n// You need bootstrap? $ yarn add bootstrap\r\n// See: https://create-react-app.dev/docs/adding-bootstrap\r\n// import 'bootstrap/dist/css/bootstrap.css';\r\n\r\n// Single-page application (SPA)\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want to Pre-render with react-snap\r\n// Step 1: install $ yarn add --dev react-snap\r\n// Step 2: add to package.json run script: \"postbuild\": \"react-snap\"\r\n// Step 3: Add to package.json: \"reactSnap\":{\"inlineCss\":true}\r\n// Step 3: replace to the script below.\r\n\r\n/*\r\nimport { hydrate, render } from 'react-dom'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nconst rootElement = document.getElementById('root')\r\nif (rootElement && rootElement!.hasChildNodes()) {\r\n  hydrate(<AppRouter />, rootElement)\r\n\r\n  // Precache - set to 'register' once you Pre-render\r\n  // If you want your app to work offline and load faster, you can change\r\n  // unregister() to register() below. Note this comes with some pitfalls.\r\n  // Learn more about service workers: http://bit.ly/CRA-PWA\r\n  serviceWorker.register()\r\n} else {\r\n  render(<AppRouter />, rootElement)\r\n}\r\n*/\r\n"],"sourceRoot":""}