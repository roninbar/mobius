{"version":3,"sources":["App.tsx","index.tsx"],"names":["glsl","pieces","args","slice","reduce","a","b","i","COLORS","App","useState","theta","setTheta","anchor","setAnchor","mat4","fromTranslation","create","modelViewMatrix","setModelViewMatrix","programWithTextureMapping","useRef","programWithoutTextureMapping","canvas","useEffect","gl","current","getContext","Error","vsSource","fsSource","program","buildProgram","attribs","position","getAttribLocation","color","textureCoords","uniforms","sampler","getUniformLocation","projectionMatrix","makeProgramWithTextureMapping","makeProgramWithoutTextureMapping","TEXTURE0","TEXTURE1","TEXTURE2","TEXTURE3","which","loadTexture","process","enable","DEPTH_TEST","depthFunc","LEQUAL","clearDepth","clearColor","CULL_FACE","cullFace","BACK","afid","requestAnimationFrame","f","time","Math","PI","cancelAnimationFrame","texProgram","texAttribs","texUniforms","nonTexProgram","nonTexAttribs","nonTexUniforms","perspective","width","height","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","vertexCounts","positionBuffers","colorBuffers","textureCoordBuffers","makeStripBuffers","vertexCount","positions","colors","useProgram","uniformMatrix4fv","uniform1i","bindAttributeToBuffer","FLOAT","drawArrays","TRIANGLE_STRIP","unbindAttribute","forEach","buffer","deleteBuffer","drawHand","length","angle","makeFloatBufferFromArray","makeHandBuffers","positionBuffer","colorBuffer","rotateZ","t","push","cos","sin","Array","fill","makeHubcapBuffers","TRIANGLE_FAN","className","ref","onPointerDown","target","pointerId","x","clientX","y","clientY","Element","setPointerCapture","onPointerMove","dx","dy","distance","sqrt","rotate","onPointerUp","releasePointerCapture","url","texture","createTexture","activeTexture","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","Uint8Array","image","Image","onload","isPowerOf2","generateMipmap","texParameteri","TEXTURE_MAG_FILTER","LINEAR","TEXTURE_MIN_FILTER","LINEAR_MIPMAP_LINEAR","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","src","value","attrib","size","type","bindBuffer","ARRAY_BUFFER","vertexAttribPointer","enableVertexAttribArray","disableVertexAttribArray","torsion","piece","h","s","tt","nTwists","r1","r2","k","makeStrip","createBuffer","bufferData","Float32Array","STATIC_DRAW","createProgram","attachShader","buildShader","VERTEX_SHADER","FRAGMENT_SHADER","linkProgram","getProgramParameter","LINK_STATUS","message","getProgramInfoLog","deleteProgram","name","error","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.45f55963.chunk.js","sourcesContent":["/* eslint-disable one-var */\r\n/* eslint-disable no-bitwise */\r\n\r\nimport { mat4 } from 'gl-matrix';\r\nimport React, { MutableRefObject, useEffect, useRef, useState } from 'react';\r\nimport './App.scss';\r\n\r\ninterface ProgramInfo {\r\n  program: WebGLProgram;\r\n  attribs: {\r\n    color: number;\r\n    position: number;\r\n  };\r\n  uniforms: {\r\n    modelViewMatrix: WebGLUniformLocation;\r\n    projectionMatrix: WebGLUniformLocation;\r\n  };\r\n}\r\n\r\ntype TextureMappingProgramInfo = ProgramInfo & {\r\n  attribs: {\r\n    textureCoords: number;\r\n  };\r\n  uniforms: {\r\n    sampler: WebGLSampler;\r\n  };\r\n};\r\n\r\nconst glsl = (pieces: TemplateStringsArray, ...args: string[]) => pieces.slice(1).reduce((a, b, i) => a + args[i] + b, pieces[0]);\r\n\r\nconst BLUE = [0, 0, 1];\r\nconst GREEN = [0, 1, 0];\r\nconst YELLOW = [1, 1, 0];\r\nconst RED = [1, 0, 0];\r\n\r\nconst COLORS = [BLUE, GREEN, YELLOW, RED];\r\n\r\nexport default function App() {\r\n\r\n  const [theta, setTheta] = useState(0);\r\n  const [anchor, setAnchor] = useState<{ x: number, y: number; } | null>();\r\n  const [modelViewMatrix, setModelViewMatrix] = useState(mat4.fromTranslation(mat4.create(), [0, 0, -4]));\r\n\r\n  const programWithTextureMapping: MutableRefObject<TextureMappingProgramInfo | null> = useRef(null);\r\n  const programWithoutTextureMapping: MutableRefObject<ProgramInfo | null> = useRef(null);\r\n\r\n  const canvas = useRef<HTMLCanvasElement>(null);\r\n\r\n  // #region Initialize WebGL stuff and start the animation.\r\n  useEffect(() => {\r\n\r\n    const gl = canvas.current?.getContext('webgl');\r\n\r\n    if (!gl) {\r\n      throw new Error('Failed to get a WebGL context.');\r\n    }\r\n\r\n    programWithTextureMapping.current = makeProgramWithTextureMapping(gl);\r\n    programWithoutTextureMapping.current = makeProgramWithoutTextureMapping(gl);\r\n\r\n    for (const which of [gl.TEXTURE0, gl.TEXTURE1, gl.TEXTURE2, gl.TEXTURE3]) {\r\n      loadTexture(gl, which, `${process.env.PUBLIC_URL}/texture/hours${which - gl.TEXTURE0}.bmp`);\r\n    }\r\n\r\n    gl.enable(gl.DEPTH_TEST);\r\n    gl.depthFunc(gl.LEQUAL);\r\n    gl.clearDepth(1);\r\n    gl.clearColor(0, 0, 0, 1);\r\n    gl.enable(gl.CULL_FACE);\r\n    gl.cullFace(gl.BACK);\r\n\r\n    let afid = requestAnimationFrame(function f(time) {\r\n      setTheta(time / 12000 * Math.PI);\r\n      afid = requestAnimationFrame(f);\r\n    });\r\n\r\n    return () => {\r\n      cancelAnimationFrame(afid);\r\n    };\r\n\r\n  }, []);\r\n  // #endregion\r\n\r\n  // #region Render one frame.\r\n  useEffect(() => {\r\n\r\n    const gl = canvas.current?.getContext('webgl');\r\n\r\n    if (!gl) {\r\n      throw new Error('Failed to get a WebGL context.');\r\n    }\r\n\r\n    if (!programWithTextureMapping.current || !programWithoutTextureMapping.current) {\r\n      throw new Error('Missing shader program!');\r\n    }\r\n\r\n    const { program: texProgram, attribs: texAttribs, uniforms: texUniforms } = programWithTextureMapping.current;\r\n    const { program: nonTexProgram, attribs: nonTexAttribs, uniforms: nonTexUniforms } = programWithoutTextureMapping.current;\r\n\r\n    const projectionMatrix = mat4.perspective(mat4.create(), Math.PI / 5, gl.canvas.width / gl.canvas.height, 0.1, 100);\r\n\r\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n    // #region Hours Strip\r\n    const vertexCounts: number[] = [];\r\n    const positionBuffers: WebGLBuffer[] = [];\r\n    const colorBuffers: WebGLBuffer[] = [];\r\n    const textureCoordBuffers: WebGLBuffer[] = [];\r\n\r\n    for (let i = 0; i < 4; i++) (\r\n      {\r\n        vertexCount: vertexCounts[i],\r\n        positions: positionBuffers[i],\r\n        colors: colorBuffers[i],\r\n        textureCoords: textureCoordBuffers[i],\r\n      } = makeStripBuffers(gl, theta, i)\r\n    );\r\n\r\n    try {\r\n      gl.useProgram(texProgram);\r\n      gl.uniformMatrix4fv(programWithTextureMapping.current.uniforms.modelViewMatrix, false, modelViewMatrix);\r\n      gl.uniformMatrix4fv(programWithTextureMapping.current.uniforms.projectionMatrix, false, projectionMatrix);\r\n      for (let i = 0; i < 4; i++) {\r\n        gl.uniform1i(texUniforms.sampler, i);\r\n        bindAttributeToBuffer(gl, texAttribs.position, positionBuffers[i], 3, gl.FLOAT);\r\n        bindAttributeToBuffer(gl, texAttribs.color, colorBuffers[i], 3, gl.FLOAT);\r\n        bindAttributeToBuffer(gl, texAttribs.textureCoords, textureCoordBuffers[i], 2, gl.FLOAT);\r\n        try {\r\n          gl.drawArrays(gl.TRIANGLE_STRIP, 0, vertexCounts[i]);\r\n        } finally {\r\n          unbindAttribute(gl, texAttribs.textureCoords);\r\n          unbindAttribute(gl, texAttribs.color);\r\n          unbindAttribute(gl, texAttribs.position);\r\n        }\r\n      }\r\n    } finally {\r\n      [...positionBuffers, ...colorBuffers, ...textureCoordBuffers].forEach((buffer) => gl.deleteBuffer(buffer));\r\n    }\r\n    // #endregion\r\n\r\n    // #region Hands\r\n    const drawHand = function (width: number, length: number, angle: number) {\r\n      const { vertexCount, positions: positionBuffer, colors: colorBuffer } = makeHandBuffers(gl, width, length);\r\n      try {\r\n        gl.useProgram(nonTexProgram);\r\n        gl.uniformMatrix4fv(nonTexUniforms.modelViewMatrix, false, mat4.rotateZ(mat4.create(), modelViewMatrix, -angle));\r\n        gl.uniformMatrix4fv(nonTexUniforms.projectionMatrix, false, projectionMatrix);\r\n        bindAttributeToBuffer(gl, nonTexAttribs.position, positionBuffer, 3, gl.FLOAT);\r\n        bindAttributeToBuffer(gl, nonTexAttribs.color, colorBuffer, 3, gl.FLOAT);\r\n        try {\r\n          gl.drawArrays(gl.TRIANGLE_STRIP, 0, vertexCount);\r\n        } finally {\r\n          unbindAttribute(gl, nonTexAttribs.color);\r\n          unbindAttribute(gl, nonTexAttribs.position);\r\n        }\r\n      } finally {\r\n        gl.deleteBuffer(colorBuffer);\r\n        gl.deleteBuffer(positionBuffer);\r\n      }\r\n    };\r\n\r\n    drawHand(0.02, 0.6, theta); // Hours\r\n    drawHand(0.02, 0.8, 12 * theta); // Minutes\r\n    // #endregion\r\n\r\n    // #region Hubcap\r\n    const { vertexCount, positions, colors } = makeHubcapBuffers(gl);\r\n    try {\r\n      gl.useProgram(nonTexProgram);\r\n      gl.uniformMatrix4fv(nonTexUniforms.modelViewMatrix, false, modelViewMatrix);\r\n      gl.uniformMatrix4fv(nonTexUniforms.projectionMatrix, false, projectionMatrix);\r\n      bindAttributeToBuffer(gl, nonTexAttribs.position, positions, 3, gl.FLOAT);\r\n      bindAttributeToBuffer(gl, nonTexAttribs.color, colors, 3, gl.FLOAT);\r\n      try {\r\n        gl.drawArrays(gl.TRIANGLE_FAN, 0, vertexCount);\r\n      } finally {\r\n        unbindAttribute(gl, nonTexAttribs.position);\r\n        unbindAttribute(gl, nonTexAttribs.color);\r\n      }\r\n    } finally {\r\n      gl.deleteBuffer(colors);\r\n      gl.deleteBuffer(positions);\r\n    }\r\n    // #endregion\r\n\r\n  }, [theta, modelViewMatrix]);\r\n  // #endregion\r\n\r\n  // #region Event Handlers\r\n  const onPointerDown = ({ target, pointerId, clientX: x, clientY: y }: React.PointerEvent<HTMLCanvasElement>): void => {\r\n    if (target instanceof Element) {\r\n      target.setPointerCapture(pointerId);\r\n    }\r\n    setAnchor({ x, y });\r\n  };\r\n\r\n  const onPointerUp = ({ target, pointerId }: React.PointerEvent<HTMLCanvasElement>): void => {\r\n    setAnchor(null);\r\n    if (target instanceof Element) {\r\n      target.releasePointerCapture(pointerId);\r\n    }\r\n  };\r\n\r\n  const onPointerMove = ({ clientX: x, clientY: y }: React.PointerEvent<HTMLCanvasElement>): void => {\r\n    if (anchor) {\r\n      const dx = x - anchor.x;\r\n      const dy = y - anchor.y;\r\n      const distance = Math.sqrt(dx * dx + dy * dy);\r\n      if (distance > 0) {\r\n        setModelViewMatrix(mat4.rotate(mat4.create(), modelViewMatrix, 0.01 * distance, [dy, dx, 0]));\r\n        setAnchor({ x, y });\r\n      }\r\n    }\r\n  };\r\n  // #endregion\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <canvas\r\n          width=\"768px\"\r\n          height=\"768px\"\r\n          ref={canvas}\r\n          onPointerDown={onPointerDown}\r\n          onPointerMove={onPointerMove}\r\n          onPointerUp={onPointerUp}\r\n        />\r\n        <p>M&ouml;bius Clock</p>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction error<T>(message: string): T {\r\n  throw new Error(message);\r\n}\r\n\r\n//\r\n// Initialize a texture and load an image.\r\n// When the image finished loading copy it into the texture.\r\n//\r\nfunction loadTexture(gl: WebGLRenderingContext, which: number, url: string) {\r\n  const texture = gl.createTexture();\r\n\r\n  gl.activeTexture(which);\r\n  gl.bindTexture(gl.TEXTURE_2D, texture);\r\n\r\n  // Because images have to be downloaded over the internet\r\n  // they might take a moment until they are ready.\r\n  // Until then put a single pixel in the texture so we can\r\n  // use it immediately. When the image has finished downloading\r\n  // we'll update the texture with the contents of the image.\r\n  gl.texImage2D(\r\n    gl.TEXTURE_2D,\r\n    0, // level\r\n    gl.RGBA,\r\n    1, // width\r\n    1, // height\r\n    0, // border\r\n    gl.RGBA,\r\n    gl.UNSIGNED_BYTE,\r\n    new Uint8Array([255, 255, 255, 255]), // opaque white\r\n  );\r\n\r\n  const image = new Image();\r\n  image.onload = () => {\r\n    gl.activeTexture(which);\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\r\n\r\n    // WebGL1 has different requirements for power of 2 images\r\n    // vs non power of 2 images so check if the image is a\r\n    // power of 2 in both dimensions.\r\n    if (isPowerOf2(image.width) && isPowerOf2(image.height)) {\r\n      // Yes, it's a power of 2. Generate mips.\r\n      gl.generateMipmap(gl.TEXTURE_2D);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);\r\n    } else {\r\n      // No, it's not a power of 2. Turn off mips and set\r\n      // wrapping to clamp to edge.\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n    }\r\n  };\r\n  image.src = url;\r\n\r\n  return texture;\r\n}\r\n\r\nfunction isPowerOf2(value: number) {\r\n  return (value & (value - 1)) === 0;\r\n}\r\n\r\nfunction bindAttributeToBuffer(gl: WebGLRenderingContext, attrib: number, buffer: WebGLBuffer, size: number, type: number) {\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n  gl.vertexAttribPointer(attrib, size, type, false, 0, 0);\r\n  gl.enableVertexAttribArray(attrib);\r\n}\r\n\r\nfunction unbindAttribute(gl: WebGLRenderingContext, attrib: number) {\r\n  gl.disableVertexAttribArray(attrib);\r\n}\r\n\r\nfunction makeHubcapBuffers(gl: WebGLRenderingContext) {\r\n  const r = 0.05;\r\n  const h = 0.01;\r\n  const positions = [0, 0, h];\r\n  for (let t = 0; t < 2 * Math.PI; t += Math.PI / 30) {\r\n    positions.push(r * Math.cos(t), r * Math.sin(t), 0);\r\n  }\r\n  const vertexCount = positions.length / 3;\r\n  return {\r\n    vertexCount,\r\n    positions: makeFloatBufferFromArray(gl, positions),\r\n    colors: makeFloatBufferFromArray(gl, new Array(3 * vertexCount).fill(0.75)),\r\n  };\r\n}\r\n\r\nfunction makeHandBuffers(gl: WebGLRenderingContext, width: number, length: number) {\r\n  return {\r\n    vertexCount: 4,\r\n    positions: makeFloatBufferFromArray(gl, [\r\n      -width, 0, 0,\r\n      +width, 0, 0,\r\n      -width, length, 0,\r\n      +width, length, 0,\r\n    ]),\r\n    colors: makeFloatBufferFromArray(gl, [\r\n      0.75, 0.75, 0.75,\r\n      0.75, 0.75, 0.75,\r\n      0.75, 0.75, 0.75,\r\n      0.75, 0.75, 0.75,\r\n    ]),\r\n  };\r\n}\r\n\r\nfunction makeStripBuffers(gl: WebGLRenderingContext, torsion: number, piece: number) {\r\n  const { positions, colors, textureCoords } = makeStrip(torsion, piece);\r\n  return {\r\n    vertexCount: positions.length / 3,\r\n    positions: makeFloatBufferFromArray(gl, positions),\r\n    colors: makeFloatBufferFromArray(gl, colors),\r\n    textureCoords: makeFloatBufferFromArray(gl, textureCoords),\r\n  };\r\n}\r\n\r\nfunction makeFloatBufferFromArray(gl: WebGLRenderingContext, positions: number[]) {\r\n  const buffer = gl.createBuffer();\r\n  if (!buffer) {\r\n    throw new Error('Failed to create buffer.');\r\n  }\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);\r\n  return buffer;\r\n}\r\n\r\nfunction makeStrip(theta: number, piece: number) {\r\n  const textureCoords: number[] = [];\r\n  const positions: number[] = [];\r\n  const colors: number[] = [];\r\n  const nTwists = 3;\r\n  const R = 1.0;\r\n  const h = 0.1;\r\n  for (let s = 0.0; s < 1.001; s += 0.033333) {\r\n    const t = (piece + s) * Math.PI;\r\n    const tt = nTwists * 0.5 * (t - theta);\r\n    // Position\r\n    const r1 = R - h * Math.cos(tt);\r\n    const r2 = R + h * Math.cos(tt);\r\n    positions.push(r1 * Math.sin(t), r1 * Math.cos(t), -h * Math.sin(tt));\r\n    positions.push(r2 * Math.sin(t), r2 * Math.cos(t), +h * Math.sin(tt));\r\n    // Color\r\n    const color = [0, 0, 0];\r\n    for (let k = 0; k < 3; k++) {\r\n      color[k] = (1 - s) * COLORS[piece][k] + s * COLORS[(piece + 1) % COLORS.length][k];\r\n    }\r\n    colors.push(...color, ...color);\r\n    // Texture Coordinates\r\n    textureCoords.push(s, 0, s, 1);\r\n  }\r\n  return { positions, colors, textureCoords };\r\n}\r\n\r\nfunction makeProgramWithoutTextureMapping(gl: WebGLRenderingContext) {\r\n  const U_MODEL_VIEW_MATRIX = 'uModelViewMatrix';\r\n  const U_PROJECTION_MATRIX = 'uProjectionMatrix';\r\n  const A_POSITION = 'aPosition';\r\n  const A_COLOR = 'aColor';\r\n  const V_COLOR = 'vColor';\r\n\r\n  const vsSource = glsl`\r\n    // Attributes\r\n    attribute vec4 ${A_POSITION};\r\n    attribute vec4 ${A_COLOR};\r\n    // Uniforms\r\n    uniform mat4 ${U_MODEL_VIEW_MATRIX};\r\n    uniform mat4 ${U_PROJECTION_MATRIX};\r\n    // Varyings\r\n    varying lowp vec4 ${V_COLOR};\r\n    // Program\r\n    void main(void) {\r\n      gl_Position = ${U_PROJECTION_MATRIX} * ${U_MODEL_VIEW_MATRIX} * ${A_POSITION};\r\n      ${V_COLOR} = ${A_COLOR};\r\n    }\r\n  `;\r\n\r\n  const fsSource = glsl`\r\n    // Varyings\r\n    varying lowp vec4 ${V_COLOR};\r\n    // Program\r\n    void main(void) {\r\n      gl_FragColor = ${V_COLOR};\r\n    }\r\n  `;\r\n\r\n  const program = buildProgram(gl, vsSource, fsSource);\r\n\r\n  return {\r\n    program,\r\n    attribs: {\r\n      position: gl.getAttribLocation(program, A_POSITION),\r\n      color: gl.getAttribLocation(program, A_COLOR),\r\n    },\r\n    uniforms: {\r\n      modelViewMatrix: getUniformLocation(gl, program, U_MODEL_VIEW_MATRIX),\r\n      projectionMatrix: getUniformLocation(gl, program, U_PROJECTION_MATRIX),\r\n    },\r\n  };\r\n}\r\n\r\nfunction makeProgramWithTextureMapping(gl: WebGLRenderingContext) {\r\n  const U_MODEL_VIEW_MATRIX = 'uModelViewMatrix';\r\n  const U_PROJECTION_MATRIX = 'uProjectionMatrix';\r\n  const U_SAMPLER = 'uSampler';\r\n  const A_POSITION = 'aPosition';\r\n  const A_COLOR = 'aColor';\r\n  const A_TEXTURE_COORDS = 'aTextureCoords';\r\n  const V_COLOR = 'vColor';\r\n  const V_TEXTURE_COORDS = 'vTextureCoords';\r\n\r\n  const vsSource = glsl`\r\n    // Attributes\r\n    attribute vec4 ${A_POSITION};\r\n    attribute vec4 ${A_COLOR};\r\n    attribute vec2 ${A_TEXTURE_COORDS};\r\n    // Uniforms\r\n    uniform mat4 ${U_MODEL_VIEW_MATRIX};\r\n    uniform mat4 ${U_PROJECTION_MATRIX};\r\n    // Varyings\r\n    varying lowp vec4 ${V_COLOR};\r\n    varying highp vec2 ${V_TEXTURE_COORDS};\r\n    // Program\r\n    void main(void) {\r\n      gl_Position = ${U_PROJECTION_MATRIX} * ${U_MODEL_VIEW_MATRIX} * ${A_POSITION};\r\n      ${V_COLOR} = ${A_COLOR};\r\n      ${V_TEXTURE_COORDS} = ${A_TEXTURE_COORDS};\r\n    }\r\n  `;\r\n\r\n  const fsSource = glsl`\r\n    // Varyings\r\n    varying lowp vec4 ${V_COLOR};\r\n    varying highp vec2 ${V_TEXTURE_COORDS};\r\n    // Uniforms\r\n    uniform sampler2D ${U_SAMPLER};\r\n    // Program\r\n    void main(void) {\r\n      gl_FragColor = ${V_COLOR} * texture2D(${U_SAMPLER}, ${V_TEXTURE_COORDS});\r\n    }\r\n  `;\r\n\r\n  const program = buildProgram(gl, vsSource, fsSource);\r\n\r\n  return {\r\n    program,\r\n    attribs: {\r\n      position: gl.getAttribLocation(program, A_POSITION),\r\n      color: gl.getAttribLocation(program, A_COLOR),\r\n      textureCoords: gl.getAttribLocation(program, A_TEXTURE_COORDS),\r\n    },\r\n    uniforms: {\r\n      sampler: getUniformLocation(gl, program, U_SAMPLER),\r\n      modelViewMatrix: getUniformLocation(gl, program, U_MODEL_VIEW_MATRIX),\r\n      projectionMatrix: getUniformLocation(gl, program, U_PROJECTION_MATRIX),\r\n    },\r\n  };\r\n}\r\n\r\nfunction buildProgram(gl: WebGLRenderingContext, vsSource: string, fsSource: string) {\r\n  const program = gl.createProgram();\r\n\r\n  if (!program) {\r\n    throw new Error('Failed to create program.');\r\n  }\r\n\r\n  gl.attachShader(program, buildShader(gl, gl.VERTEX_SHADER, vsSource));\r\n  gl.attachShader(program, buildShader(gl, gl.FRAGMENT_SHADER, fsSource));\r\n  gl.linkProgram(program);\r\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n    const message = `Unable to initialize the shader program: ${gl.getProgramInfoLog(program)}`;\r\n    gl.deleteProgram(program);\r\n    throw new Error(message);\r\n  }\r\n\r\n  return program;\r\n}\r\n\r\nfunction getUniformLocation(gl: WebGLRenderingContext, program: WebGLProgram, name: string): WebGLUniformLocation {\r\n  return gl.getUniformLocation(program, name) || error(`No uniform named \"${name}\" was found.`);\r\n}\r\n\r\nfunction buildShader(gl: WebGLRenderingContext, type: number, source: string) {\r\n  const shader = gl.createShader(type);\r\n  if (!shader) {\r\n    throw new Error('Failed to create shader.');\r\n  }\r\n  gl.shaderSource(shader, source);\r\n  gl.compileShader(shader);\r\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n    const message = `An error occurred compiling the shaders: ${gl.getShaderInfoLog(shader)}`;\r\n    gl.deleteShader(shader);\r\n    throw new Error(message);\r\n  }\r\n  return shader;\r\n}\r\n\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport './index.scss'\r\n\r\n// You need bootstrap? $ yarn add bootstrap\r\n// See: https://create-react-app.dev/docs/adding-bootstrap\r\n// import 'bootstrap/dist/css/bootstrap.css';\r\n\r\n// Single-page application (SPA)\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want to Pre-render with react-snap\r\n// Step 1: install $ yarn add --dev react-snap\r\n// Step 2: add to package.json run script: \"postbuild\": \"react-snap\"\r\n// Step 3: Add to package.json: \"reactSnap\":{\"inlineCss\":true}\r\n// Step 3: replace to the script below.\r\n\r\n/*\r\nimport { hydrate, render } from 'react-dom'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nconst rootElement = document.getElementById('root')\r\nif (rootElement && rootElement!.hasChildNodes()) {\r\n  hydrate(<AppRouter />, rootElement)\r\n\r\n  // Precache - set to 'register' once you Pre-render\r\n  // If you want your app to work offline and load faster, you can change\r\n  // unregister() to register() below. Note this comes with some pitfalls.\r\n  // Learn more about service workers: http://bit.ly/CRA-PWA\r\n  serviceWorker.register()\r\n} else {\r\n  render(<AppRouter />, rootElement)\r\n}\r\n*/\r\n"],"sourceRoot":""}