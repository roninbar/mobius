{"version":3,"sources":["App.tsx","index.tsx"],"names":["glsl","String","raw","COLORS","App","useState","theta","setTheta","anchor","setAnchor","mat4","create","modelMatrix","setModelMatrix","programWithTextureMapping","useRef","programWithoutTextureMapping","canvas","useEffect","gl","current","getContext","Error","vsSource","fsSource","program","buildProgram","attribs","position","getAttribLocation","color","textureCoords","uniforms","sampler","getUniformLocation","viewMatrix","projectionMatrix","makeProgramWithTextureMapping","normal","makeProgramWithoutTextureMapping","TEXTURE0","TEXTURE1","TEXTURE2","TEXTURE3","which","loadTexture","process","enable","DEPTH_TEST","depthFunc","LEQUAL","clearDepth","clearColor","CULL_FACE","cullFace","BACK","afid","requestAnimationFrame","f","time","Math","PI","cancelAnimationFrame","texProgram","texAttribs","texUniforms","nonTexProgram","nonTexAttribs","nonTexUniforms","perspective","width","height","fromTranslation","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","vertexCounts","positionBuffers","colorBuffers","textureCoordBuffers","i","makeStripBuffers","vertexCount","positions","colors","useProgram","uniformMatrix4fv","uniform1i","bindAttributeToBuffer","FLOAT","drawArrays","TRIANGLE_STRIP","unbindAttribute","forEach","buffer","deleteBuffer","drawHand","length","angle","makeFloatBufferFromArray","normals","makeHandBuffers","rotateZ","t","push","cos","sin","Array","fill","makeHubcapBuffers","TRIANGLE_FAN","className","ref","onPointerDown","currentTarget","pointerId","x","clientX","y","clientY","setPointerCapture","onPointerMove","dx","dy","distance","sqrt","rot","fromRotation","mul","onPointerUp","releasePointerCapture","url","texture","createTexture","activeTexture","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","Uint8Array","image","Image","onload","isPowerOf2","generateMipmap","texParameteri","TEXTURE_MAG_FILTER","LINEAR","TEXTURE_MIN_FILTER","LINEAR_MIPMAP_LINEAR","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","src","value","attrib","size","type","bindBuffer","ARRAY_BUFFER","vertexAttribPointer","enableVertexAttribArray","disableVertexAttribArray","torsion","piece","h","s","tt","nTwists","r1","r2","k","makeStrip","array","createBuffer","bufferData","Float32Array","STATIC_DRAW","createProgram","attachShader","buildShader","VERTEX_SHADER","FRAGMENT_SHADER","linkProgram","getProgramParameter","LINK_STATUS","message","getProgramInfoLog","deleteProgram","name","error","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dd324645.chunk.js","sourcesContent":["/* eslint-disable one-var */\r\n/* eslint-disable no-bitwise */\r\n\r\nimport { mat4 } from 'gl-matrix';\r\nimport React, { MutableRefObject, useEffect, useRef, useState } from 'react';\r\nimport './App.scss';\r\n\r\ninterface ProgramInfo {\r\n  program: WebGLProgram;\r\n  attribs: {\r\n    color: number;\r\n    position: number;\r\n  };\r\n  uniforms: {\r\n    modelMatrix: WebGLUniformLocation;\r\n    viewMatrix: WebGLUniformLocation;\r\n    projectionMatrix: WebGLUniformLocation;\r\n  };\r\n}\r\n\r\ntype NonTextureMappingProgramInfo = ProgramInfo & {\r\n  attribs: {\r\n    normal: number;\r\n  };\r\n};\r\n\r\ntype TextureMappingProgramInfo = ProgramInfo & {\r\n  attribs: {\r\n    textureCoords: number;\r\n  };\r\n  uniforms: {\r\n    sampler: WebGLSampler;\r\n  };\r\n};\r\n\r\nconst glsl = String.raw;\r\n\r\nconst BLUE = [0, 0, 1];\r\nconst GREEN = [0, 1, 0];\r\nconst YELLOW = [1, 1, 0];\r\nconst RED = [1, 0, 0];\r\n\r\nconst COLORS = [BLUE, GREEN, YELLOW, RED];\r\n\r\nexport default function App() {\r\n\r\n  const [theta, setTheta] = useState(0); // The angle of the hour hand, in radians.\r\n  const [anchor, setAnchor] = useState<{ x: number, y: number; } | null>();\r\n  const [modelMatrix, setModelMatrix] = useState(mat4.create());\r\n\r\n  const programWithTextureMapping: MutableRefObject<TextureMappingProgramInfo | null> = useRef(null);\r\n  const programWithoutTextureMapping: MutableRefObject<NonTextureMappingProgramInfo | null> = useRef(null);\r\n\r\n  const canvas = useRef<HTMLCanvasElement>(null);\r\n\r\n  // #region Initialize WebGL stuff and start the animation.\r\n  useEffect(() => {\r\n\r\n    const gl = canvas.current?.getContext('webgl');\r\n\r\n    if (!gl) {\r\n      throw new Error('Failed to get a WebGL context.');\r\n    }\r\n\r\n    programWithTextureMapping.current = makeProgramWithTextureMapping(gl);\r\n    programWithoutTextureMapping.current = makeProgramWithoutTextureMapping(gl);\r\n\r\n    for (const which of [gl.TEXTURE0, gl.TEXTURE1, gl.TEXTURE2, gl.TEXTURE3]) {\r\n      loadTexture(gl, which, `${process.env.PUBLIC_URL}/texture/hours${which - gl.TEXTURE0}.bmp`);\r\n    }\r\n\r\n    gl.enable(gl.DEPTH_TEST);\r\n    gl.depthFunc(gl.LEQUAL);\r\n    gl.clearDepth(1);\r\n    gl.clearColor(0, 0, 0, 1);\r\n    gl.enable(gl.CULL_FACE);\r\n    gl.cullFace(gl.BACK);\r\n\r\n    let afid = requestAnimationFrame(function f(time) {\r\n      setTheta(time / 12000 * Math.PI);\r\n      afid = requestAnimationFrame(f);\r\n    });\r\n\r\n    return () => {\r\n      cancelAnimationFrame(afid);\r\n    };\r\n\r\n  }, []);\r\n  // #endregion\r\n\r\n  // #region Render one frame.\r\n  useEffect(() => {\r\n\r\n    const gl = canvas.current?.getContext('webgl');\r\n\r\n    if (!gl) {\r\n      throw new Error('Failed to get a WebGL context.');\r\n    }\r\n\r\n    if (!programWithTextureMapping.current || !programWithoutTextureMapping.current) {\r\n      throw new Error('Missing shader program!');\r\n    }\r\n\r\n    const { program: texProgram, attribs: texAttribs, uniforms: texUniforms } = programWithTextureMapping.current;\r\n    const { program: nonTexProgram, attribs: nonTexAttribs, uniforms: nonTexUniforms } = programWithoutTextureMapping.current;\r\n\r\n    const projectionMatrix = mat4.perspective(mat4.create(), Math.PI / 5, gl.canvas.width / gl.canvas.height, 0.1, 100);\r\n    const viewMatrix = mat4.fromTranslation(mat4.create(), [0, 0, -4]);\r\n\r\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n    // #region Hours Strip\r\n    const vertexCounts: number[] = [];\r\n    const positionBuffers: WebGLBuffer[] = [];\r\n    const colorBuffers: WebGLBuffer[] = [];\r\n    const textureCoordBuffers: WebGLBuffer[] = [];\r\n\r\n    for (let i = 0; i < 4; i++) (\r\n      {\r\n        vertexCount: vertexCounts[i],\r\n        positions: positionBuffers[i],\r\n        colors: colorBuffers[i],\r\n        textureCoords: textureCoordBuffers[i],\r\n      } = makeStripBuffers(gl, theta, i)\r\n    );\r\n\r\n    try {\r\n      gl.useProgram(texProgram);\r\n      gl.uniformMatrix4fv(programWithTextureMapping.current.uniforms.modelMatrix, false, modelMatrix);\r\n      gl.uniformMatrix4fv(programWithTextureMapping.current.uniforms.viewMatrix, false, viewMatrix);\r\n      gl.uniformMatrix4fv(programWithTextureMapping.current.uniforms.projectionMatrix, false, projectionMatrix);\r\n      for (let i = 0; i < 4; i++) {\r\n        gl.uniform1i(texUniforms.sampler, i);\r\n        bindAttributeToBuffer(gl, texAttribs.position, positionBuffers[i], 3, gl.FLOAT);\r\n        bindAttributeToBuffer(gl, texAttribs.color, colorBuffers[i], 3, gl.FLOAT);\r\n        bindAttributeToBuffer(gl, texAttribs.textureCoords, textureCoordBuffers[i], 2, gl.FLOAT);\r\n        try {\r\n          gl.drawArrays(gl.TRIANGLE_STRIP, 0, vertexCounts[i]);\r\n        } finally {\r\n          unbindAttribute(gl, texAttribs.textureCoords);\r\n          unbindAttribute(gl, texAttribs.color);\r\n          unbindAttribute(gl, texAttribs.position);\r\n        }\r\n      }\r\n    } finally {\r\n      [...positionBuffers, ...colorBuffers, ...textureCoordBuffers].forEach((buffer) => gl.deleteBuffer(buffer));\r\n    }\r\n    // #endregion\r\n\r\n    // #region Hands\r\n    const drawHand = function (width: number, length: number, angle: number) {\r\n      const { vertexCount, positions, normals, colors } = makeHandBuffers(gl, width, length);\r\n      try {\r\n        gl.useProgram(nonTexProgram);\r\n        gl.uniformMatrix4fv(nonTexUniforms.modelMatrix, false, mat4.rotateZ(mat4.create(), modelMatrix, -angle));\r\n        gl.uniformMatrix4fv(nonTexUniforms.viewMatrix, false, viewMatrix);\r\n        gl.uniformMatrix4fv(nonTexUniforms.projectionMatrix, false, projectionMatrix);\r\n        bindAttributeToBuffer(gl, nonTexAttribs.position, positions, 3, gl.FLOAT);\r\n        bindAttributeToBuffer(gl, nonTexAttribs.normal, normals, 3, gl.FLOAT);\r\n        bindAttributeToBuffer(gl, nonTexAttribs.color, colors, 3, gl.FLOAT);\r\n        try {\r\n          gl.drawArrays(gl.TRIANGLE_STRIP, 0, vertexCount);\r\n        } finally {\r\n          unbindAttribute(gl, nonTexAttribs.color);\r\n          unbindAttribute(gl, nonTexAttribs.normal);\r\n          unbindAttribute(gl, nonTexAttribs.position);\r\n        }\r\n      } finally {\r\n        gl.deleteBuffer(colors);\r\n        gl.deleteBuffer(normals);\r\n        gl.deleteBuffer(positions);\r\n      }\r\n    };\r\n\r\n    drawHand(0.02, 0.6, theta); // Hours\r\n    drawHand(0.02, 0.8, 12 * theta); // Minutes\r\n    // #endregion\r\n\r\n    // #region Hubcap\r\n    const { vertexCount, positions, normals, colors } = makeHubcapBuffers(gl);\r\n    try {\r\n      gl.useProgram(nonTexProgram);\r\n      gl.uniformMatrix4fv(nonTexUniforms.modelMatrix, false, modelMatrix);\r\n      gl.uniformMatrix4fv(nonTexUniforms.viewMatrix, false, viewMatrix);\r\n      gl.uniformMatrix4fv(nonTexUniforms.projectionMatrix, false, projectionMatrix);\r\n      bindAttributeToBuffer(gl, nonTexAttribs.position, positions, 3, gl.FLOAT);\r\n      bindAttributeToBuffer(gl, nonTexAttribs.normal, normals, 3, gl.FLOAT);\r\n      bindAttributeToBuffer(gl, nonTexAttribs.color, colors, 3, gl.FLOAT);\r\n      try {\r\n        gl.drawArrays(gl.TRIANGLE_FAN, 0, vertexCount);\r\n      } finally {\r\n        unbindAttribute(gl, nonTexAttribs.position);\r\n        unbindAttribute(gl, nonTexAttribs.color);\r\n      }\r\n    } finally {\r\n      gl.deleteBuffer(colors);\r\n      gl.deleteBuffer(positions);\r\n    }\r\n    // #endregion\r\n\r\n  }, [theta, modelMatrix]);\r\n  // #endregion\r\n\r\n  // #region Event Handlers \r\n  const onPointerDown = ({ currentTarget, pointerId, clientX: x, clientY: y }: React.PointerEvent<HTMLCanvasElement>): void => {\r\n    currentTarget.setPointerCapture(pointerId);\r\n    setAnchor({ x, y });\r\n  };\r\n\r\n  const onPointerUp = ({ currentTarget, pointerId }: React.PointerEvent<HTMLCanvasElement>): void => {\r\n    setAnchor(null);\r\n    currentTarget.releasePointerCapture(pointerId);\r\n  };\r\n\r\n  const onPointerMove = ({ clientX: x, clientY: y }: React.PointerEvent<HTMLCanvasElement>): void => {\r\n    if (anchor) {\r\n      const dx = x - anchor.x;\r\n      const dy = y - anchor.y;\r\n      const distance = Math.sqrt(dx * dx + dy * dy);\r\n      if (distance > 0) {\r\n        const rot = mat4.fromRotation(mat4.create(), 0.01 * distance, [dy, dx, 0]);\r\n        setModelMatrix(mat4.mul(mat4.create(), rot, modelMatrix));\r\n        setAnchor({ x, y });\r\n      }\r\n    }\r\n  };\r\n  // #endregion\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <canvas\r\n          width=\"768px\"\r\n          height=\"768px\"\r\n          ref={canvas}\r\n          onPointerDown={onPointerDown}\r\n          onPointerMove={onPointerMove}\r\n          onPointerUp={onPointerUp}\r\n        />\r\n        <p>M&ouml;bius Clock</p>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction error<T>(message: string): T {\r\n  throw new Error(message);\r\n}\r\n\r\n//\r\n// Initialize a texture and load an image.\r\n// When the image finished loading copy it into the texture.\r\n//\r\nfunction loadTexture(gl: WebGLRenderingContext, which: number, url: string) {\r\n  const texture = gl.createTexture();\r\n\r\n  gl.activeTexture(which);\r\n  gl.bindTexture(gl.TEXTURE_2D, texture);\r\n\r\n  // Because images have to be downloaded over the internet\r\n  // they might take a moment until they are ready.\r\n  // Until then put a single pixel in the texture so we can\r\n  // use it immediately. When the image has finished downloading\r\n  // we'll update the texture with the contents of the image.\r\n  gl.texImage2D(\r\n    gl.TEXTURE_2D,\r\n    0, // level\r\n    gl.RGBA,\r\n    1, // width\r\n    1, // height\r\n    0, // border\r\n    gl.RGBA,\r\n    gl.UNSIGNED_BYTE,\r\n    new Uint8Array([255, 255, 255, 255]), // opaque white\r\n  );\r\n\r\n  const image = new Image();\r\n  image.onload = () => {\r\n    gl.activeTexture(which);\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\r\n\r\n    // WebGL1 has different requirements for power of 2 images\r\n    // vs non power of 2 images so check if the image is a\r\n    // power of 2 in both dimensions.\r\n    if (isPowerOf2(image.width) && isPowerOf2(image.height)) {\r\n      // Yes, it's a power of 2. Generate mips.\r\n      gl.generateMipmap(gl.TEXTURE_2D);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);\r\n    } else {\r\n      // No, it's not a power of 2. Turn off mips and set\r\n      // wrapping to clamp to edge.\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n    }\r\n  };\r\n  image.src = url;\r\n\r\n  return texture;\r\n}\r\n\r\nfunction isPowerOf2(value: number) {\r\n  return (value & (value - 1)) === 0;\r\n}\r\n\r\nfunction bindAttributeToBuffer(gl: WebGLRenderingContext, attrib: number, buffer: WebGLBuffer, size: number, type: number) {\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n  gl.vertexAttribPointer(attrib, size, type, false, 0, 0);\r\n  gl.enableVertexAttribArray(attrib);\r\n}\r\n\r\nfunction unbindAttribute(gl: WebGLRenderingContext, attrib: number) {\r\n  gl.disableVertexAttribArray(attrib);\r\n}\r\n\r\nfunction makeHubcapBuffers(gl: WebGLRenderingContext) {\r\n  const r = 0.05;\r\n  const h = 0.01;\r\n  const positions = [0, 0, h];\r\n  const normals = [0, 0, 1];\r\n  for (let t = 0; t < 2 * Math.PI; t += Math.PI / 30) {\r\n    positions.push(r * Math.cos(t), r * Math.sin(t), 0);\r\n    normals.push(0, 0, 1);\r\n  }\r\n  const vertexCount = positions.length / 3;\r\n  return {\r\n    vertexCount,\r\n    positions: makeFloatBufferFromArray(gl, positions),\r\n    normals: makeFloatBufferFromArray(gl, normals),\r\n    colors: makeFloatBufferFromArray(gl, new Array(3 * vertexCount).fill(0.75)),\r\n  };\r\n}\r\n\r\nfunction makeHandBuffers(gl: WebGLRenderingContext, width: number, length: number) {\r\n  return {\r\n    vertexCount: 4,\r\n    positions: makeFloatBufferFromArray(gl, [\r\n      -width, 0, 0,\r\n      +width, 0, 0,\r\n      -width, length, 0,\r\n      +width, length, 0,\r\n    ]),\r\n    normals: makeFloatBufferFromArray(gl, [\r\n      0, 0, 1,\r\n      0, 0, 1,\r\n      0, 0, 1,\r\n      0, 0, 1,\r\n    ]),\r\n    colors: makeFloatBufferFromArray(gl, [\r\n      0.75, 0.75, 0.75,\r\n      0.75, 0.75, 0.75,\r\n      0.75, 0.75, 0.75,\r\n      0.75, 0.75, 0.75,\r\n    ]),\r\n  };\r\n}\r\n\r\nfunction makeStripBuffers(gl: WebGLRenderingContext, torsion: number, piece: number) {\r\n  const { positions, colors, textureCoords } = makeStrip(torsion, piece);\r\n  return {\r\n    vertexCount: positions.length / 3,\r\n    positions: makeFloatBufferFromArray(gl, positions),\r\n    colors: makeFloatBufferFromArray(gl, colors),\r\n    textureCoords: makeFloatBufferFromArray(gl, textureCoords),\r\n  };\r\n}\r\n\r\nfunction makeFloatBufferFromArray(gl: WebGLRenderingContext, array: number[]) {\r\n  const buffer = gl.createBuffer();\r\n  if (!buffer) {\r\n    throw new Error('Failed to create buffer.');\r\n  }\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(array), gl.STATIC_DRAW);\r\n  return buffer;\r\n}\r\n\r\nfunction makeStrip(theta: number, piece: number) {\r\n  const textureCoords: number[] = [];\r\n  const positions: number[] = [];\r\n  const colors: number[] = [];\r\n  const nTwists = 3;\r\n  const R = 1.0;\r\n  const h = 0.1;\r\n  for (let s = 0.0; s < 1.001; s += 0.033333) {\r\n    const t = (piece + s) * Math.PI;\r\n    const tt = nTwists * 0.5 * (t - theta);\r\n    // Position\r\n    const r1 = R - h * Math.cos(tt);\r\n    const r2 = R + h * Math.cos(tt);\r\n    positions.push(r1 * Math.sin(t), r1 * Math.cos(t), -h * Math.sin(tt));\r\n    positions.push(r2 * Math.sin(t), r2 * Math.cos(t), +h * Math.sin(tt));\r\n    // Color\r\n    const color = [0, 0, 0];\r\n    for (let k = 0; k < 3; k++) {\r\n      color[k] = (1 - s) * COLORS[piece][k] + s * COLORS[(piece + 1) % COLORS.length][k];\r\n    }\r\n    colors.push(...color, ...color);\r\n    // Texture Coordinates\r\n    textureCoords.push(s, 0, s, 1);\r\n  }\r\n  return { positions, colors, textureCoords };\r\n}\r\n\r\nfunction makeProgramWithoutTextureMapping(gl: WebGLRenderingContext) {\r\n  const U_MODEL_MATRIX = 'uModelMatrix';\r\n  const U_VIEW_MATRIX = 'uViewMatrix';\r\n  const U_PROJECTION_MATRIX = 'uProjectionMatrix';\r\n  const A_POSITION = 'aPosition';\r\n  const A_NORMAL = 'aNormal';\r\n  const A_COLOR = 'aColor';\r\n  const V_COLOR = 'vColor';\r\n  const V_LIGHTING = 'vLighting';\r\n\r\n  const vsSource = glsl`\r\n    // Attributes\r\n    attribute vec4 ${A_POSITION};\r\n    attribute vec3 ${A_NORMAL};\r\n    attribute vec4 ${A_COLOR};\r\n    // Uniforms\r\n    uniform mat4 ${U_MODEL_MATRIX};\r\n    uniform mat4 ${U_VIEW_MATRIX};\r\n    uniform mat4 ${U_PROJECTION_MATRIX};\r\n    // Varyings\r\n    varying lowp vec4 ${V_COLOR};\r\n    varying lowp vec3 ${V_LIGHTING};\r\n    // Program\r\n    void main(void) {\r\n      gl_Position = ${U_PROJECTION_MATRIX} * ${U_VIEW_MATRIX} * ${U_MODEL_MATRIX} * ${A_POSITION};\r\n      ${V_COLOR} = ${A_COLOR};\r\n      // Apply lighting\r\n      highp vec3 ambientLightColor = vec3(0.3, 0.3, 0.3);\r\n      highp vec3 directionalLightColor = vec3(1, 1, 1);\r\n      highp vec3 directionalLightVector = normalize(vec3(0.85, 0.8, 0.75));\r\n      highp vec4 transformedNormal = ${U_VIEW_MATRIX} * ${U_MODEL_MATRIX} * vec4(${A_NORMAL}, 0.0);\r\n      highp float directionalLightIntensity = max(0.0, dot(transformedNormal.xyz, directionalLightVector));\r\n      ${V_LIGHTING} = ambientLightColor + directionalLightIntensity * directionalLightColor;\r\n    }\r\n  `;\r\n\r\n  const fsSource = glsl`\r\n    // Varyings\r\n    varying lowp vec4 ${V_COLOR};\r\n    varying lowp vec3 ${V_LIGHTING};\r\n    // Program\r\n    void main(void) {\r\n      gl_FragColor = ${V_COLOR} * vec4(${V_LIGHTING}, 1.0);\r\n    }\r\n  `;\r\n\r\n  const program = buildProgram(gl, vsSource, fsSource);\r\n\r\n  return {\r\n    program,\r\n    attribs: {\r\n      position: gl.getAttribLocation(program, A_POSITION),\r\n      normal: gl.getAttribLocation(program, A_NORMAL),\r\n      color: gl.getAttribLocation(program, A_COLOR),\r\n    },\r\n    uniforms: {\r\n      modelMatrix: getUniformLocation(gl, program, U_MODEL_MATRIX),\r\n      viewMatrix: getUniformLocation(gl, program, U_VIEW_MATRIX),\r\n      projectionMatrix: getUniformLocation(gl, program, U_PROJECTION_MATRIX),\r\n    },\r\n  };\r\n}\r\n\r\nfunction makeProgramWithTextureMapping(gl: WebGLRenderingContext) {\r\n  const U_MODEL_MATRIX = 'uModelMatrix';\r\n  const U_VIEW_MATRIX = 'uViewMatrix';\r\n  const U_PROJECTION_MATRIX = 'uProjectionMatrix';\r\n  const U_SAMPLER = 'uSampler';\r\n  const A_POSITION = 'aPosition';\r\n  const A_COLOR = 'aColor';\r\n  const A_TEXTURE_COORDS = 'aTextureCoords';\r\n  const V_COLOR = 'vColor';\r\n  const V_TEXTURE_COORDS = 'vTextureCoords';\r\n\r\n  const vsSource = glsl`\r\n    // Attributes\r\n    attribute vec4 ${A_POSITION};\r\n    attribute vec4 ${A_COLOR};\r\n    attribute vec2 ${A_TEXTURE_COORDS};\r\n    // Uniforms\r\n    uniform mat4 ${U_MODEL_MATRIX};\r\n    uniform mat4 ${U_VIEW_MATRIX};\r\n    uniform mat4 ${U_PROJECTION_MATRIX};\r\n    // Varyings\r\n    varying lowp vec4 ${V_COLOR};\r\n    varying highp vec2 ${V_TEXTURE_COORDS};\r\n    // Program\r\n    void main(void) {\r\n      gl_Position = ${U_PROJECTION_MATRIX} * ${U_VIEW_MATRIX} * ${U_MODEL_MATRIX} * ${A_POSITION};\r\n      ${V_COLOR} = ${A_COLOR};\r\n      ${V_TEXTURE_COORDS} = ${A_TEXTURE_COORDS};\r\n    }\r\n  `;\r\n\r\n  const fsSource = glsl`\r\n    // Varyings\r\n    varying lowp vec4 ${V_COLOR};\r\n    varying highp vec2 ${V_TEXTURE_COORDS};\r\n    // Uniforms\r\n    uniform sampler2D ${U_SAMPLER};\r\n    // Program\r\n    void main(void) {\r\n      gl_FragColor = ${V_COLOR} * texture2D(${U_SAMPLER}, ${V_TEXTURE_COORDS});\r\n    }\r\n  `;\r\n\r\n  const program = buildProgram(gl, vsSource, fsSource);\r\n\r\n  return {\r\n    program,\r\n    attribs: {\r\n      position: gl.getAttribLocation(program, A_POSITION),\r\n      color: gl.getAttribLocation(program, A_COLOR),\r\n      textureCoords: gl.getAttribLocation(program, A_TEXTURE_COORDS),\r\n    },\r\n    uniforms: {\r\n      sampler: getUniformLocation(gl, program, U_SAMPLER),\r\n      modelMatrix: getUniformLocation(gl, program, U_MODEL_MATRIX),\r\n      viewMatrix: getUniformLocation(gl, program, U_VIEW_MATRIX),\r\n      projectionMatrix: getUniformLocation(gl, program, U_PROJECTION_MATRIX),\r\n    },\r\n  };\r\n}\r\n\r\nfunction buildProgram(gl: WebGLRenderingContext, vsSource: string, fsSource: string) {\r\n  const program = gl.createProgram();\r\n\r\n  if (!program) {\r\n    throw new Error('Failed to create program.');\r\n  }\r\n\r\n  gl.attachShader(program, buildShader(gl, gl.VERTEX_SHADER, vsSource));\r\n  gl.attachShader(program, buildShader(gl, gl.FRAGMENT_SHADER, fsSource));\r\n  gl.linkProgram(program);\r\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n    const message = `Unable to initialize the shader program: ${gl.getProgramInfoLog(program)}`;\r\n    gl.deleteProgram(program);\r\n    throw new Error(message);\r\n  }\r\n\r\n  return program;\r\n}\r\n\r\nfunction getUniformLocation(gl: WebGLRenderingContext, program: WebGLProgram, name: string): WebGLUniformLocation {\r\n  return gl.getUniformLocation(program, name) || error(`No uniform named \"${name}\" was found.`);\r\n}\r\n\r\nfunction buildShader(gl: WebGLRenderingContext, type: number, source: string) {\r\n  const shader = gl.createShader(type);\r\n  if (!shader) {\r\n    throw new Error('Failed to create shader.');\r\n  }\r\n  gl.shaderSource(shader, source);\r\n  gl.compileShader(shader);\r\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n    const message = `An error occurred compiling the shaders: ${gl.getShaderInfoLog(shader)}`;\r\n    gl.deleteShader(shader);\r\n    throw new Error(message);\r\n  }\r\n  return shader;\r\n}\r\n\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport './index.scss'\r\n\r\n// You need bootstrap? $ yarn add bootstrap\r\n// See: https://create-react-app.dev/docs/adding-bootstrap\r\n// import 'bootstrap/dist/css/bootstrap.css';\r\n\r\n// Single-page application (SPA)\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want to Pre-render with react-snap\r\n// Step 1: install $ yarn add --dev react-snap\r\n// Step 2: add to package.json run script: \"postbuild\": \"react-snap\"\r\n// Step 3: Add to package.json: \"reactSnap\":{\"inlineCss\":true}\r\n// Step 3: replace to the script below.\r\n\r\n/*\r\nimport { hydrate, render } from 'react-dom'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nconst rootElement = document.getElementById('root')\r\nif (rootElement && rootElement!.hasChildNodes()) {\r\n  hydrate(<AppRouter />, rootElement)\r\n\r\n  // Precache - set to 'register' once you Pre-render\r\n  // If you want your app to work offline and load faster, you can change\r\n  // unregister() to register() below. Note this comes with some pitfalls.\r\n  // Learn more about service workers: http://bit.ly/CRA-PWA\r\n  serviceWorker.register()\r\n} else {\r\n  render(<AppRouter />, rootElement)\r\n}\r\n*/\r\n"],"sourceRoot":""}