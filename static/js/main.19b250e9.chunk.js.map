{"version":3,"sources":["App.tsx","index.tsx"],"names":["glsl","String","raw","COLORS","App","useState","theta","setTheta","anchor","setAnchor","mat4","create","modelMatrix","setModelMatrix","programWithTextureMapping","useRef","programWithoutTextureMapping","canvas","useEffect","gl","current","getContext","Error","vsSource","fsSource","program","buildProgram","attribs","position","getAttribLocation","color","textureCoords","uniforms","sampler","getUniformLocation","viewMatrix","projectionMatrix","makeProgramWithTextureMapping","normal","makeProgramWithoutTextureMapping","TEXTURE0","TEXTURE1","TEXTURE2","TEXTURE3","which","loadTexture","process","enable","DEPTH_TEST","depthFunc","LEQUAL","clearDepth","clearColor","CULL_FACE","cullFace","BACK","afid","requestAnimationFrame","f","time","Math","PI","cancelAnimationFrame","texProgram","texAttribs","texUniforms","nonTexProgram","nonTexAttribs","nonTexUniforms","perspective","width","height","fromTranslation","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","uniformMatrix4fv","R","positions","normals","colors","topology","t","push","cos","sin","mode","TRIANGLE_STRIP","first","count","length","positionBuffer","makeFloatBufferFromArray","normalBuffer","colorBuffer","makeRimBuffers","useProgram","FRONT","drawArrays","deleteBuffer","translate","v","x","y","TRIANGLE_FAN","rr","r","x0","y0","x1","y1","textureCoordBuffer","makeDiscBuffers","vertexCounts","positionBuffers","colorBuffers","textureCoordBuffers","i","makeStripBuffers","vertexCount","uniform1i","bindAttribute","FLOAT","unbindAttribute","forEach","buffer","drawHand","angle","makeHandBuffers","rotateZ","h","norm","sqrt","nr","nh","Array","fill","makeHubcapBuffers","className","ref","onPointerDown","currentTarget","pointerId","clientX","clientY","setPointerCapture","onPointerMove","dx","dy","distance","rot","fromRotation","mul","onPointerUp","releasePointerCapture","positionAttrib","normalAttrib","colorAttrib","url","texture","createTexture","activeTexture","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","Uint8Array","image","Image","onload","isPowerOf2","generateMipmap","texParameteri","TEXTURE_MAG_FILTER","LINEAR","TEXTURE_MIN_FILTER","LINEAR_MIPMAP_LINEAR","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","src","value","torsion","piece","s","tt","nTwists","r1","r2","k","makeStrip","array","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","attrib","size","type","vertexAttribPointer","enableVertexAttribArray","disableVertexAttribArray","createProgram","attachShader","buildShader","VERTEX_SHADER","FRAGMENT_SHADER","linkProgram","getProgramParameter","LINK_STATUS","message","getProgramInfoLog","deleteProgram","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","name","error","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.19b250e9.chunk.js","sourcesContent":["/* eslint-disable one-var */\r\n/* eslint-disable no-bitwise */\r\n\r\nimport { mat4 } from 'gl-matrix';\r\nimport React, { MutableRefObject, useEffect, useRef, useState } from 'react';\r\nimport './App.scss';\r\n\r\ninterface ProgramInfo {\r\n  program: WebGLProgram;\r\n  attribs: {\r\n    color: number;\r\n    position: number;\r\n  };\r\n  uniforms: {\r\n    modelMatrix: WebGLUniformLocation;\r\n    viewMatrix: WebGLUniformLocation;\r\n    projectionMatrix: WebGLUniformLocation;\r\n  };\r\n}\r\n\r\ntype NonTextureMappingProgramInfo = ProgramInfo & {\r\n  attribs: {\r\n    normal: number;\r\n  };\r\n};\r\n\r\ntype TextureMappingProgramInfo = ProgramInfo & {\r\n  attribs: {\r\n    textureCoords: number;\r\n  };\r\n  uniforms: {\r\n    sampler: WebGLSampler;\r\n  };\r\n};\r\n\r\ntype Primitive = {\r\n  mode: number;\r\n  first: number;\r\n  count: number;\r\n};\r\n\r\nconst glsl = String.raw;\r\n\r\nconst BLUE = [0, 0, 1];\r\nconst GREEN = [0, 1, 0];\r\nconst YELLOW = [1, 1, 0];\r\nconst RED = [1, 0, 0];\r\n\r\nconst COLORS = [BLUE, GREEN, YELLOW, RED];\r\n\r\nexport default function App() {\r\n\r\n  const [theta, setTheta] = useState(0); // The angle of the hour hand, in radians.\r\n  const [anchor, setAnchor] = useState<{ x: number, y: number; } | null>();\r\n  const [modelMatrix, setModelMatrix] = useState(mat4.create());\r\n\r\n  const programWithTextureMapping: MutableRefObject<TextureMappingProgramInfo | null> = useRef(null);\r\n  const programWithoutTextureMapping: MutableRefObject<NonTextureMappingProgramInfo | null> = useRef(null);\r\n\r\n  const canvas = useRef<HTMLCanvasElement>(null);\r\n\r\n  // #region Initialize WebGL stuff and start the animation.\r\n  useEffect(() => {\r\n\r\n    const gl = canvas.current?.getContext('webgl');\r\n\r\n    if (!gl) {\r\n      throw new Error('Failed to get a WebGL context.');\r\n    }\r\n\r\n    programWithTextureMapping.current = makeProgramWithTextureMapping(gl);\r\n    programWithoutTextureMapping.current = makeProgramWithoutTextureMapping(gl);\r\n\r\n    for (const which of [gl.TEXTURE0, gl.TEXTURE1, gl.TEXTURE2, gl.TEXTURE3]) {\r\n      loadTexture(gl, which, `${process.env.PUBLIC_URL}/texture/hours${which - gl.TEXTURE0}.bmp`);\r\n    }\r\n\r\n    gl.enable(gl.DEPTH_TEST);\r\n    gl.depthFunc(gl.LEQUAL);\r\n    gl.clearDepth(1);\r\n    gl.clearColor(0, 0, 0, 1);\r\n    gl.enable(gl.CULL_FACE);\r\n    gl.cullFace(gl.BACK);\r\n\r\n    let afid = requestAnimationFrame(function f(time) {\r\n      setTheta(time / 12000 * Math.PI);\r\n      // const now = new Date();\r\n      // setTheta(((now.getSeconds() / 60 + now.getMinutes()) / 60 + now.getHours()) / 6 * Math.PI);\r\n      afid = requestAnimationFrame(f);\r\n    });\r\n\r\n    return () => {\r\n      cancelAnimationFrame(afid);\r\n    };\r\n\r\n  }, []);\r\n  // #endregion\r\n\r\n  // #region Render one frame.\r\n  useEffect(() => {\r\n\r\n    const gl = canvas.current?.getContext('webgl');\r\n\r\n    if (!gl) {\r\n      throw new Error('Failed to get a WebGL context.');\r\n    }\r\n\r\n    if (!programWithTextureMapping.current || !programWithoutTextureMapping.current) {\r\n      throw new Error('Missing shader program!');\r\n    }\r\n\r\n    const { program: texProgram, attribs: texAttribs, uniforms: texUniforms } = programWithTextureMapping.current;\r\n    const { program: nonTexProgram, attribs: nonTexAttribs, uniforms: nonTexUniforms } = programWithoutTextureMapping.current;\r\n\r\n    const projectionMatrix = mat4.perspective(mat4.create(), Math.PI / 5, gl.canvas.width / gl.canvas.height, 0.1, 100);\r\n    const viewMatrix = mat4.fromTranslation(mat4.create(), [0, 0, -4]);\r\n\r\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n    // #region Inside of Rim\r\n    {\r\n      gl.uniformMatrix4fv(nonTexUniforms.modelMatrix, false, modelMatrix);\r\n      gl.uniformMatrix4fv(nonTexUniforms.viewMatrix, false, viewMatrix);\r\n      gl.uniformMatrix4fv(nonTexUniforms.projectionMatrix, false, projectionMatrix);\r\n      const { topology, positionBuffer, normalBuffer, colorBuffer } = makeRimBuffers(gl);\r\n      try {\r\n        gl.useProgram(nonTexProgram);\r\n        gl.cullFace(gl.FRONT);\r\n        drawArrays(gl, topology, nonTexAttribs.position, positionBuffer, nonTexAttribs.normal, normalBuffer, nonTexAttribs.color, colorBuffer);\r\n      } finally {\r\n        gl.deleteBuffer(colorBuffer);\r\n        gl.deleteBuffer(normalBuffer);\r\n        gl.deleteBuffer(colorBuffer);\r\n      }\r\n    }\r\n    // #endregion\r\n\r\n    // #region Clock Face\r\n    {\r\n      gl.uniformMatrix4fv(nonTexUniforms.modelMatrix, false, mat4.translate(mat4.create(), modelMatrix, [0, 0, -0.2]));\r\n      gl.uniformMatrix4fv(nonTexUniforms.viewMatrix, false, viewMatrix);\r\n      gl.uniformMatrix4fv(nonTexUniforms.projectionMatrix, false, projectionMatrix);\r\n      const { topology, positionBuffer, normalBuffer, colorBuffer } = makeDiscBuffers(gl);\r\n      try {\r\n        gl.useProgram(nonTexProgram);\r\n        gl.cullFace(gl.BACK);\r\n        drawArrays(gl, topology, nonTexAttribs.position, positionBuffer, nonTexAttribs.normal, normalBuffer, nonTexAttribs.color, colorBuffer);\r\n      } finally {\r\n        gl.deleteBuffer(colorBuffer);\r\n        gl.deleteBuffer(normalBuffer);\r\n        gl.deleteBuffer(positionBuffer);\r\n      }\r\n    }\r\n    // #endregion\r\n\r\n    // #region Hours Strip\r\n    const vertexCounts: number[] = [];\r\n    const positionBuffers: WebGLBuffer[] = [];\r\n    const colorBuffers: WebGLBuffer[] = [];\r\n    const textureCoordBuffers: WebGLBuffer[] = [];\r\n\r\n    for (let i = 0; i < 4; i++) (\r\n      {\r\n        vertexCount: vertexCounts[i],\r\n        positions: positionBuffers[i],\r\n        colors: colorBuffers[i],\r\n        textureCoords: textureCoordBuffers[i],\r\n      } = makeStripBuffers(gl, theta, i)\r\n    );\r\n\r\n    try {\r\n      gl.useProgram(texProgram);\r\n      gl.uniformMatrix4fv(programWithTextureMapping.current.uniforms.modelMatrix, false, modelMatrix);\r\n      gl.uniformMatrix4fv(programWithTextureMapping.current.uniforms.viewMatrix, false, viewMatrix);\r\n      gl.uniformMatrix4fv(programWithTextureMapping.current.uniforms.projectionMatrix, false, projectionMatrix);\r\n      for (let i = 0; i < 4; i++) {\r\n        gl.uniform1i(texUniforms.sampler, i);\r\n        bindAttribute(gl, texAttribs.position, positionBuffers[i], 3, gl.FLOAT);\r\n        bindAttribute(gl, texAttribs.color, colorBuffers[i], 3, gl.FLOAT);\r\n        bindAttribute(gl, texAttribs.textureCoords, textureCoordBuffers[i], 2, gl.FLOAT);\r\n        try {\r\n          gl.cullFace(gl.BACK);\r\n          gl.drawArrays(gl.TRIANGLE_STRIP, 0, vertexCounts[i]);\r\n        } finally {\r\n          unbindAttribute(gl, texAttribs.textureCoords);\r\n          unbindAttribute(gl, texAttribs.color);\r\n          unbindAttribute(gl, texAttribs.position);\r\n        }\r\n      }\r\n    } finally {\r\n      [...positionBuffers, ...colorBuffers, ...textureCoordBuffers].forEach((buffer) => gl.deleteBuffer(buffer));\r\n    }\r\n    // #endregion\r\n\r\n    // #region Hands\r\n    const drawHand = function (height: number, width: number, length: number, angle: number) {\r\n      const { vertexCount, positions, normals, colors } = makeHandBuffers(gl, height, width, length);\r\n      try {\r\n        gl.useProgram(nonTexProgram);\r\n        gl.uniformMatrix4fv(nonTexUniforms.modelMatrix, false, mat4.rotateZ(mat4.create(), modelMatrix, -angle));\r\n        gl.uniformMatrix4fv(nonTexUniforms.viewMatrix, false, viewMatrix);\r\n        gl.uniformMatrix4fv(nonTexUniforms.projectionMatrix, false, projectionMatrix);\r\n        bindAttribute(gl, nonTexAttribs.position, positions, 3, gl.FLOAT);\r\n        bindAttribute(gl, nonTexAttribs.normal, normals, 3, gl.FLOAT);\r\n        bindAttribute(gl, nonTexAttribs.color, colors, 3, gl.FLOAT);\r\n        try {\r\n          gl.drawArrays(gl.TRIANGLE_STRIP, 0, vertexCount);\r\n        } finally {\r\n          unbindAttribute(gl, nonTexAttribs.color);\r\n          unbindAttribute(gl, nonTexAttribs.normal);\r\n          unbindAttribute(gl, nonTexAttribs.position);\r\n        }\r\n      } finally {\r\n        gl.deleteBuffer(colors);\r\n        gl.deleteBuffer(normals);\r\n        gl.deleteBuffer(positions);\r\n      }\r\n    };\r\n\r\n    drawHand(0.01, 0.02, 0.6, theta); // Hours\r\n    drawHand(0.02, 0.02, 0.8, 12 * theta); // Minutes\r\n    // #endregion\r\n\r\n    // #region Hubcap\r\n    const { vertexCount, positions, normals, colors } = makeHubcapBuffers(gl, 0.03);\r\n    try {\r\n      gl.useProgram(nonTexProgram);\r\n      gl.uniformMatrix4fv(nonTexUniforms.modelMatrix, false, modelMatrix);\r\n      gl.uniformMatrix4fv(nonTexUniforms.viewMatrix, false, viewMatrix);\r\n      gl.uniformMatrix4fv(nonTexUniforms.projectionMatrix, false, projectionMatrix);\r\n      bindAttribute(gl, nonTexAttribs.position, positions, 3, gl.FLOAT);\r\n      bindAttribute(gl, nonTexAttribs.normal, normals, 3, gl.FLOAT);\r\n      bindAttribute(gl, nonTexAttribs.color, colors, 3, gl.FLOAT);\r\n      try {\r\n        gl.drawArrays(gl.TRIANGLE_FAN, 0, vertexCount);\r\n      } finally {\r\n        unbindAttribute(gl, nonTexAttribs.position);\r\n        unbindAttribute(gl, nonTexAttribs.color);\r\n      }\r\n    } finally {\r\n      gl.deleteBuffer(colors);\r\n      gl.deleteBuffer(positions);\r\n    }\r\n    // #endregion\r\n\r\n  }, [theta, modelMatrix]);\r\n  // #endregion\r\n\r\n  // #region Event Handlers \r\n  const onPointerDown = ({ currentTarget, pointerId, clientX: x, clientY: y }: React.PointerEvent<HTMLCanvasElement>): void => {\r\n    currentTarget.setPointerCapture(pointerId);\r\n    setAnchor({ x, y });\r\n  };\r\n\r\n  const onPointerUp = ({ currentTarget, pointerId }: React.PointerEvent<HTMLCanvasElement>): void => {\r\n    setAnchor(null);\r\n    currentTarget.releasePointerCapture(pointerId);\r\n  };\r\n\r\n  const onPointerMove = ({ clientX: x, clientY: y }: React.PointerEvent<HTMLCanvasElement>): void => {\r\n    if (anchor) {\r\n      const dx = x - anchor.x;\r\n      const dy = y - anchor.y;\r\n      const distance = Math.sqrt(dx * dx + dy * dy);\r\n      if (distance > 0) {\r\n        const rot = mat4.fromRotation(mat4.create(), 0.01 * distance, [dy, dx, 0]);\r\n        setModelMatrix(mat4.mul(mat4.create(), rot, modelMatrix));\r\n        setAnchor({ x, y });\r\n      }\r\n    }\r\n  };\r\n  // #endregion\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <canvas\r\n          width=\"768px\"\r\n          height=\"768px\"\r\n          ref={canvas}\r\n          onPointerDown={onPointerDown}\r\n          onPointerMove={onPointerMove}\r\n          onPointerUp={onPointerUp}\r\n        />\r\n        <p>M&ouml;bius Clock</p>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction drawArrays(\r\n  gl: WebGLRenderingContext,\r\n  topology: Primitive[],\r\n  positionAttrib: number,\r\n  positionBuffer: WebGLBuffer,\r\n  normalAttrib: number,\r\n  normalBuffer: WebGLBuffer,\r\n  colorAttrib: number,\r\n  colorBuffer: WebGLBuffer,\r\n) {\r\n  bindAttribute(gl, positionAttrib, positionBuffer, 3, gl.FLOAT);\r\n  bindAttribute(gl, normalAttrib, normalBuffer, 3, gl.FLOAT);\r\n  bindAttribute(gl, colorAttrib, colorBuffer, 3, gl.FLOAT);\r\n  try {\r\n    for (const { mode, first, count } of topology) {\r\n      gl.drawArrays(mode, first, count);\r\n    }\r\n  } finally {\r\n    unbindAttribute(gl, colorAttrib);\r\n    unbindAttribute(gl, normalAttrib);\r\n    unbindAttribute(gl, positionAttrib);\r\n  }\r\n}\r\n\r\nfunction error<T>(message: string): T {\r\n  throw new Error(message);\r\n}\r\n\r\n//\r\n// Initialize a texture and load an image.\r\n// When the image finished loading copy it into the texture.\r\n//\r\nfunction loadTexture(gl: WebGLRenderingContext, which: number, url: string) {\r\n  const texture = gl.createTexture();\r\n\r\n  gl.activeTexture(which);\r\n  gl.bindTexture(gl.TEXTURE_2D, texture);\r\n\r\n  // Because images have to be downloaded over the internet\r\n  // they might take a moment until they are ready.\r\n  // Until then put a single pixel in the texture so we can\r\n  // use it immediately. When the image has finished downloading\r\n  // we'll update the texture with the contents of the image.\r\n  gl.texImage2D(\r\n    gl.TEXTURE_2D,\r\n    0, // level\r\n    gl.RGBA,\r\n    1, // width\r\n    1, // height\r\n    0, // border\r\n    gl.RGBA,\r\n    gl.UNSIGNED_BYTE,\r\n    new Uint8Array([255, 255, 255, 255]), // opaque white\r\n  );\r\n\r\n  const image = new Image();\r\n  image.onload = () => {\r\n    gl.activeTexture(which);\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\r\n\r\n    // WebGL1 has different requirements for power of 2 images\r\n    // vs non power of 2 images so check if the image is a\r\n    // power of 2 in both dimensions.\r\n    if (isPowerOf2(image.width) && isPowerOf2(image.height)) {\r\n      // Yes, it's a power of 2. Generate mips.\r\n      gl.generateMipmap(gl.TEXTURE_2D);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);\r\n    } else {\r\n      // No, it's not a power of 2. Turn off mips and set\r\n      // wrapping to clamp to edge.\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n    }\r\n  };\r\n  image.src = url;\r\n\r\n  return texture;\r\n}\r\n\r\nfunction isPowerOf2(value: number) {\r\n  return (value & (value - 1)) === 0;\r\n}\r\n\r\nfunction makeRimBuffers(gl: WebGLRenderingContext) {\r\n  const R = 1.2, h = 0.1;\r\n  const positions = [];\r\n  const normals = [];\r\n  const colors = [];\r\n  const topology: Primitive[] = [];\r\n  for (let t = 0; t < 2 * Math.PI + 0.001; t += Math.PI / 36) {\r\n    positions.push(R * Math.cos(t), R * Math.sin(t), +h);\r\n    normals.push(Math.cos(t), Math.sin(t), 0);\r\n    colors.push(1.0, 0.8, 0.5);\r\n    positions.push(R * Math.cos(t), R * Math.sin(t), -h);\r\n    normals.push(Math.cos(t), Math.sin(t), 0);\r\n    colors.push(1.0, 0.8, 0.5);\r\n  }\r\n  topology.push({ mode: gl.TRIANGLE_STRIP, first: 0, count: positions.length / 3 });\r\n  return {\r\n    topology,\r\n    positionBuffer: makeFloatBufferFromArray(gl, positions),\r\n    normalBuffer: makeFloatBufferFromArray(gl, normals),\r\n    colorBuffer: makeFloatBufferFromArray(gl, colors),\r\n  };\r\n}\r\n\r\nfunction makeDiscBuffers(gl: WebGLRenderingContext) {\r\n  const topology: Primitive[] = [];\r\n  const positions = [0, 0, 0];\r\n  const colors = [0.25, 0.25, 0.25];\r\n  const normals = [0, 0, 1];\r\n  const textureCoords = [0, 0];\r\n\r\n  const r = 1;\r\n  const dr = r / 6;\r\n\r\n  let first = 0, v = 1;\r\n  for (let t = 0; t < 2 * Math.PI + 0.001; t += Math.PI / 36, v++) {\r\n    const x = dr * Math.cos(t);\r\n    const y = dr * Math.sin(t);\r\n    positions.push(x, y, 0);\r\n    normals.push(0, 0, 1);\r\n    colors.push(colors[0], colors[1], colors[2]);\r\n    textureCoords.push(x / r, y / r);\r\n  }\r\n  topology.push({ mode: gl.TRIANGLE_FAN, first, count: v - first });\r\n  first = v;\r\n\r\n  for (let rr = dr; rr < r - 0.001; rr += dr) {\r\n    for (let t = 0; t < 2 * Math.PI + 0.001; t += Math.PI / 36, v += 2) {\r\n      const x0 = rr * Math.cos(t), y0 = rr * Math.sin(t);\r\n      positions.push(x0, y0, 0);\r\n      normals.push(0, 0, 1);\r\n      colors.push(colors[0], colors[1], colors[2]);\r\n      textureCoords.push(x0 / r, y0 / r);\r\n\r\n      const x1 = (rr + dr) * Math.cos(t), y1 = (rr + dr) * Math.sin(t);\r\n      positions.push(x1, y1, 0);\r\n      normals.push(0, 0, 1);\r\n      colors.push(colors[0], colors[1], colors[2]);\r\n      textureCoords.push(x1 / r, y1 / r);\r\n    }\r\n    topology.push({ mode: gl.TRIANGLE_STRIP, first, count: v - first });\r\n    first = v;\r\n  }\r\n\r\n  return {\r\n    topology,\r\n    positionBuffer: makeFloatBufferFromArray(gl, positions),\r\n    normalBuffer: makeFloatBufferFromArray(gl, normals),\r\n    colorBuffer: makeFloatBufferFromArray(gl, colors),\r\n    textureCoordBuffer: makeFloatBufferFromArray(gl, textureCoords),\r\n  };\r\n}\r\n\r\nfunction makeHubcapBuffers(gl: WebGLRenderingContext, height: number) {\r\n  const r = 0.05;\r\n  const h = 0.01;\r\n  const norm = Math.sqrt(r * r + h * h);\r\n  const nr = r / norm;\r\n  const nh = h / norm;\r\n  const positions = [0, 0, height + h];\r\n  const normals = [0, 0, 1];\r\n  for (let t = 0; t < 2 * Math.PI; t += Math.PI / 30) {\r\n    positions.push(r * Math.cos(t), r * Math.sin(t), height);\r\n    normals.push(nh * Math.cos(t), nh * Math.sin(t), nr);\r\n  }\r\n  const vertexCount = positions.length / 3;\r\n  return {\r\n    vertexCount,\r\n    positions: makeFloatBufferFromArray(gl, positions),\r\n    normals: makeFloatBufferFromArray(gl, normals),\r\n    colors: makeFloatBufferFromArray(gl, new Array(3 * vertexCount).fill(0.75)),\r\n  };\r\n}\r\n\r\nfunction makeHandBuffers(gl: WebGLRenderingContext, height: number, width: number, length: number) {\r\n  return {\r\n    vertexCount: 4,\r\n    positions: makeFloatBufferFromArray(gl, [\r\n      -width, -0.2 * length, height,\r\n      +width, -0.2 * length, height,\r\n      -width, length, height,\r\n      +width, length, height,\r\n    ]),\r\n    normals: makeFloatBufferFromArray(gl, [\r\n      0, 0, 1,\r\n      0, 0, 1,\r\n      0, 0, 1,\r\n      0, 0, 1,\r\n    ]),\r\n    colors: makeFloatBufferFromArray(gl, [\r\n      0.75, 0.75, 0.75,\r\n      0.75, 0.75, 0.75,\r\n      0.75, 0.75, 0.75,\r\n      0.75, 0.75, 0.75,\r\n    ]),\r\n  };\r\n}\r\n\r\nfunction makeStripBuffers(gl: WebGLRenderingContext, torsion: number, piece: number) {\r\n  const { positions, colors, textureCoords } = makeStrip(torsion, piece);\r\n  return {\r\n    vertexCount: positions.length / 3,\r\n    positions: makeFloatBufferFromArray(gl, positions),\r\n    colors: makeFloatBufferFromArray(gl, colors),\r\n    textureCoords: makeFloatBufferFromArray(gl, textureCoords),\r\n  };\r\n}\r\n\r\nfunction makeFloatBufferFromArray(gl: WebGLRenderingContext, array: number[]) {\r\n  const buffer = gl.createBuffer();\r\n  if (!buffer) {\r\n    throw new Error('Failed to create buffer.');\r\n  }\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(array), gl.STATIC_DRAW);\r\n  return buffer;\r\n}\r\n\r\nfunction makeStrip(theta: number, piece: number) {\r\n  const textureCoords: number[] = [];\r\n  const positions: number[] = [];\r\n  const colors: number[] = [];\r\n  const nTwists = 3;\r\n  const R = 1.0;\r\n  const h = 0.1;\r\n  for (let s = 0.0; s < 1.001; s += 0.033333) {\r\n    const t = (piece + s) * Math.PI;\r\n    const tt = nTwists * 0.5 * (t - theta);\r\n    // Position\r\n    const r1 = R + h * Math.cos(tt);\r\n    const r2 = R - h * Math.cos(tt);\r\n    positions.push(r1 * Math.sin(t), r1 * Math.cos(t), -h * Math.sin(tt));\r\n    positions.push(r2 * Math.sin(t), r2 * Math.cos(t), +h * Math.sin(tt));\r\n    // Color\r\n    const color = [0, 0, 0];\r\n    for (let k = 0; k < 3; k++) {\r\n      color[k] = (1 - s) * COLORS[piece][k] + s * COLORS[(piece + 1) % COLORS.length][k];\r\n    }\r\n    colors.push(...color, ...color);\r\n    // Texture Coordinates\r\n    textureCoords.push(s, 0, s, 1);\r\n  }\r\n  return { positions, colors, textureCoords };\r\n}\r\n\r\nfunction bindAttribute(gl: WebGLRenderingContext, attrib: number, buffer: WebGLBuffer, size: number, type: number) {\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n  gl.vertexAttribPointer(attrib, size, type, false, 0, 0);\r\n  gl.enableVertexAttribArray(attrib);\r\n}\r\n\r\nfunction unbindAttribute(gl: WebGLRenderingContext, attrib: number) {\r\n  gl.disableVertexAttribArray(attrib);\r\n}\r\n\r\nfunction makeProgramWithoutTextureMapping(gl: WebGLRenderingContext) {\r\n  const U_MODEL_MATRIX = 'uModelMatrix';\r\n  const U_VIEW_MATRIX = 'uViewMatrix';\r\n  const U_PROJECTION_MATRIX = 'uProjectionMatrix';\r\n  const A_POSITION = 'aPosition';\r\n  const A_NORMAL = 'aNormal';\r\n  const A_COLOR = 'aColor';\r\n  const V_COLOR = 'vColor';\r\n  const V_LIGHTING = 'vLighting';\r\n\r\n  const vsSource = glsl`\r\n    // Uniforms\r\n    uniform mat4 ${U_MODEL_MATRIX};\r\n    uniform mat4 ${U_VIEW_MATRIX};\r\n    uniform mat4 ${U_PROJECTION_MATRIX};\r\n    // Attributes\r\n    attribute vec4 ${A_POSITION};\r\n    attribute vec3 ${A_NORMAL};\r\n    attribute vec4 ${A_COLOR};\r\n    // Varyings\r\n    varying lowp vec4 ${V_COLOR};\r\n    varying lowp vec3 ${V_LIGHTING};\r\n    // Program\r\n    void main(void) {\r\n      // Apply lighting\r\n      highp vec3 ambientLightColor = vec3(0.3, 0.3, 0.3);\r\n      highp vec3 directionalLightColor = vec3(1, 1, 1);\r\n      highp vec3 directionalLightVector = normalize(vec3(0.85, 0.8, 0.75));\r\n      highp vec4 transformedNormal = ${U_VIEW_MATRIX} * ${U_MODEL_MATRIX} * vec4(${A_NORMAL}, 0);\r\n      highp float directionalLightIntensity = max(0.0, dot(directionalLightVector, transformedNormal.xyz));\r\n      ${V_LIGHTING} = ambientLightColor + directionalLightIntensity * directionalLightColor;\r\n      ${V_COLOR} = ${A_COLOR};\r\n      gl_Position = ${U_PROJECTION_MATRIX} * ${U_VIEW_MATRIX} * ${U_MODEL_MATRIX} * ${A_POSITION};\r\n    }\r\n  `;\r\n\r\n  const fsSource = glsl`\r\n    // Varyings\r\n    varying lowp vec4 ${V_COLOR};\r\n    varying lowp vec3 ${V_LIGHTING};\r\n    // Program\r\n    void main(void) {\r\n      gl_FragColor = ${V_COLOR} * vec4(${V_LIGHTING}, 1.0);\r\n    }\r\n  `;\r\n\r\n  const program = buildProgram(gl, vsSource, fsSource);\r\n\r\n  return {\r\n    program,\r\n    attribs: {\r\n      position: gl.getAttribLocation(program, A_POSITION),\r\n      normal: gl.getAttribLocation(program, A_NORMAL),\r\n      color: gl.getAttribLocation(program, A_COLOR),\r\n    },\r\n    uniforms: {\r\n      modelMatrix: getUniformLocation(gl, program, U_MODEL_MATRIX),\r\n      viewMatrix: getUniformLocation(gl, program, U_VIEW_MATRIX),\r\n      projectionMatrix: getUniformLocation(gl, program, U_PROJECTION_MATRIX),\r\n    },\r\n  };\r\n}\r\n\r\nfunction makeProgramWithTextureMapping(gl: WebGLRenderingContext) {\r\n  const U_MODEL_MATRIX = 'uModelMatrix';\r\n  const U_VIEW_MATRIX = 'uViewMatrix';\r\n  const U_PROJECTION_MATRIX = 'uProjectionMatrix';\r\n  const U_SAMPLER = 'uSampler';\r\n  const A_POSITION = 'aPosition';\r\n  const A_COLOR = 'aColor';\r\n  const A_TEXTURE_COORDS = 'aTextureCoords';\r\n  const V_COLOR = 'vColor';\r\n  const V_TEXTURE_COORDS = 'vTextureCoords';\r\n\r\n  const vsSource = glsl`\r\n    // Attributes\r\n    attribute vec4 ${A_POSITION};\r\n    attribute vec4 ${A_COLOR};\r\n    attribute vec2 ${A_TEXTURE_COORDS};\r\n    // Uniforms\r\n    uniform mat4 ${U_MODEL_MATRIX};\r\n    uniform mat4 ${U_VIEW_MATRIX};\r\n    uniform mat4 ${U_PROJECTION_MATRIX};\r\n    // Varyings\r\n    varying lowp vec4 ${V_COLOR};\r\n    varying highp vec2 ${V_TEXTURE_COORDS};\r\n    // Program\r\n    void main(void) {\r\n      gl_Position = ${U_PROJECTION_MATRIX} * ${U_VIEW_MATRIX} * ${U_MODEL_MATRIX} * ${A_POSITION};\r\n      ${V_COLOR} = ${A_COLOR};\r\n      ${V_TEXTURE_COORDS} = ${A_TEXTURE_COORDS};\r\n    }\r\n  `;\r\n\r\n  const fsSource = glsl`\r\n    // Varyings\r\n    varying lowp vec4 ${V_COLOR};\r\n    varying highp vec2 ${V_TEXTURE_COORDS};\r\n    // Uniforms\r\n    uniform sampler2D ${U_SAMPLER};\r\n    // Program\r\n    void main(void) {\r\n      gl_FragColor = ${V_COLOR} * texture2D(${U_SAMPLER}, ${V_TEXTURE_COORDS});\r\n    }\r\n  `;\r\n\r\n  const program = buildProgram(gl, vsSource, fsSource);\r\n\r\n  return {\r\n    program,\r\n    attribs: {\r\n      position: gl.getAttribLocation(program, A_POSITION),\r\n      color: gl.getAttribLocation(program, A_COLOR),\r\n      textureCoords: gl.getAttribLocation(program, A_TEXTURE_COORDS),\r\n    },\r\n    uniforms: {\r\n      sampler: getUniformLocation(gl, program, U_SAMPLER),\r\n      modelMatrix: getUniformLocation(gl, program, U_MODEL_MATRIX),\r\n      viewMatrix: getUniformLocation(gl, program, U_VIEW_MATRIX),\r\n      projectionMatrix: getUniformLocation(gl, program, U_PROJECTION_MATRIX),\r\n    },\r\n  };\r\n}\r\n\r\nfunction buildProgram(gl: WebGLRenderingContext, vsSource: string, fsSource: string) {\r\n  const program = gl.createProgram();\r\n\r\n  if (!program) {\r\n    throw new Error('Failed to create program.');\r\n  }\r\n\r\n  gl.attachShader(program, buildShader(gl, gl.VERTEX_SHADER, vsSource));\r\n  gl.attachShader(program, buildShader(gl, gl.FRAGMENT_SHADER, fsSource));\r\n  gl.linkProgram(program);\r\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n    const message = `Unable to initialize the shader program: ${gl.getProgramInfoLog(program)}`;\r\n    gl.deleteProgram(program);\r\n    throw new Error(message);\r\n  }\r\n\r\n  return program;\r\n}\r\n\r\nfunction buildShader(gl: WebGLRenderingContext, type: number, source: string) {\r\n  const shader = gl.createShader(type);\r\n  if (!shader) {\r\n    throw new Error('Failed to create shader.');\r\n  }\r\n  gl.shaderSource(shader, source);\r\n  gl.compileShader(shader);\r\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n    const message = `An error occurred compiling the shaders: ${gl.getShaderInfoLog(shader)}`;\r\n    gl.deleteShader(shader);\r\n    throw new Error(message);\r\n  }\r\n  return shader;\r\n}\r\n\r\nfunction getUniformLocation(gl: WebGLRenderingContext, program: WebGLProgram, name: string): WebGLUniformLocation {\r\n  return gl.getUniformLocation(program, name) || error(`No uniform named \"${name}\" was found.`);\r\n}\r\n\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport './index.scss'\r\n\r\n// You need bootstrap? $ yarn add bootstrap\r\n// See: https://create-react-app.dev/docs/adding-bootstrap\r\n// import 'bootstrap/dist/css/bootstrap.css';\r\n\r\n// Single-page application (SPA)\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want to Pre-render with react-snap\r\n// Step 1: install $ yarn add --dev react-snap\r\n// Step 2: add to package.json run script: \"postbuild\": \"react-snap\"\r\n// Step 3: Add to package.json: \"reactSnap\":{\"inlineCss\":true}\r\n// Step 3: replace to the script below.\r\n\r\n/*\r\nimport { hydrate, render } from 'react-dom'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nconst rootElement = document.getElementById('root')\r\nif (rootElement && rootElement!.hasChildNodes()) {\r\n  hydrate(<AppRouter />, rootElement)\r\n\r\n  // Precache - set to 'register' once you Pre-render\r\n  // If you want your app to work offline and load faster, you can change\r\n  // unregister() to register() below. Note this comes with some pitfalls.\r\n  // Learn more about service workers: http://bit.ly/CRA-PWA\r\n  serviceWorker.register()\r\n} else {\r\n  render(<AppRouter />, rootElement)\r\n}\r\n*/\r\n"],"sourceRoot":""}