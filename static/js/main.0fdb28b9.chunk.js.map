{"version":3,"sources":["App.tsx","index.tsx"],"names":["glsl","String","raw","GOLD","SILVER","TITANIUM","STRIP_COLORS","H","STEP","Math","PI","App","useState","theta","setTheta","anchor","setAnchor","mat4","create","modelMatrix","setModelMatrix","programWithTextureMapping","useRef","programWithoutTextureMapping","canvas","useEffect","gl","current","getContext","Error","vsSource","fsSource","program","buildProgram","attribs","position","getAttribLocation","color","textureCoords","uniforms","sampler","getUniformLocation","viewMatrix","projectionMatrix","makeProgramWithTextureMapping","normal","normalMatrix","makeProgramWithoutTextureMapping","TEXTURE0","TEXTURE1","TEXTURE2","TEXTURE3","which","loadTexture","process","enable","DEPTH_TEST","depthFunc","LEQUAL","clearDepth","clearColor","CULL_FACE","cullFace","BACK","afid","requestAnimationFrame","f","time","cancelAnimationFrame","texProgram","texAttribs","texUniforms","nonTexProgram","nonTexAttribs","nonTexUniforms","perspective","width","height","fromTranslation","uniformMatrix4fv","drawWithoutTexture","makeBuffers","topology","positionBuffer","normalBuffer","colorBuffer","useProgram","positionAttrib","normalAttrib","colorAttrib","bindAttribute","FLOAT","mode","first","count","drawArrays","unbindAttribute","deleteBuffer","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","FRONT","scale","makeRimBuffers","m","translate","makeDiscBuffers","vertexCounts","positionBuffers","colorBuffers","textureCoordBuffers","i","makeStripBuffers","vertexCount","positions","colors","uniform1i","TRIANGLE_STRIP","forEach","buffer","drawHand","length","angle","makeFloatBufferFromArray","normals","makeHandBuffers","rotateZ","r","h","norm","sqrt","nr","nh","t","push","cos","sin","makeHubcapBuffers","TRIANGLE_FAN","copy","rotateX","makeFrisbeeBuffers","className","ref","onPointerDown","currentTarget","pointerId","x","clientX","y","clientY","setPointerCapture","onPointerMove","dx","dy","distance","rot","fromRotation","mul","onPointerUp","releasePointerCapture","url","texture","createTexture","activeTexture","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","Uint8Array","image","Image","onload","isPowerOf2","generateMipmap","texParameteri","TEXTURE_MAG_FILTER","LINEAR","TEXTURE_MIN_FILTER","LINEAR_MIPMAP_LINEAR","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","src","value","v","z","r0","r1","z0","z1","x0","x1","y0","y1","textureCoordBuffer","torsion","piece","s","tt","nTwists","r2","k","makeStrip","array","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","attrib","size","type","vertexAttribPointer","enableVertexAttribArray","disableVertexAttribArray","createProgram","attachShader","buildShader","VERTEX_SHADER","FRAGMENT_SHADER","linkProgram","getProgramParameter","LINK_STATUS","message","getProgramInfoLog","deleteProgram","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","name","error","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0fdb28b9.chunk.js","sourcesContent":["/* eslint-disable one-var */\r\n/* eslint-disable no-bitwise */\r\n\r\nimport { mat4 } from 'gl-matrix';\r\nimport React, { MutableRefObject, useEffect, useRef, useState } from 'react';\r\nimport './App.scss';\r\n\r\ninterface ProgramInfo {\r\n  program: WebGLProgram;\r\n  attribs: {\r\n    color: number;\r\n    position: number;\r\n  };\r\n  uniforms: {\r\n    modelMatrix: WebGLUniformLocation;\r\n    viewMatrix: WebGLUniformLocation;\r\n    projectionMatrix: WebGLUniformLocation;\r\n  };\r\n}\r\n\r\ntype NonTextureMappingProgramInfo = ProgramInfo & {\r\n  attribs: {\r\n    normal: number;\r\n  };\r\n  uniforms: {\r\n    normalMatrix: WebGLUniformLocation;\r\n  };\r\n};\r\n\r\ntype TextureMappingProgramInfo = ProgramInfo & {\r\n  attribs: {\r\n    textureCoords: number;\r\n  };\r\n  uniforms: {\r\n    sampler: WebGLSampler;\r\n  };\r\n};\r\n\r\ntype Primitive = {\r\n  mode: number;\r\n  first: number;\r\n  count: number;\r\n};\r\n\r\nconst glsl = String.raw;\r\n\r\n// const BLACK = [0, 0, 0];\r\nconst BLUE = [0, 0, 1];\r\nconst GREEN = [0, 1, 0];\r\nconst YELLOW = [1, 1, 0];\r\nconst RED = [1, 0, 0];\r\nconst GOLD = [1.0, 0.8, 0.5];\r\nconst SILVER = [0.75, 0.75, 0.75];\r\nconst TITANIUM = [0.125, 0.125, 0.125];\r\n\r\nconst STRIP_COLORS = [BLUE, GREEN, YELLOW, RED];\r\n\r\nconst R = 1.0, H = 0.1;\r\nconst STEP = Math.PI / 36;\r\nconst EPSILON = 0.001;\r\n\r\nexport default function App() {\r\n\r\n  const [theta, setTheta] = useState(0); // The angle of the hour hand, in radians.\r\n  const [anchor, setAnchor] = useState<{ x: number, y: number; } | null>();\r\n  const [modelMatrix, setModelMatrix] = useState(mat4.create());\r\n\r\n  const programWithTextureMapping: MutableRefObject<TextureMappingProgramInfo | null> = useRef(null);\r\n  const programWithoutTextureMapping: MutableRefObject<NonTextureMappingProgramInfo | null> = useRef(null);\r\n\r\n  const canvas = useRef<HTMLCanvasElement>(null);\r\n\r\n  // #region Initialize WebGL stuff and start the animation.\r\n  useEffect(() => {\r\n\r\n    const gl = canvas.current?.getContext('webgl');\r\n\r\n    if (!gl) {\r\n      throw new Error('Failed to get a WebGL context.');\r\n    }\r\n\r\n    programWithTextureMapping.current = makeProgramWithTextureMapping(gl);\r\n    programWithoutTextureMapping.current = makeProgramWithoutTextureMapping(gl);\r\n\r\n    for (const which of [gl.TEXTURE0, gl.TEXTURE1, gl.TEXTURE2, gl.TEXTURE3]) {\r\n      loadTexture(gl, which, `${process.env.PUBLIC_URL}/texture/hours${which - gl.TEXTURE0}.bmp`);\r\n    }\r\n\r\n    gl.enable(gl.DEPTH_TEST);\r\n    gl.depthFunc(gl.LEQUAL);\r\n    gl.clearDepth(1);\r\n    gl.clearColor(0, 0, 0, 1);\r\n    gl.enable(gl.CULL_FACE);\r\n    gl.cullFace(gl.BACK);\r\n\r\n    let afid = requestAnimationFrame(function f(time) {\r\n      setTheta(time / 12000 * Math.PI);\r\n      // const now = new Date();\r\n      // setTheta(((now.getSeconds() / 60 + now.getMinutes()) / 60 + now.getHours()) / 6 * Math.PI);\r\n      afid = requestAnimationFrame(f);\r\n    });\r\n\r\n    return () => {\r\n      cancelAnimationFrame(afid);\r\n    };\r\n\r\n  }, []);\r\n  // #endregion\r\n\r\n  // #region Render one frame.\r\n  useEffect(() => {\r\n\r\n    const gl = canvas.current?.getContext('webgl');\r\n\r\n    if (!gl) {\r\n      throw new Error('Failed to get a WebGL context.');\r\n    }\r\n\r\n    if (!programWithTextureMapping.current || !programWithoutTextureMapping.current) {\r\n      throw new Error('Missing shader program!');\r\n    }\r\n\r\n    const { program: texProgram, attribs: texAttribs, uniforms: texUniforms } = programWithTextureMapping.current;\r\n    const { program: nonTexProgram, attribs: nonTexAttribs, uniforms: nonTexUniforms } = programWithoutTextureMapping.current;\r\n\r\n    const projectionMatrix = mat4.perspective(mat4.create(), Math.PI / 5, gl.canvas.width / gl.canvas.height, 0.1, 100);\r\n    const viewMatrix = mat4.fromTranslation(mat4.create(), [0, 0, -4]);\r\n\r\n    gl.uniformMatrix4fv(nonTexUniforms.projectionMatrix, false, projectionMatrix);\r\n    gl.uniformMatrix4fv(nonTexUniforms.viewMatrix, false, viewMatrix);\r\n\r\n    const drawWithoutTexture = function (\r\n      makeBuffers: (gl: WebGLRenderingContext) => { topology: Primitive[]; positionBuffer: WebGLBuffer; normalBuffer: WebGLBuffer; colorBuffer: WebGLBuffer; }) {\r\n      const { topology, positionBuffer, normalBuffer, colorBuffer } = makeBuffers(gl);\r\n      try {\r\n        gl.useProgram(nonTexProgram);\r\n        drawArrays(gl, topology, nonTexAttribs.position, positionBuffer, nonTexAttribs.normal, normalBuffer, nonTexAttribs.color, colorBuffer);\r\n      } finally {\r\n        gl.deleteBuffer(colorBuffer);\r\n        gl.deleteBuffer(normalBuffer);\r\n        gl.deleteBuffer(positionBuffer);\r\n      }\r\n    };\r\n\r\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n    gl.cullFace(gl.FRONT);\r\n\r\n    // #region Inside of Rim\r\n    gl.uniformMatrix4fv(nonTexUniforms.modelMatrix, false, mat4.scale(mat4.create(), modelMatrix, [1.2, 1.2, 1]));\r\n    gl.uniformMatrix4fv(nonTexUniforms.normalMatrix, false, mat4.scale(mat4.create(), modelMatrix, [1 / 1.2, 1 / 1.2, 1]));\r\n    drawWithoutTexture(makeRimBuffers);\r\n    // #endregion\r\n\r\n    gl.cullFace(gl.BACK);\r\n\r\n    // #region Clock Face\r\n    {\r\n      const m = mat4.translate(mat4.create(), modelMatrix, [0, 0, -H]);\r\n      gl.uniformMatrix4fv(nonTexUniforms.modelMatrix, false, mat4.scale(mat4.create(), m, [1.199, 1.199, 1]));\r\n      gl.uniformMatrix4fv(nonTexUniforms.normalMatrix, false, mat4.scale(mat4.create(), m, [1 / 1.2, 1 / 1.2, 1]));\r\n      drawWithoutTexture(makeDiscBuffers);\r\n    }\r\n    // #endregion\r\n\r\n    // #region Hours Strip\r\n    const vertexCounts: number[] = [];\r\n    const positionBuffers: WebGLBuffer[] = [];\r\n    const colorBuffers: WebGLBuffer[] = [];\r\n    const textureCoordBuffers: WebGLBuffer[] = [];\r\n\r\n    for (let i = 0; i < 4; i++) (\r\n      {\r\n        vertexCount: vertexCounts[i],\r\n        positions: positionBuffers[i],\r\n        colors: colorBuffers[i],\r\n        textureCoords: textureCoordBuffers[i],\r\n      } = makeStripBuffers(gl, theta, i)\r\n    );\r\n\r\n    try {\r\n      gl.useProgram(texProgram);\r\n      gl.uniformMatrix4fv(texUniforms.modelMatrix, false, modelMatrix);\r\n      gl.uniformMatrix4fv(texUniforms.viewMatrix, false, viewMatrix);\r\n      gl.uniformMatrix4fv(texUniforms.projectionMatrix, false, projectionMatrix);\r\n      for (let i = 0; i < 4; i++) {\r\n        gl.uniform1i(texUniforms.sampler, i);\r\n        bindAttribute(gl, texAttribs.position, positionBuffers[i], 3, gl.FLOAT);\r\n        bindAttribute(gl, texAttribs.color, colorBuffers[i], 3, gl.FLOAT);\r\n        bindAttribute(gl, texAttribs.textureCoords, textureCoordBuffers[i], 2, gl.FLOAT);\r\n        try {\r\n          gl.cullFace(gl.BACK);\r\n          gl.drawArrays(gl.TRIANGLE_STRIP, 0, vertexCounts[i]);\r\n        } finally {\r\n          unbindAttribute(gl, texAttribs.textureCoords);\r\n          unbindAttribute(gl, texAttribs.color);\r\n          unbindAttribute(gl, texAttribs.position);\r\n        }\r\n      }\r\n    } finally {\r\n      [...positionBuffers, ...colorBuffers, ...textureCoordBuffers].forEach((buffer) => gl.deleteBuffer(buffer));\r\n    }\r\n    // #endregion\r\n\r\n    // #region Hands\r\n    const drawHand = function (height: number, width: number, length: number, angle: number) {\r\n      const { vertexCount, positions, normals, colors } = makeHandBuffers(gl, height, width, length);\r\n      try {\r\n        gl.useProgram(nonTexProgram);\r\n        const m = mat4.rotateZ(mat4.create(), modelMatrix, -angle);\r\n        gl.uniformMatrix4fv(nonTexUniforms.modelMatrix, false, m);\r\n        gl.uniformMatrix4fv(nonTexUniforms.normalMatrix, false, m);\r\n        bindAttribute(gl, nonTexAttribs.position, positions, 3, gl.FLOAT);\r\n        bindAttribute(gl, nonTexAttribs.normal, normals, 3, gl.FLOAT);\r\n        bindAttribute(gl, nonTexAttribs.color, colors, 3, gl.FLOAT);\r\n        try {\r\n          gl.drawArrays(gl.TRIANGLE_STRIP, 0, vertexCount);\r\n        } finally {\r\n          unbindAttribute(gl, nonTexAttribs.color);\r\n          unbindAttribute(gl, nonTexAttribs.normal);\r\n          unbindAttribute(gl, nonTexAttribs.position);\r\n        }\r\n      } finally {\r\n        gl.deleteBuffer(colors);\r\n        gl.deleteBuffer(normals);\r\n        gl.deleteBuffer(positions);\r\n      }\r\n    };\r\n\r\n    drawHand(0.01, 0.02, 0.6, theta); // Hours\r\n    drawHand(0.02, 0.02, 0.8, 12 * theta); // Minutes\r\n    // #endregion\r\n\r\n    // #region Hubcap\r\n    const { vertexCount, positions, normals, colors } = makeHubcapBuffers(gl, 0.03);\r\n    try {\r\n      gl.useProgram(nonTexProgram);\r\n      gl.uniformMatrix4fv(nonTexUniforms.modelMatrix, false, modelMatrix);\r\n      gl.uniformMatrix4fv(nonTexUniforms.normalMatrix, false, modelMatrix);\r\n      bindAttribute(gl, nonTexAttribs.position, positions, 3, gl.FLOAT);\r\n      bindAttribute(gl, nonTexAttribs.normal, normals, 3, gl.FLOAT);\r\n      bindAttribute(gl, nonTexAttribs.color, colors, 3, gl.FLOAT);\r\n      try {\r\n        gl.drawArrays(gl.TRIANGLE_FAN, 0, vertexCount);\r\n      } finally {\r\n        unbindAttribute(gl, nonTexAttribs.position);\r\n        unbindAttribute(gl, nonTexAttribs.color);\r\n      }\r\n    } finally {\r\n      gl.deleteBuffer(colors);\r\n      gl.deleteBuffer(positions);\r\n    }\r\n    // #endregion\r\n\r\n    // #region Back of Case\r\n    const m = mat4.copy(mat4.create(), modelMatrix);\r\n    mat4.translate(m, m, [0, 0, -H]);\r\n    mat4.rotateX(m, m, Math.PI);\r\n    gl.uniformMatrix4fv(nonTexUniforms.modelMatrix, false, mat4.scale(mat4.create(), m, [1.2, 1.2, 0.24]));\r\n    gl.uniformMatrix4fv(nonTexUniforms.normalMatrix, false, mat4.scale(mat4.create(), m, [1 / 1.2, 1 / 1.2, 1 / 0.24]));\r\n    drawWithoutTexture(makeFrisbeeBuffers);\r\n    gl.uniformMatrix4fv(nonTexUniforms.modelMatrix, false, mat4.scale(mat4.create(), modelMatrix, [1.2, 1.2, 1]));\r\n    gl.uniformMatrix4fv(nonTexUniforms.normalMatrix, false, mat4.scale(mat4.create(), modelMatrix, [1 / 1.2, 1 / 1.2, 1]));\r\n    drawWithoutTexture(makeRimBuffers);\r\n    // #endregion\r\n\r\n  }, [theta, modelMatrix]);\r\n  // #endregion\r\n\r\n  // #region Event Handlers \r\n  const onPointerDown = ({ currentTarget, pointerId, clientX: x, clientY: y }: React.PointerEvent<HTMLCanvasElement>): void => {\r\n    currentTarget.setPointerCapture(pointerId);\r\n    setAnchor({ x, y });\r\n  };\r\n\r\n  const onPointerUp = ({ currentTarget, pointerId }: React.PointerEvent<HTMLCanvasElement>): void => {\r\n    setAnchor(null);\r\n    currentTarget.releasePointerCapture(pointerId);\r\n  };\r\n\r\n  const onPointerMove = ({ clientX: x, clientY: y }: React.PointerEvent<HTMLCanvasElement>): void => {\r\n    if (anchor) {\r\n      const dx = x - anchor.x;\r\n      const dy = y - anchor.y;\r\n      const distance = Math.sqrt(dx * dx + dy * dy);\r\n      if (distance > 0) {\r\n        const rot = mat4.fromRotation(mat4.create(), 0.01 * distance, [dy, dx, 0]);\r\n        setModelMatrix(mat4.mul(mat4.create(), rot, modelMatrix));\r\n        setAnchor({ x, y });\r\n      }\r\n    }\r\n  };\r\n  // #endregion\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <canvas\r\n          width=\"768px\"\r\n          height=\"768px\"\r\n          ref={canvas}\r\n          onPointerDown={onPointerDown}\r\n          onPointerMove={onPointerMove}\r\n          onPointerUp={onPointerUp}\r\n        />\r\n        <p>M&ouml;bius Clock</p>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction loadTexture(gl: WebGLRenderingContext, which: number, url: string) {\r\n  const texture = gl.createTexture();\r\n\r\n  // Because images have to be downloaded over the internet\r\n  // they might take a moment until they are ready.\r\n  // Until then put a single pixel in the texture so we can\r\n  // use it immediately. When the image has finished downloading\r\n  // we'll update the texture with the contents of the image.\r\n  gl.activeTexture(which);\r\n  gl.bindTexture(gl.TEXTURE_2D, texture);\r\n  gl.texImage2D(\r\n    gl.TEXTURE_2D,\r\n    0, // level\r\n    gl.RGBA,\r\n    1, // width\r\n    1, // height\r\n    0, // border\r\n    gl.RGBA,\r\n    gl.UNSIGNED_BYTE,\r\n    new Uint8Array([255, 255, 255, 255]), // opaque white\r\n  );\r\n\r\n  const image = new Image();\r\n  image.onload = () => {\r\n    gl.activeTexture(which);\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\r\n\r\n    // WebGL1 has different requirements for power of 2 images\r\n    // vs non power of 2 images so check if the image is a\r\n    // power of 2 in both dimensions.\r\n    if (isPowerOf2(image.width) && isPowerOf2(image.height)) {\r\n      // Yes, it's a power of 2. Generate mips.\r\n      gl.generateMipmap(gl.TEXTURE_2D);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);\r\n    } else {\r\n      // No, it's not a power of 2. Turn off mips and set\r\n      // wrapping to clamp to edge.\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n    }\r\n  };\r\n  image.src = url;\r\n\r\n  return texture;\r\n}\r\n\r\nfunction isPowerOf2(value: number) {\r\n  return (value & (value - 1)) === 0;\r\n}\r\n\r\nfunction makeFrisbeeBuffers(gl: WebGLRenderingContext) {\r\n  const topology: Primitive[] = [];\r\n  const positions = [0, 0, R];\r\n  const normals = [0, 0, 1];\r\n  const colors = [...GOLD];\r\n\r\n  let first = 0, v = 1;\r\n\r\n  const r = R * Math.sin(STEP);\r\n  const z = R * Math.cos(STEP);\r\n\r\n  for (let f = -Math.PI; f < Math.PI + EPSILON; f += STEP, v++) {\r\n    const x = r * Math.cos(f), y = r * Math.sin(f);\r\n\r\n    positions.push(x, y, z);\r\n    normals.push(x, y, z);\r\n    colors.push(...GOLD);\r\n  }\r\n\r\n  topology.push({ mode: gl.TRIANGLE_FAN, first, count: v - first });\r\n  first = v;\r\n\r\n  for (let t = STEP; t < 0.5 * Math.PI - EPSILON; t += STEP) {\r\n    const r0 = R * Math.sin(t), r1 = R * Math.sin(t + STEP);\r\n    const z0 = R * Math.cos(t), z1 = R * Math.cos(t + STEP);\r\n\r\n    for (let f = -Math.PI; f < Math.PI + EPSILON; f += STEP, v += 2) {\r\n      const x0 = r0 * Math.cos(f), x1 = r1 * Math.cos(f);\r\n      const y0 = r0 * Math.sin(f), y1 = r1 * Math.sin(f);\r\n\r\n      positions.push(x0, y0, z0);\r\n      normals.push(x0, y0, z0);\r\n      colors.push(...GOLD);\r\n\r\n      positions.push(x1, y1, z1);\r\n      normals.push(x1, y1, z1);\r\n      colors.push(...GOLD);\r\n    }\r\n\r\n    topology.push({ mode: gl.TRIANGLE_STRIP, first, count: v - first });\r\n    first = v;\r\n  }\r\n\r\n  return {\r\n    topology,\r\n    positionBuffer: makeFloatBufferFromArray(gl, positions),\r\n    normalBuffer: makeFloatBufferFromArray(gl, normals),\r\n    colorBuffer: makeFloatBufferFromArray(gl, colors),\r\n  };\r\n}\r\n\r\nfunction makeRimBuffers(gl: WebGLRenderingContext) {\r\n  const topology: Primitive[] = [];\r\n  const positions = [];\r\n  const normals = [];\r\n  const colors = [];\r\n  for (let t = 0; t < 2 * Math.PI + EPSILON; t += STEP) {\r\n    positions.push(R * Math.cos(t), R * Math.sin(t), +H);\r\n    normals.push(Math.cos(t), Math.sin(t), 0);\r\n    colors.push(...GOLD);\r\n    positions.push(R * Math.cos(t), R * Math.sin(t), -H);\r\n    normals.push(Math.cos(t), Math.sin(t), 0);\r\n    colors.push(...GOLD);\r\n  }\r\n  topology.push({ mode: gl.TRIANGLE_STRIP, first: 0, count: positions.length / 3 });\r\n  return {\r\n    topology,\r\n    positionBuffer: makeFloatBufferFromArray(gl, positions),\r\n    normalBuffer: makeFloatBufferFromArray(gl, normals),\r\n    colorBuffer: makeFloatBufferFromArray(gl, colors),\r\n  };\r\n}\r\n\r\nfunction makeDiscBuffers(gl: WebGLRenderingContext) {\r\n  const topology: Primitive[] = [];\r\n  const positions = [0, 0, 0];\r\n  const colors = [...TITANIUM];\r\n  const normals = [0, 0, 1];\r\n  const textureCoords = [0, 0];\r\n\r\n  let first = 0, v = 1;\r\n  for (let t = 0; t < 2 * Math.PI + 0.001; t += Math.PI / 36, v++) {\r\n    const x = R * Math.cos(t);\r\n    const y = R * Math.sin(t);\r\n    positions.push(x, y, 0);\r\n    normals.push(0, 0, 1);\r\n    colors.push(...TITANIUM);\r\n    textureCoords.push(x / R, y / R);\r\n  }\r\n  topology.push({ mode: gl.TRIANGLE_FAN, first, count: v - first });\r\n  first = v;\r\n\r\n  return {\r\n    topology,\r\n    positionBuffer: makeFloatBufferFromArray(gl, positions),\r\n    normalBuffer: makeFloatBufferFromArray(gl, normals),\r\n    colorBuffer: makeFloatBufferFromArray(gl, colors),\r\n    textureCoordBuffer: makeFloatBufferFromArray(gl, textureCoords),\r\n  };\r\n}\r\n\r\nfunction makeHubcapBuffers(gl: WebGLRenderingContext, height: number) {\r\n  const r = 0.05;\r\n  const h = 0.01;\r\n  const norm = Math.sqrt(r * r + h * h);\r\n  const nr = r / norm;\r\n  const nh = h / norm;\r\n  const positions = [0, 0, height + h];\r\n  const normals = [0, 0, 1];\r\n  const colors = [...SILVER];\r\n  for (let t = 0; t < 2 * Math.PI; t += Math.PI / 30) {\r\n    positions.push(r * Math.cos(t), r * Math.sin(t), height);\r\n    normals.push(nh * Math.cos(t), nh * Math.sin(t), nr);\r\n    colors.push(...SILVER);\r\n  }\r\n  const vertexCount = positions.length / 3;\r\n  return {\r\n    vertexCount,\r\n    positions: makeFloatBufferFromArray(gl, positions),\r\n    normals: makeFloatBufferFromArray(gl, normals),\r\n    colors: makeFloatBufferFromArray(gl, colors),\r\n  };\r\n}\r\n\r\nfunction makeHandBuffers(gl: WebGLRenderingContext, height: number, width: number, length: number) {\r\n  return {\r\n    vertexCount: 4,\r\n    positions: makeFloatBufferFromArray(gl, [\r\n      -width, -0.2 * length, height,\r\n      +width, -0.2 * length, height,\r\n      -width, length, height,\r\n      +width, length, height,\r\n    ]),\r\n    normals: makeFloatBufferFromArray(gl, [\r\n      0, 0, 1,\r\n      0, 0, 1,\r\n      0, 0, 1,\r\n      0, 0, 1,\r\n    ]),\r\n    colors: makeFloatBufferFromArray(gl, [\r\n      ...SILVER,\r\n      ...SILVER,\r\n      ...SILVER,\r\n      ...SILVER,\r\n    ]),\r\n  };\r\n}\r\n\r\nfunction makeStripBuffers(gl: WebGLRenderingContext, torsion: number, piece: number) {\r\n  const { positions, colors, textureCoords } = makeStrip(torsion, piece);\r\n  return {\r\n    vertexCount: positions.length / 3,\r\n    positions: makeFloatBufferFromArray(gl, positions),\r\n    colors: makeFloatBufferFromArray(gl, colors),\r\n    textureCoords: makeFloatBufferFromArray(gl, textureCoords),\r\n  };\r\n}\r\n\r\nfunction makeStrip(theta: number, piece: number) {\r\n  const textureCoords: number[] = [];\r\n  const positions: number[] = [];\r\n  const colors: number[] = [];\r\n  const nTwists = 3;\r\n  for (let s = 0.0; s < 1.001; s += 0.033333) {\r\n    const t = (piece + s) * Math.PI;\r\n    const tt = nTwists * 0.5 * (t - theta);\r\n    // Position\r\n    const r1 = R + H * Math.cos(tt);\r\n    const r2 = R - H * Math.cos(tt);\r\n    positions.push(r1 * Math.sin(t), r1 * Math.cos(t), -H * Math.sin(tt));\r\n    positions.push(r2 * Math.sin(t), r2 * Math.cos(t), +H * Math.sin(tt));\r\n    // Color\r\n    const color = [0, 0, 0];\r\n    for (let k = 0; k < 3; k++) {\r\n      color[k] = (1 - s) * STRIP_COLORS[piece][k] + s * STRIP_COLORS[(piece + 1) % STRIP_COLORS.length][k];\r\n    }\r\n    colors.push(...color, ...color);\r\n    // Texture Coordinates\r\n    textureCoords.push(s, 0, s, 1);\r\n  }\r\n  return { positions, colors, textureCoords };\r\n}\r\n\r\nfunction makeFloatBufferFromArray(gl: WebGLRenderingContext, array: number[]) {\r\n  const buffer = gl.createBuffer();\r\n  if (!buffer) {\r\n    throw new Error('Failed to create buffer.');\r\n  }\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(array), gl.STATIC_DRAW);\r\n  return buffer;\r\n}\r\n\r\nfunction drawArrays(\r\n  gl: WebGLRenderingContext,\r\n  topology: Primitive[],\r\n  positionAttrib: number,\r\n  positionBuffer: WebGLBuffer,\r\n  normalAttrib: number,\r\n  normalBuffer: WebGLBuffer,\r\n  colorAttrib: number,\r\n  colorBuffer: WebGLBuffer,\r\n) {\r\n  bindAttribute(gl, positionAttrib, positionBuffer, 3, gl.FLOAT);\r\n  bindAttribute(gl, normalAttrib, normalBuffer, 3, gl.FLOAT);\r\n  bindAttribute(gl, colorAttrib, colorBuffer, 3, gl.FLOAT);\r\n  try {\r\n    for (const { mode, first, count } of topology) {\r\n      gl.drawArrays(mode, first, count);\r\n    }\r\n  } finally {\r\n    unbindAttribute(gl, colorAttrib);\r\n    unbindAttribute(gl, normalAttrib);\r\n    unbindAttribute(gl, positionAttrib);\r\n  }\r\n}\r\n\r\nfunction bindAttribute(gl: WebGLRenderingContext, attrib: number, buffer: WebGLBuffer, size: number, type: number) {\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n  gl.vertexAttribPointer(attrib, size, type, false, 0, 0);\r\n  gl.enableVertexAttribArray(attrib);\r\n}\r\n\r\nfunction unbindAttribute(gl: WebGLRenderingContext, attrib: number) {\r\n  gl.disableVertexAttribArray(attrib);\r\n}\r\n\r\nfunction makeProgramWithoutTextureMapping(gl: WebGLRenderingContext) {\r\n  const U_MODEL_MATRIX = 'uModelMatrix';\r\n  const U_NORMAL_MATRIX = 'uNormalMatrix';\r\n  const U_VIEW_MATRIX = 'uViewMatrix';\r\n  const U_PROJECTION_MATRIX = 'uProjectionMatrix';\r\n  const A_POSITION = 'aPosition';\r\n  const A_NORMAL = 'aNormal';\r\n  const A_COLOR = 'aColor';\r\n  const V_COLOR = 'vColor';\r\n  const V_NORMAL = 'vNormal';\r\n\r\n  const vsSource = glsl`\r\n    // Uniforms\r\n    uniform mat4 ${U_MODEL_MATRIX};\r\n    uniform mat4 ${U_NORMAL_MATRIX};\r\n    uniform mat4 ${U_VIEW_MATRIX};\r\n    uniform mat4 ${U_PROJECTION_MATRIX};\r\n    // Attributes\r\n    attribute vec4 ${A_POSITION};\r\n    attribute vec3 ${A_NORMAL};\r\n    attribute vec4 ${A_COLOR};\r\n    // Varyings\r\n    varying highp vec4 ${V_NORMAL};\r\n    varying lowp vec4 ${V_COLOR};\r\n    // Program\r\n    void main(void) {\r\n      ${V_NORMAL} = normalize(${U_VIEW_MATRIX} * ${U_NORMAL_MATRIX} * vec4(${A_NORMAL}, 0));\r\n      ${V_COLOR} = ${A_COLOR};\r\n      gl_Position = ${U_PROJECTION_MATRIX} * ${U_VIEW_MATRIX} * ${U_MODEL_MATRIX} * ${A_POSITION};\r\n    }\r\n  `;\r\n\r\n  const fsSource = glsl`\r\n    // Varyings\r\n    varying highp vec4 ${V_NORMAL};\r\n    varying lowp vec4 ${V_COLOR};\r\n    // Program\r\n    void main(void) {\r\n      // Apply lighting\r\n      lowp vec3 Ca = vec3(0.3, 0.3, 0.3); // Ambient light color\r\n      lowp vec3 Cd = vec3(1, 1, 1); // Diffuse light color (white)\r\n      highp vec3 u = normalize(vec3(0.85, 0.8, 0.75)); // Diffuse light direction\r\n      lowp float Id = max(0.0, (gl_FrontFacing ? +1.0 : -1.0) * dot(u, ${V_NORMAL}.xyz)); // Diffuse intensity\r\n      lowp vec4 C = vec4(Ca + Id * Cd, 1.0); // Total incident light color\r\n      gl_FragColor = ${V_COLOR} * C;\r\n    }\r\n  `;\r\n\r\n  const program = buildProgram(gl, vsSource, fsSource);\r\n\r\n  return {\r\n    program,\r\n    attribs: {\r\n      position: gl.getAttribLocation(program, A_POSITION),\r\n      normal: gl.getAttribLocation(program, A_NORMAL),\r\n      color: gl.getAttribLocation(program, A_COLOR),\r\n    },\r\n    uniforms: {\r\n      normalMatrix: getUniformLocation(gl, program, U_NORMAL_MATRIX),\r\n      modelMatrix: getUniformLocation(gl, program, U_MODEL_MATRIX),\r\n      viewMatrix: getUniformLocation(gl, program, U_VIEW_MATRIX),\r\n      projectionMatrix: getUniformLocation(gl, program, U_PROJECTION_MATRIX),\r\n    },\r\n  };\r\n}\r\n\r\nfunction makeProgramWithTextureMapping(gl: WebGLRenderingContext) {\r\n  const U_MODEL_MATRIX = 'uModelMatrix';\r\n  const U_VIEW_MATRIX = 'uViewMatrix';\r\n  const U_PROJECTION_MATRIX = 'uProjectionMatrix';\r\n  const U_SAMPLER = 'uSampler';\r\n  const A_POSITION = 'aPosition';\r\n  const A_COLOR = 'aColor';\r\n  const A_TEXTURE_COORDS = 'aTextureCoords';\r\n  const V_COLOR = 'vColor';\r\n  const V_TEXTURE_COORDS = 'vTextureCoords';\r\n\r\n  const vsSource = glsl`\r\n    // Attributes\r\n    attribute vec4 ${A_POSITION};\r\n    attribute vec4 ${A_COLOR};\r\n    attribute vec2 ${A_TEXTURE_COORDS};\r\n    // Uniforms\r\n    uniform mat4 ${U_MODEL_MATRIX};\r\n    uniform mat4 ${U_VIEW_MATRIX};\r\n    uniform mat4 ${U_PROJECTION_MATRIX};\r\n    // Varyings\r\n    varying lowp vec4 ${V_COLOR};\r\n    varying highp vec2 ${V_TEXTURE_COORDS};\r\n    // Program\r\n    void main(void) {\r\n      gl_Position = ${U_PROJECTION_MATRIX} * ${U_VIEW_MATRIX} * ${U_MODEL_MATRIX} * ${A_POSITION};\r\n      ${V_COLOR} = ${A_COLOR};\r\n      ${V_TEXTURE_COORDS} = ${A_TEXTURE_COORDS};\r\n    }\r\n  `;\r\n\r\n  const fsSource = glsl`\r\n    // Varyings\r\n    varying lowp vec4 ${V_COLOR};\r\n    varying highp vec2 ${V_TEXTURE_COORDS};\r\n    // Uniforms\r\n    uniform sampler2D ${U_SAMPLER};\r\n    // Program\r\n    void main(void) {\r\n      gl_FragColor = ${V_COLOR} * texture2D(${U_SAMPLER}, ${V_TEXTURE_COORDS});\r\n    }\r\n  `;\r\n\r\n  const program = buildProgram(gl, vsSource, fsSource);\r\n\r\n  return {\r\n    program,\r\n    attribs: {\r\n      position: gl.getAttribLocation(program, A_POSITION),\r\n      color: gl.getAttribLocation(program, A_COLOR),\r\n      textureCoords: gl.getAttribLocation(program, A_TEXTURE_COORDS),\r\n    },\r\n    uniforms: {\r\n      sampler: getUniformLocation(gl, program, U_SAMPLER),\r\n      modelMatrix: getUniformLocation(gl, program, U_MODEL_MATRIX),\r\n      viewMatrix: getUniformLocation(gl, program, U_VIEW_MATRIX),\r\n      projectionMatrix: getUniformLocation(gl, program, U_PROJECTION_MATRIX),\r\n    },\r\n  };\r\n}\r\n\r\nfunction buildProgram(gl: WebGLRenderingContext, vsSource: string, fsSource: string) {\r\n  const program = gl.createProgram();\r\n\r\n  if (!program) {\r\n    throw new Error('Failed to create program.');\r\n  }\r\n\r\n  gl.attachShader(program, buildShader(gl, gl.VERTEX_SHADER, vsSource));\r\n  gl.attachShader(program, buildShader(gl, gl.FRAGMENT_SHADER, fsSource));\r\n  gl.linkProgram(program);\r\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n    const message = `Unable to initialize the shader program: ${gl.getProgramInfoLog(program)}`;\r\n    gl.deleteProgram(program);\r\n    throw new Error(message);\r\n  }\r\n\r\n  return program;\r\n}\r\n\r\nfunction buildShader(gl: WebGLRenderingContext, type: number, source: string) {\r\n  const shader = gl.createShader(type);\r\n  if (!shader) {\r\n    throw new Error('Failed to create shader.');\r\n  }\r\n  gl.shaderSource(shader, source);\r\n  gl.compileShader(shader);\r\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n    const message = `An error occurred compiling the shaders: ${gl.getShaderInfoLog(shader)}`;\r\n    gl.deleteShader(shader);\r\n    throw new Error(message);\r\n  }\r\n  return shader;\r\n}\r\n\r\nfunction getUniformLocation(gl: WebGLRenderingContext, program: WebGLProgram, name: string): WebGLUniformLocation {\r\n  return gl.getUniformLocation(program, name) || error(`No uniform named \"${name}\" was found.`);\r\n}\r\n\r\nfunction error<T>(message: string): T {\r\n  throw new Error(message);\r\n}\r\n\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport './index.scss'\r\n\r\n// You need bootstrap? $ yarn add bootstrap\r\n// See: https://create-react-app.dev/docs/adding-bootstrap\r\n// import 'bootstrap/dist/css/bootstrap.css';\r\n\r\n// Single-page application (SPA)\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want to Pre-render with react-snap\r\n// Step 1: install $ yarn add --dev react-snap\r\n// Step 2: add to package.json run script: \"postbuild\": \"react-snap\"\r\n// Step 3: Add to package.json: \"reactSnap\":{\"inlineCss\":true}\r\n// Step 3: replace to the script below.\r\n\r\n/*\r\nimport { hydrate, render } from 'react-dom'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nconst rootElement = document.getElementById('root')\r\nif (rootElement && rootElement!.hasChildNodes()) {\r\n  hydrate(<AppRouter />, rootElement)\r\n\r\n  // Precache - set to 'register' once you Pre-render\r\n  // If you want your app to work offline and load faster, you can change\r\n  // unregister() to register() below. Note this comes with some pitfalls.\r\n  // Learn more about service workers: http://bit.ly/CRA-PWA\r\n  serviceWorker.register()\r\n} else {\r\n  render(<AppRouter />, rootElement)\r\n}\r\n*/\r\n"],"sourceRoot":""}