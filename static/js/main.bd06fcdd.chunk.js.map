{"version":3,"sources":["App.tsx","AppRouter.tsx","index.tsx"],"names":["glsl","App","canvas","useRef","useEffect","gl","current","getContext","program","vsSource","fsSource","createProgram","Error","attachShader","makeShader","VERTEX_SHADER","FRAGMENT_SHADER","linkProgram","getProgramParameter","LINK_STATUS","deleteProgram","getProgramInfoLog","initShaderProgram","aVertexPosition","getAttribLocation","uModelViewMatrix","getUniformLocation","uProjectionMatrix","useProgram","clearColor","clearDepth","enable","DEPTH_TEST","depthFunc","LEQUAL","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","fieldOfView","Math","PI","aspect","width","height","projectionMatrix","mat4","create","perspective","modelViewMatrix","translate","step","h","positions","i","s","t","tt","nTwists","ct","cos","st","sin","ctt","stt","r1","r2","z1","z2","push","buffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","count","length","makeStrip","vertexAttribPointer","FLOAT","enableVertexAttribArray","uniformMatrix4fv","drawArrays","TRIANGLE_STRIP","className","ref","href","target","rel","type","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","deleteShader","getShaderInfoLog","AppRouter","fallback","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bd06fcdd.chunk.js","sourcesContent":["/* eslint-disable no-bitwise */\n\nimport { mat4 } from 'gl-matrix';\nimport React, { useEffect, useRef } from 'react';\nimport './App.scss';\n\nconst glsl = ([s]: TemplateStringsArray): string => s;\n\nexport default function App() {\n\n  const canvas = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    const gl = canvas.current?.getContext('webgl');\n\n    if (!gl) {\n      return;\n    }\n\n    const vsSource = glsl`\n      attribute vec4 aVertexPosition;\n      uniform mat4 uModelViewMatrix;\n      uniform mat4 uProjectionMatrix;\n      void main() {\n        gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPosition;\n      }\n    `;\n\n    const fsSource = glsl`\n      void main() {\n        gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\n      }\n    `;\n\n    const program = initShaderProgram(gl, vsSource, fsSource);\n\n    const aVertexPosition = gl.getAttribLocation(program, 'aVertexPosition');\n    const uModelViewMatrix = gl.getUniformLocation(program, 'uModelViewMatrix');\n    const uProjectionMatrix = gl.getUniformLocation(program, 'uProjectionMatrix');\n\n    gl.useProgram(program);\n\n    gl.clearColor(0, 0, 0, 1);\n    gl.clearDepth(1.0);                 // Clear everything\n    gl.enable(gl.DEPTH_TEST);           // Enable depth testing\n    gl.depthFunc(gl.LEQUAL);            // Near things obscure far things\n\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n    const fieldOfView = Math.PI / 4;\n    const aspect = gl.canvas.width / gl.canvas.height;\n    const zNear = 0.1;\n    const zFar = 100.0;\n\n    const projectionMatrix = mat4.create();\n\n    mat4.perspective(projectionMatrix,\n      fieldOfView,\n      aspect,\n      zNear,\n      zFar);\n\n    const modelViewMatrix = mat4.create();\n\n    mat4.translate(modelViewMatrix, // destination matrix\n      modelViewMatrix,              // matrix to translate\n      [-0.0, 0.0, -4.0]);            // amount to translate\n\n    const { buffer, count } = makeStrip(gl);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n\n    gl.vertexAttribPointer(aVertexPosition, 3, gl.FLOAT, false, 0, 0);\n    gl.enableVertexAttribArray(aVertexPosition);\n\n    gl.uniformMatrix4fv(uModelViewMatrix, false, modelViewMatrix);\n    gl.uniformMatrix4fv(uProjectionMatrix, false, projectionMatrix);\n\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, count);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <canvas width=\"320px\" height=\"320px\" ref={canvas} />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a className=\"App-link\" href=\"https://github.com/EliEladElrom/react-tutorials\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Eli Elad Elrom - React Tutorials\n        </a>\n      </header>\n    </div>\n  )\n}\n\nfunction makeStrip(gl: WebGLRenderingContext): { buffer: WebGLBuffer, count: number } {\n  const epsilon = 0.001;\n  const nTwists = 3;\n  const step = Math.PI / 30.0;\n  const R = 1.0; const h = 0.1;\n  const torsion = 0;\n  const positions: number[] = [];\n  for (let i = 0; i < 2; i++) {\n    for (let s = 0.0; s < 1.0 + epsilon; s += step / Math.PI) {\n      const t = (i + s) * Math.PI;\n      const tt = nTwists * 0.5 * t - torsion;\n      const ct = Math.cos(t); const st = Math.sin(t);\n      const ctt = Math.cos(tt); const stt = Math.sin(tt);\n      const r1 = R - h * ctt;\n      const r2 = R + h * ctt;\n      const z1 = -h * stt;\n      const z2 = +h * stt;\n      positions.push(r2 * st, r2 * ct, z2);\n      positions.push(r1 * st, r1 * ct, z1);\n    }\n  }\n  const buffer = gl.createBuffer();\n  if (!buffer) {\n    throw new Error('Failed to create buffer.');\n  }\n  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);\n  return { buffer, count: positions.length / 3 };\n}\n\nfunction initShaderProgram(gl: WebGLRenderingContext, vsSource: string, fsSource: string) {\n  const program = gl.createProgram();\n\n  if (!program) {\n    throw new Error('Failed to create program.');\n  }\n\n  gl.attachShader(program, makeShader(gl, gl.VERTEX_SHADER, vsSource));\n  gl.attachShader(program, makeShader(gl, gl.FRAGMENT_SHADER, fsSource));\n  gl.linkProgram(program);\n\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n    gl.deleteProgram(program);\n    throw new Error(`Unable to initialize the shader program: ${gl.getProgramInfoLog(program)}`);\n  }\n\n  return program;\n}\n\nfunction makeShader(gl: WebGLRenderingContext, type: number, source: string) {\n  const shader = gl.createShader(type);\n\n  if (!shader) {\n    throw new Error('Failed to create shader.');\n  }\n\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    gl.deleteShader(shader);\n    throw new Error(`An error occurred compiling the shaders: ${gl.getShaderInfoLog(shader)}`);\n  }\n\n  return shader;\n}\n\n","// src/AppRouter.tsx\n\nimport React, { FunctionComponent, Suspense } from 'react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport { RecoilRoot } from 'recoil'\nimport App from './App'\n\nconst AppRouter: FunctionComponent = () => {\n  return (\n    <Router>\n      <RecoilRoot>\n        <Suspense fallback={<span>Loading...</span>}>\n          <Switch>\n            <Route exact path=\"/\" component={App} />\n          </Switch>\n        </Suspense>\n      </RecoilRoot>\n    </Router>\n  )\n}\n\n/*\n// TODO EE: To replace Recoil with Redux Toolkit;\n\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\n\n<Router>\n  <Provider store={store}>\n    <Switch>\n      <Route exact path=\"/\" component={App} />\n    </Switch>\n  </Provider>\n</Router>\n\n */\n\n/*\n\n// TODO: EE: Without Recoil or Redux Toolkit;\n\n// src/AppRouter.tsx\n\nimport React, { FunctionComponent } from 'react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport App from './App'\n\nconst AppRouter: FunctionComponent = () => {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" component={App} />\n      </Switch>\n    </Router>\n  )\n}\n\n */\n\nexport default AppRouter\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport AppRouter from './AppRouter'\n\n// You need bootstrap? $ yarn add bootstrap\n// See: https://create-react-app.dev/docs/adding-bootstrap\n// import 'bootstrap/dist/css/bootstrap.css';\n\n// Single-page application (SPA)\nReactDOM.render(<AppRouter />, document.getElementById('root'))\n\n// If you want to Pre-render with react-snap\n// Step 1: install $ yarn add --dev react-snap\n// Step 2: add to package.json run script: \"postbuild\": \"react-snap\"\n// Step 3: Add to package.json: \"reactSnap\":{\"inlineCss\":true}\n// Step 3: replace to the script below.\n\n/*\nimport { hydrate, render } from 'react-dom'\nimport * as serviceWorker from './serviceWorker'\n\nconst rootElement = document.getElementById('root')\nif (rootElement && rootElement!.hasChildNodes()) {\n  hydrate(<AppRouter />, rootElement)\n\n  // Precache - set to 'register' once you Pre-render\n  // If you want your app to work offline and load faster, you can change\n  // unregister() to register() below. Note this comes with some pitfalls.\n  // Learn more about service workers: http://bit.ly/CRA-PWA\n  serviceWorker.register()\n} else {\n  render(<AppRouter />, rootElement)\n}\n*/\n"],"sourceRoot":""}