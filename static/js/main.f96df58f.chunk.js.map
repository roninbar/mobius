{"version":3,"sources":["App.tsx","index.tsx"],"names":["glsl","String","raw","GOLD","SILVER","STRIP_COLORS","H","STEP","Math","PI","App","useState","theta","setTheta","anchor","setAnchor","mat4","create","modelMatrix","setModelMatrix","programWithTextureMapping","useRef","programWithoutTextureMapping","canvas","useEffect","gl","current","getContext","Error","vsSource","fsSource","program","buildProgram","attribs","position","getAttribLocation","color","normal","textureCoords","uniforms","sampler","getUniformLocation","textureMatrix","normalMatrix","viewMatrix","projectionMatrix","makeProgramWithTextureMapping","makeProgramWithoutTextureMapping","TEXTURE0","TEXTURE1","TEXTURE2","TEXTURE3","which","loadTexture","process","TEXTURE10","enable","DEPTH_TEST","depthFunc","LEQUAL","clearDepth","clearColor","CULL_FACE","cullFace","BACK","afid","requestAnimationFrame","f","time","cancelAnimationFrame","texProgram","texAttribs","texUniforms","nonTexProgram","nonTexAttribs","nonTexUniforms","perspective","width","height","fromTranslation","mat3","useProgram","uniformMatrix4fv","drawWithoutTexture","topology","positionBuffer","normalBuffer","colorBuffer","drawArrays","deleteBuffer","drawWithTexture","textureCoordBuffer","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","FRONT","scale","makeRim","m","translate","t","uniformMatrix3fv","uniform1i","positions","colors","normals","first","v","x","cos","y","sin","push","mode","TRIANGLE_FAN","count","makeFloatBufferFromArray","makeDisc","i","makeStrip","drawHand","length","angle","TRIANGLE_STRIP","makeHand","rotateZ","bindAttribute","FLOAT","unbindAttribute","r","h","norm","sqrt","nr","nh","makeHubcap","rotateX","z","r0","r1","z0","z1","x0","x1","y0","y1","makeFrisbee","className","ref","onPointerDown","currentTarget","pointerId","clientX","clientY","setPointerCapture","onPointerMove","dx","dy","distance","rot","fromRotation","mul","onPointerUp","releasePointerCapture","url","texture","createTexture","activeTexture","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","Uint8Array","image","Image","onload","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MAG_FILTER","LINEAR","isPowerOf2","generateMipmap","TEXTURE_MIN_FILTER","LINEAR_MIPMAP_LINEAR","src","value","torsion","piece","s","tt","nTwists","ct","st","ctt","stt","r2","k","makeStripArrays","array","buffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","positionAttrib","colorAttrib","normalAttrib","texCoordAttrib","texCoordBuffer","attrib","size","type","vertexAttribPointer","enableVertexAttribArray","disableVertexAttribArray","createProgram","attachShader","buildShader","VERTEX_SHADER","FRAGMENT_SHADER","linkProgram","getProgramParameter","LINK_STATUS","message","getProgramInfoLog","deleteProgram","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","name","error","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f96df58f.chunk.js","sourcesContent":["/* eslint-disable one-var */\r\n/* eslint-disable no-bitwise */\r\n\r\nimport { mat3, mat4 } from 'gl-matrix';\r\nimport React, { MutableRefObject, useEffect, useRef, useState } from 'react';\r\nimport './App.scss';\r\n\r\ninterface ProgramInfo {\r\n  program: WebGLProgram;\r\n  attribs: {\r\n    position: number;\r\n    normal: number;\r\n    color: number;\r\n  };\r\n  uniforms: {\r\n    projectionMatrix: WebGLUniformLocation;\r\n    viewMatrix: WebGLUniformLocation;\r\n    modelMatrix: WebGLUniformLocation;\r\n    normalMatrix: WebGLUniformLocation;\r\n  };\r\n}\r\n\r\ntype NonTextureMappingProgramInfo = ProgramInfo & {\r\n  attribs: {\r\n  };\r\n  uniforms: {\r\n  };\r\n};\r\n\r\ntype TextureMappingProgramInfo = ProgramInfo & {\r\n  attribs: {\r\n    textureCoords: number;\r\n  };\r\n  uniforms: {\r\n    sampler: WebGLSampler;\r\n    textureMatrix: WebGLUniformLocation;\r\n  };\r\n};\r\n\r\ntype Primitive = {\r\n  mode: number;\r\n  first: number;\r\n  count: number;\r\n};\r\n\r\ninterface Actor {\r\n  topology: Primitive[];\r\n  positionBuffer: WebGLBuffer;\r\n  normalBuffer: WebGLBuffer;\r\n  colorBuffer: WebGLBuffer;\r\n  textureCoordBuffer?: WebGLBuffer;\r\n}\r\n\r\nconst glsl = String.raw;\r\n\r\n// const BLACK = [0, 0, 0];  \r\n// const BLUE = [0, 0, 1];\r\n// const GREEN = [0, 1, 0];\r\n// const YELLOW = [1, 1, 0];\r\n// const RED = [1, 0, 0];\r\nconst GOLD = [1.0, 0.8, 0.5];\r\nconst SILVER = [0.75, 0.75, 0.75];\r\n// const TITANIUM = [0.125, 0.125, 0.125];\r\n// const WHITE = [1, 1, 1];\r\n\r\nconst STRIP_COLORS = [SILVER, SILVER, SILVER, SILVER];\r\n\r\nconst R = 1.0, H = 0.1;\r\nconst STEP = Math.PI / 36;\r\nconst EPSILON = 0.001;\r\n\r\nexport default function App() {\r\n\r\n  const [theta, setTheta] = useState(0); // The angle of the hour hand, in radians.\r\n  const [anchor, setAnchor] = useState<{ x: number, y: number; } | null>();\r\n  const [modelMatrix, setModelMatrix] = useState(mat4.create());\r\n\r\n  const programWithTextureMapping: MutableRefObject<TextureMappingProgramInfo | null> = useRef(null);\r\n  const programWithoutTextureMapping: MutableRefObject<NonTextureMappingProgramInfo | null> = useRef(null);\r\n\r\n  const canvas = useRef<HTMLCanvasElement>(null);\r\n\r\n  // #region Initialize WebGL stuff and start the animation.\r\n  useEffect(() => {\r\n\r\n    const gl = canvas.current?.getContext('webgl');\r\n\r\n    if (!gl) {\r\n      throw new Error('Failed to get a WebGL context.');\r\n    }\r\n\r\n    programWithTextureMapping.current = makeProgramWithTextureMapping(gl);\r\n    programWithoutTextureMapping.current = makeProgramWithoutTextureMapping(gl);\r\n\r\n    for (const which of [gl.TEXTURE0, gl.TEXTURE1, gl.TEXTURE2, gl.TEXTURE3]) {\r\n      loadTexture(gl, which, `${process.env.PUBLIC_URL}/texture/hours${which - gl.TEXTURE0}.bmp`);\r\n    }\r\n\r\n    loadTexture(gl, gl.TEXTURE10, `${process.env.PUBLIC_URL}/texture/mobius.png`);\r\n\r\n    gl.enable(gl.DEPTH_TEST);\r\n    gl.depthFunc(gl.LEQUAL);\r\n    gl.clearDepth(1);\r\n    gl.clearColor(0, 0, 0, 1);\r\n    gl.enable(gl.CULL_FACE);\r\n    gl.cullFace(gl.BACK);\r\n\r\n    let afid = requestAnimationFrame(function f(time) {\r\n      setTheta(time / 12000 * Math.PI);\r\n      // const now = new Date();\r\n      // setTheta(((now.getSeconds() / 60 + now.getMinutes()) / 60 + now.getHours()) / 6 * Math.PI);\r\n      afid = requestAnimationFrame(f);\r\n    });\r\n\r\n    return () => {\r\n      cancelAnimationFrame(afid);\r\n    };\r\n\r\n  }, []);\r\n  // #endregion\r\n\r\n  // #region Render one frame.\r\n  useEffect(() => {\r\n\r\n    const gl = canvas.current?.getContext('webgl');\r\n\r\n    if (!gl) {\r\n      throw new Error('Failed to get a WebGL context.');\r\n    }\r\n\r\n    if (!programWithTextureMapping.current || !programWithoutTextureMapping.current) {\r\n      throw new Error('Missing shader program!');\r\n    }\r\n\r\n    const { program: texProgram, attribs: texAttribs, uniforms: texUniforms } = programWithTextureMapping.current;\r\n    const { program: nonTexProgram, attribs: nonTexAttribs, uniforms: nonTexUniforms } = programWithoutTextureMapping.current;\r\n\r\n    const projectionMatrix = mat4.perspective(mat4.create(), Math.PI / 5, gl.canvas.width / gl.canvas.height, 0.1, 100);\r\n    const viewMatrix = mat4.fromTranslation(mat4.create(), [0, 0, -4]);\r\n    const textureMatrix = mat3.create();\r\n\r\n    gl.useProgram(nonTexProgram);\r\n    gl.uniformMatrix4fv(nonTexUniforms.projectionMatrix, false, projectionMatrix);\r\n    gl.uniformMatrix4fv(nonTexUniforms.viewMatrix, false, viewMatrix);\r\n\r\n    const drawWithoutTexture = function ({ topology, positionBuffer, normalBuffer, colorBuffer }: Actor) {\r\n      try {\r\n        gl.useProgram(nonTexProgram);\r\n        drawArrays(gl, topology, nonTexAttribs.position, positionBuffer, nonTexAttribs.color, colorBuffer, nonTexAttribs.normal, normalBuffer);\r\n      } finally {\r\n        if (colorBuffer) gl.deleteBuffer(colorBuffer);\r\n        if (normalBuffer) gl.deleteBuffer(normalBuffer);\r\n        if (positionBuffer) gl.deleteBuffer(positionBuffer);\r\n      }\r\n    };\r\n\r\n    const drawWithTexture = function ({ topology, positionBuffer, normalBuffer, colorBuffer, textureCoordBuffer }: Actor) {\r\n      try {\r\n        gl.useProgram(texProgram);\r\n        drawArrays(gl, topology, texAttribs.position, positionBuffer, texAttribs.color, colorBuffer, texAttribs.normal, normalBuffer, texAttribs.textureCoords, textureCoordBuffer);\r\n      } finally {\r\n        if (textureCoordBuffer) gl.deleteBuffer(textureCoordBuffer);\r\n        if (colorBuffer) gl.deleteBuffer(colorBuffer);\r\n        if (normalBuffer) gl.deleteBuffer(normalBuffer);\r\n        if (positionBuffer) gl.deleteBuffer(positionBuffer);\r\n      }\r\n    };\r\n\r\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n    gl.cullFace(gl.FRONT);\r\n\r\n    // #region Inside of Rim\r\n    gl.useProgram(nonTexProgram);\r\n    gl.uniformMatrix4fv(nonTexUniforms.modelMatrix, false, mat4.scale(mat4.create(), modelMatrix, [1.2, 1.2, 1]));\r\n    gl.uniformMatrix4fv(nonTexUniforms.normalMatrix, false, mat4.scale(mat4.create(), modelMatrix, [1 / 1.2, 1 / 1.2, 1]));\r\n    drawWithoutTexture(makeRim(gl));\r\n    // #endregion\r\n\r\n    gl.cullFace(gl.BACK);\r\n\r\n    // #region Clock Face\r\n    {\r\n      gl.useProgram(texProgram);\r\n      const m = mat4.translate(mat4.create(), modelMatrix, [0, 0, -H]);\r\n      gl.uniformMatrix4fv(texUniforms.modelMatrix, false, mat4.scale(mat4.create(), m, [1.199, 1.199, 1]));\r\n      const t = mat3.scale(mat3.create(), mat3.translate(mat3.create(), textureMatrix, [0.5, 0.5]), [0.75, -0.75]);\r\n      gl.uniformMatrix4fv(texUniforms.normalMatrix, false, mat4.scale(mat4.create(), m, [1 / 1.2, 1 / 1.2, 1]));\r\n      gl.uniformMatrix3fv(texUniforms.textureMatrix, false, t);\r\n      gl.uniform1i(texUniforms.sampler, 10);\r\n      drawWithTexture(makeDisc(gl));\r\n    }\r\n    // #endregion\r\n\r\n    // #region Hours Strip\r\n    gl.useProgram(texProgram);\r\n    gl.uniformMatrix4fv(texUniforms.projectionMatrix, false, projectionMatrix);\r\n    gl.uniformMatrix4fv(texUniforms.viewMatrix, false, viewMatrix);\r\n    gl.uniformMatrix4fv(texUniforms.modelMatrix, false, modelMatrix);\r\n    gl.uniformMatrix3fv(texUniforms.textureMatrix, false, textureMatrix);\r\n    for (let i = 0; i < 4; i++) {\r\n      gl.uniform1i(texUniforms.sampler, i);\r\n      drawWithTexture(makeStrip(gl, theta, i));\r\n    }\r\n    // #endregion\r\n\r\n    // #region Hands\r\n    const drawHand = function (height: number, width: number, length: number, angle: number) {\r\n      const { topology: [{ mode, first, count }], positionBuffer, normalBuffer, colorBuffer } = makeHand(gl, height, width, length);\r\n      try {\r\n        gl.useProgram(nonTexProgram);\r\n        const m = mat4.rotateZ(mat4.create(), modelMatrix, -angle);\r\n        gl.uniformMatrix4fv(nonTexUniforms.modelMatrix, false, m);\r\n        gl.uniformMatrix4fv(nonTexUniforms.normalMatrix, false, m);\r\n        bindAttribute(gl, nonTexAttribs.position, positionBuffer, 3, gl.FLOAT);\r\n        bindAttribute(gl, nonTexAttribs.normal, normalBuffer, 3, gl.FLOAT);\r\n        bindAttribute(gl, nonTexAttribs.color, colorBuffer, 3, gl.FLOAT);\r\n        try {\r\n          gl.drawArrays(mode, first, count);\r\n        } finally {\r\n          unbindAttribute(gl, nonTexAttribs.color);\r\n          unbindAttribute(gl, nonTexAttribs.normal);\r\n          unbindAttribute(gl, nonTexAttribs.position);\r\n        }\r\n      } finally {\r\n        gl.deleteBuffer(colorBuffer);\r\n        gl.deleteBuffer(normalBuffer);\r\n        gl.deleteBuffer(positionBuffer);\r\n      }\r\n    };\r\n\r\n    drawHand(0.01, 0.02, 0.6, theta); // Hours\r\n    drawHand(0.02, 0.02, 0.8, 12 * theta); // Minutes\r\n    // #endregion\r\n\r\n    // #region Hubcap\r\n    const { topology: [{ mode, first, count }], positionBuffer, normalBuffer, colorBuffer } = makeHubcap(gl, 0.03);\r\n    try {\r\n      gl.useProgram(nonTexProgram);\r\n      gl.uniformMatrix4fv(nonTexUniforms.modelMatrix, false, modelMatrix);\r\n      gl.uniformMatrix4fv(nonTexUniforms.normalMatrix, false, modelMatrix);\r\n      bindAttribute(gl, nonTexAttribs.position, positionBuffer, 3, gl.FLOAT);\r\n      bindAttribute(gl, nonTexAttribs.normal, normalBuffer, 3, gl.FLOAT);\r\n      bindAttribute(gl, nonTexAttribs.color, colorBuffer, 3, gl.FLOAT);\r\n      try {\r\n        gl.drawArrays(mode, first, count);\r\n      } finally {\r\n        unbindAttribute(gl, nonTexAttribs.position);\r\n        unbindAttribute(gl, nonTexAttribs.color);\r\n      }\r\n    } finally {\r\n      gl.deleteBuffer(colorBuffer);\r\n      gl.deleteBuffer(positionBuffer);\r\n    }\r\n    // #endregion\r\n\r\n    // #region Back of Case\r\n    const m = mat4.rotateX(mat4.create(), mat4.translate(mat4.create(), modelMatrix, [0, 0, -H]), Math.PI);\r\n    gl.uniformMatrix4fv(nonTexUniforms.modelMatrix, false, mat4.scale(mat4.create(), m, [1.2, 1.2, 0.24]));\r\n    gl.uniformMatrix4fv(nonTexUniforms.normalMatrix, false, mat4.scale(mat4.create(), m, [1 / 1.2, 1 / 1.2, 1 / 0.24]));\r\n    drawWithoutTexture(makeFrisbee(gl));\r\n    gl.uniformMatrix4fv(nonTexUniforms.modelMatrix, false, mat4.scale(mat4.create(), modelMatrix, [1.2, 1.2, 1]));\r\n    gl.uniformMatrix4fv(nonTexUniforms.normalMatrix, false, mat4.scale(mat4.create(), modelMatrix, [1 / 1.2, 1 / 1.2, 1]));\r\n    drawWithoutTexture(makeRim(gl));\r\n    // #endregion\r\n\r\n  }, [theta, modelMatrix]);\r\n  // #endregion\r\n\r\n  // #region Event Handlers \r\n  const onPointerDown = ({ currentTarget, pointerId, clientX: x, clientY: y }: React.PointerEvent<HTMLCanvasElement>): void => {\r\n    currentTarget.setPointerCapture(pointerId);\r\n    setAnchor({ x, y });\r\n  };\r\n\r\n  const onPointerUp = ({ currentTarget, pointerId }: React.PointerEvent<HTMLCanvasElement>): void => {\r\n    setAnchor(null);\r\n    currentTarget.releasePointerCapture(pointerId);\r\n  };\r\n\r\n  const onPointerMove = ({ clientX: x, clientY: y }: React.PointerEvent<HTMLCanvasElement>): void => {\r\n    if (anchor) {\r\n      const dx = x - anchor.x;\r\n      const dy = y - anchor.y;\r\n      const distance = Math.sqrt(dx * dx + dy * dy);\r\n      if (distance > 0) {\r\n        const rot = mat4.fromRotation(mat4.create(), 0.01 * distance, [dy, dx, 0]);\r\n        setModelMatrix(mat4.mul(mat4.create(), rot, modelMatrix));\r\n        setAnchor({ x, y });\r\n      }\r\n    }\r\n  };\r\n  // #endregion\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <canvas\r\n          width=\"768px\"\r\n          height=\"768px\"\r\n          ref={canvas}\r\n          onPointerDown={onPointerDown}\r\n          onPointerMove={onPointerMove}\r\n          onPointerUp={onPointerUp}\r\n        />\r\n        <p>M&ouml;bius Clock</p>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction loadTexture(gl: WebGLRenderingContext, which: number, url: string) {\r\n  const texture = gl.createTexture();\r\n\r\n  // Because images have to be downloaded over the internet\r\n  // they might take a moment until they are ready.\r\n  // Until then put a single pixel in the texture so we can\r\n  // use it immediately. When the image has finished downloading\r\n  // we'll update the texture with the contents of the image.\r\n  gl.activeTexture(which);\r\n  gl.bindTexture(gl.TEXTURE_2D, texture);\r\n  gl.texImage2D(\r\n    gl.TEXTURE_2D,\r\n    0, // level\r\n    gl.RGBA,\r\n    1, // width\r\n    1, // height\r\n    0, // border\r\n    gl.RGBA,\r\n    gl.UNSIGNED_BYTE,\r\n    new Uint8Array([255, 255, 255, 255]), // opaque white\r\n  );\r\n\r\n  const image = new Image();\r\n  image.onload = () => {\r\n    gl.activeTexture(which);\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n\r\n    // WebGL1 has different requirements for power of 2 images\r\n    // vs non power of 2 images so check if the image is a\r\n    // power of 2 in both dimensions.\r\n    if (isPowerOf2(image.width) && isPowerOf2(image.height)) {\r\n      // Yes, it's a power of 2. Generate mips.\r\n      gl.generateMipmap(gl.TEXTURE_2D);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);\r\n    } else {\r\n      // No, it's not a power of 2. Turn off mips and set\r\n      // wrapping to clamp to edge.\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n    }\r\n  };\r\n  image.src = url;\r\n\r\n  return texture;\r\n}\r\n\r\nfunction isPowerOf2(value: number) {\r\n  return (value & (value - 1)) === 0;\r\n}\r\n\r\nfunction makeFrisbee(gl: WebGLRenderingContext): Actor {\r\n  const topology: Primitive[] = [];\r\n  const positions = [0, 0, R];\r\n  const normals = [0, 0, 1];\r\n  const colors = [...GOLD];\r\n\r\n  let first = 0, v = 1;\r\n\r\n  const r = R * Math.sin(STEP);\r\n  const z = R * Math.cos(STEP);\r\n\r\n  for (let f = -Math.PI; f < Math.PI + EPSILON; f += STEP, v++) {\r\n    const x = r * Math.cos(f), y = r * Math.sin(f);\r\n\r\n    positions.push(x, y, z);\r\n    normals.push(x, y, z);\r\n    colors.push(...GOLD);\r\n  }\r\n\r\n  topology.push({ mode: gl.TRIANGLE_FAN, first, count: v - first });\r\n  first = v;\r\n\r\n  for (let t = STEP; t < 0.5 * Math.PI - EPSILON; t += STEP) {\r\n    const r0 = R * Math.sin(t), r1 = R * Math.sin(t + STEP);\r\n    const z0 = R * Math.cos(t), z1 = R * Math.cos(t + STEP);\r\n\r\n    for (let f = -Math.PI; f < Math.PI + EPSILON; f += STEP, v += 2) {\r\n      const x0 = r0 * Math.cos(f), x1 = r1 * Math.cos(f);\r\n      const y0 = r0 * Math.sin(f), y1 = r1 * Math.sin(f);\r\n\r\n      positions.push(x0, y0, z0);\r\n      normals.push(x0, y0, z0);\r\n      colors.push(...GOLD);\r\n\r\n      positions.push(x1, y1, z1);\r\n      normals.push(x1, y1, z1);\r\n      colors.push(...GOLD);\r\n    }\r\n\r\n    topology.push({ mode: gl.TRIANGLE_STRIP, first, count: v - first });\r\n    first = v;\r\n  }\r\n\r\n  return {\r\n    topology,\r\n    positionBuffer: makeFloatBufferFromArray(gl, positions),\r\n    normalBuffer: makeFloatBufferFromArray(gl, normals),\r\n    colorBuffer: makeFloatBufferFromArray(gl, colors),\r\n  };\r\n}\r\n\r\nfunction makeRim(gl: WebGLRenderingContext): Actor {\r\n  const topology: Primitive[] = [];\r\n  const positions = [];\r\n  const normals = [];\r\n  const colors = [];\r\n  for (let t = 0; t < 2 * Math.PI + EPSILON; t += STEP) {\r\n    positions.push(R * Math.cos(t), R * Math.sin(t), +H);\r\n    normals.push(Math.cos(t), Math.sin(t), 0);\r\n    colors.push(...GOLD);\r\n    positions.push(R * Math.cos(t), R * Math.sin(t), -H);\r\n    normals.push(Math.cos(t), Math.sin(t), 0);\r\n    colors.push(...GOLD);\r\n  }\r\n  topology.push({ mode: gl.TRIANGLE_STRIP, first: 0, count: positions.length / 3 });\r\n  return {\r\n    topology,\r\n    positionBuffer: makeFloatBufferFromArray(gl, positions),\r\n    normalBuffer: makeFloatBufferFromArray(gl, normals),\r\n    colorBuffer: makeFloatBufferFromArray(gl, colors),\r\n  };\r\n}\r\n\r\nfunction makeDisc(gl: WebGLRenderingContext): Actor {\r\n  const topology: Primitive[] = [];\r\n  const positions = [0, 0, 0];\r\n  const colors = [...SILVER];\r\n  const normals = [0, 0, 1];\r\n  const textureCoords = [0, 0];\r\n\r\n  let first = 0, v = 1;\r\n  for (let t = 0; t < 2 * Math.PI + EPSILON; t += STEP, v++) {\r\n    const x = R * Math.cos(t);\r\n    const y = R * Math.sin(t);\r\n    positions.push(x, y, 0);\r\n    normals.push(0, 0, 1);\r\n    colors.push(...SILVER);\r\n    textureCoords.push(x / R, y / R);\r\n  }\r\n  topology.push({ mode: gl.TRIANGLE_FAN, first, count: v - first });\r\n  first = v;\r\n\r\n  return {\r\n    topology,\r\n    positionBuffer: makeFloatBufferFromArray(gl, positions),\r\n    normalBuffer: makeFloatBufferFromArray(gl, normals),\r\n    colorBuffer: makeFloatBufferFromArray(gl, colors),\r\n    textureCoordBuffer: makeFloatBufferFromArray(gl, textureCoords),\r\n  };\r\n}\r\n\r\nfunction makeHubcap(gl: WebGLRenderingContext, height: number): Actor {\r\n  const r = 0.05;\r\n  const h = 0.01;\r\n  const norm = Math.sqrt(r * r + h * h);\r\n  const nr = r / norm;\r\n  const nh = h / norm;\r\n  const positions = [0, 0, height + h];\r\n  const normals = [0, 0, 1];\r\n  const colors = [...SILVER];\r\n  for (let t = 0; t < 2 * Math.PI; t += Math.PI / 30) {\r\n    positions.push(r * Math.cos(t), r * Math.sin(t), height);\r\n    normals.push(nh * Math.cos(t), nh * Math.sin(t), nr);\r\n    colors.push(...SILVER);\r\n  }\r\n  const count = positions.length / 3;\r\n  return {\r\n    topology: [{ mode: gl.TRIANGLE_FAN, first: 0, count }],\r\n    positionBuffer: makeFloatBufferFromArray(gl, positions),\r\n    normalBuffer: makeFloatBufferFromArray(gl, normals),\r\n    colorBuffer: makeFloatBufferFromArray(gl, colors),\r\n  };\r\n}\r\n\r\nfunction makeHand(gl: WebGLRenderingContext, height: number, width: number, length: number): Actor {\r\n  return {\r\n    topology: [{ mode: gl.TRIANGLE_STRIP, first: 0, count: 4 }],\r\n    positionBuffer: makeFloatBufferFromArray(gl, [\r\n      -width, -0.2 * length, height,\r\n      +width, -0.2 * length, height,\r\n      -width, length, height,\r\n      +width, length, height,\r\n    ]),\r\n    normalBuffer: makeFloatBufferFromArray(gl, [\r\n      0, 0, 1,\r\n      0, 0, 1,\r\n      0, 0, 1,\r\n      0, 0, 1,\r\n    ]),\r\n    colorBuffer: makeFloatBufferFromArray(gl, [\r\n      ...SILVER,\r\n      ...SILVER,\r\n      ...SILVER,\r\n      ...SILVER,\r\n    ]),\r\n  };\r\n}\r\n\r\nfunction makeStrip(gl: WebGLRenderingContext, torsion: number, piece: number): Actor {\r\n  const { positions, normals, colors, textureCoords } = makeStripArrays(torsion, piece);\r\n  return {\r\n    topology: [{ mode: gl.TRIANGLE_STRIP, first: 0, count: positions.length / 3 }],\r\n    positionBuffer: makeFloatBufferFromArray(gl, positions),\r\n    normalBuffer: makeFloatBufferFromArray(gl, normals),\r\n    colorBuffer: makeFloatBufferFromArray(gl, colors),\r\n    textureCoordBuffer: makeFloatBufferFromArray(gl, textureCoords),\r\n  };\r\n}\r\n\r\nfunction makeStripArrays(theta: number, piece: number) {\r\n  const textureCoords: number[] = [];\r\n  const positions: number[] = [];\r\n  const normals: number[] = [];\r\n  const colors: number[] = [];\r\n  const nTwists = 3;\r\n  for (let s = 0.0; s < 1.001; s += 0.033333) {\r\n    const t = (piece + s) * Math.PI;\r\n    const tt = nTwists * 0.5 * (t - theta);\r\n    const ct = Math.cos(t), st = Math.sin(t);\r\n    const ctt = Math.cos(tt), stt = Math.sin(tt);\r\n    // Position\r\n    const r1 = R + H * Math.cos(tt);\r\n    const r2 = R - H * Math.cos(tt);\r\n    positions.push(r1 * Math.sin(t), r1 * Math.cos(t), -H * Math.sin(tt));\r\n    positions.push(r2 * Math.sin(t), r2 * Math.cos(t), +H * Math.sin(tt));\r\n    // Normal\r\n    normals.push(-st * stt, -ct * stt, ct * ct * ctt + ctt * st * st);\r\n    normals.push(-st * stt, -ct * stt, ct * ct * ctt + ctt * st * st);\r\n    // Color\r\n    const color = [0, 0, 0];\r\n    for (let k = 0; k < 3; k++) {\r\n      color[k] = (1 - s) * STRIP_COLORS[piece][k] + s * STRIP_COLORS[(piece + 1) % STRIP_COLORS.length][k];\r\n    }\r\n    colors.push(...color, ...color);\r\n    // Texture Coordinates\r\n    textureCoords.push(s, 0, s, 1);\r\n  }\r\n  return { positions, normals, colors, textureCoords };\r\n}\r\n\r\nfunction makeFloatBufferFromArray(gl: WebGLRenderingContext, array: number[]) {\r\n  const buffer = gl.createBuffer();\r\n  if (!buffer) {\r\n    throw new Error('Failed to create buffer.');\r\n  }\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(array), gl.STATIC_DRAW);\r\n  return buffer;\r\n}\r\n\r\nfunction drawArrays(\r\n  gl: WebGLRenderingContext,\r\n  topology: Primitive[],\r\n  positionAttrib: number,\r\n  positionBuffer: WebGLBuffer,\r\n  colorAttrib: number,\r\n  colorBuffer: WebGLBuffer,\r\n  normalAttrib?: number,\r\n  normalBuffer?: WebGLBuffer,\r\n  texCoordAttrib?: number,\r\n  texCoordBuffer?: WebGLBuffer,\r\n) {\r\n  bindAttribute(gl, positionAttrib, positionBuffer, 3, gl.FLOAT);\r\n  bindAttribute(gl, colorAttrib, colorBuffer, 3, gl.FLOAT);\r\n  if (normalBuffer && typeof normalAttrib === 'number') {\r\n    bindAttribute(gl, normalAttrib, normalBuffer, 3, gl.FLOAT);\r\n  }\r\n  if (texCoordBuffer && typeof texCoordAttrib === 'number') {\r\n    bindAttribute(gl, texCoordAttrib, texCoordBuffer, 2, gl.FLOAT);\r\n  }\r\n  try {\r\n    for (const { mode, first, count } of topology) {\r\n      gl.drawArrays(mode, first, count);\r\n    }\r\n  } finally {\r\n    if (texCoordBuffer && typeof texCoordAttrib === 'number') {\r\n      unbindAttribute(gl, texCoordAttrib);\r\n    }\r\n    if (normalBuffer && typeof normalAttrib === 'number') {\r\n      unbindAttribute(gl, normalAttrib);\r\n    }\r\n    unbindAttribute(gl, colorAttrib);\r\n    unbindAttribute(gl, positionAttrib);\r\n  }\r\n}\r\n\r\nfunction bindAttribute(gl: WebGLRenderingContext, attrib: number, buffer: WebGLBuffer, size: number, type: number) {\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n  gl.vertexAttribPointer(attrib, size, type, false, 0, 0);\r\n  gl.enableVertexAttribArray(attrib);\r\n}\r\n\r\nfunction unbindAttribute(gl: WebGLRenderingContext, attrib: number) {\r\n  gl.disableVertexAttribArray(attrib);\r\n}\r\n\r\nfunction makeProgramWithoutTextureMapping(gl: WebGLRenderingContext): NonTextureMappingProgramInfo {\r\n  // Uniform Names\r\n  const U_PROJECTION_MATRIX = 'uProjectionMatrix';\r\n  const U_VIEW_MATRIX = 'uViewMatrix';\r\n  const U_MODEL_MATRIX = 'uModelMatrix';\r\n  const U_NORMAL_MATRIX = 'uNormalMatrix';\r\n  // Attribute Names\r\n  const A_POSITION = 'aPosition';\r\n  const A_NORMAL = 'aNormal';\r\n  const A_COLOR = 'aColor';\r\n  // Varyings Names\r\n  const V_COLOR = 'vColor';\r\n  const V_NORMAL = 'vNormal';\r\n\r\n  const vsSource = glsl`\r\n    // Uniforms\r\n    uniform mat4 ${U_MODEL_MATRIX};\r\n    uniform mat4 ${U_NORMAL_MATRIX};\r\n    uniform mat4 ${U_VIEW_MATRIX};\r\n    uniform mat4 ${U_PROJECTION_MATRIX};\r\n    // Attributes\r\n    attribute vec4 ${A_POSITION};\r\n    attribute vec3 ${A_NORMAL};\r\n    attribute vec4 ${A_COLOR};\r\n    // Varyings\r\n    varying highp vec3 ${V_NORMAL};\r\n    varying lowp vec4 ${V_COLOR};\r\n    // Program\r\n    void main(void) {\r\n      ${V_NORMAL} = normalize(${U_VIEW_MATRIX} * ${U_NORMAL_MATRIX} * vec4(${A_NORMAL}, 0)).xyz;\r\n      ${V_COLOR} = ${A_COLOR};\r\n      gl_Position = ${U_PROJECTION_MATRIX} * ${U_VIEW_MATRIX} * ${U_MODEL_MATRIX} * ${A_POSITION};\r\n    }\r\n  `;\r\n\r\n  const fsSource = glsl`\r\n    // Varyings\r\n    varying highp vec3 ${V_NORMAL};\r\n    varying lowp vec4 ${V_COLOR};\r\n    // Program\r\n    void main(void) {\r\n      // Apply lighting\r\n      lowp vec3 Ca = vec3(0.3, 0.3, 0.3); // Ambient light color\r\n      lowp vec3 Cd = vec3(1, 1, 1); // Diffuse light color (white)\r\n      lowp vec3 Cs = vec3(1, 1, 1); // Specular light color (white)\r\n      highp vec3 u = normalize(vec3(0.85, 0.8, 0.75)); // Light direction\r\n      highp vec3 v = 2.0 * dot(u, ${V_NORMAL}) * ${V_NORMAL} - u; // Reflection direction\r\n      lowp float Id = max(0.0, (gl_FrontFacing ? +1.0 : -1.0) * dot(u, ${V_NORMAL})); // Diffuse intensity\r\n      lowp float Is = v[2] < 0.0 ? 0.0 : pow(v[2], 10.0); // Specular intensity\r\n      lowp vec4 C = vec4(Ca + Id * Cd + Is * Cs, 1.0); // Total incident light color\r\n      gl_FragColor = C * ${V_COLOR};\r\n    }\r\n  `;\r\n\r\n  const program = buildProgram(gl, vsSource, fsSource);\r\n\r\n  return {\r\n    program,\r\n    attribs: {\r\n      position: gl.getAttribLocation(program, A_POSITION),\r\n      normal: gl.getAttribLocation(program, A_NORMAL),\r\n      color: gl.getAttribLocation(program, A_COLOR),\r\n    },\r\n    uniforms: {\r\n      normalMatrix: getUniformLocation(gl, program, U_NORMAL_MATRIX),\r\n      modelMatrix: getUniformLocation(gl, program, U_MODEL_MATRIX),\r\n      viewMatrix: getUniformLocation(gl, program, U_VIEW_MATRIX),\r\n      projectionMatrix: getUniformLocation(gl, program, U_PROJECTION_MATRIX),\r\n    },\r\n  };\r\n}\r\n\r\nfunction makeProgramWithTextureMapping(gl: WebGLRenderingContext): TextureMappingProgramInfo {\r\n  // Uniform Names\r\n  const U_PROJECTION_MATRIX = 'uProjectionMatrix';\r\n  const U_VIEW_MATRIX = 'uViewMatrix';\r\n  const U_MODEL_MATRIX = 'uModelMatrix';\r\n  const U_NORMAL_MATRIX = 'uNormalMatrix';\r\n  const U_TEXTURE_MATRIX = 'uTextureMatrix';\r\n  const U_SAMPLER = 'uSampler';\r\n  // Attribute Names\r\n  const A_POSITION = 'aPosition';\r\n  const A_NORMAL = 'aNormal';\r\n  const A_COLOR = 'aColor';\r\n  const A_TEXTURE_COORDS = 'aTextureCoords';\r\n  // Varyings Names\r\n  const V_NORMAL = 'vNormal';\r\n  const V_COLOR = 'vColor';\r\n  const V_TEXTURE_COORDS = 'vTextureCoords';\r\n\r\n  const vsSource = glsl`\r\n    // Attributes\r\n    attribute vec4 ${A_POSITION};\r\n    attribute vec3 ${A_NORMAL};\r\n    attribute vec4 ${A_COLOR};\r\n    attribute vec2 ${A_TEXTURE_COORDS};\r\n    // Uniforms\r\n    uniform mat4 ${U_PROJECTION_MATRIX};\r\n    uniform mat4 ${U_VIEW_MATRIX};\r\n    uniform mat4 ${U_MODEL_MATRIX};\r\n    uniform mat4 ${U_NORMAL_MATRIX};\r\n    uniform mat3 ${U_TEXTURE_MATRIX};\r\n    // Varyings\r\n    varying highp vec3 ${V_NORMAL};\r\n    varying lowp vec4 ${V_COLOR};\r\n    varying highp vec3 ${V_TEXTURE_COORDS};\r\n    // Program\r\n    void main(void) {\r\n      gl_Position = ${U_PROJECTION_MATRIX} * ${U_VIEW_MATRIX} * ${U_MODEL_MATRIX} * ${A_POSITION};\r\n      ${V_NORMAL} = normalize(${U_VIEW_MATRIX} * ${U_NORMAL_MATRIX} * vec4(${A_NORMAL}, 0)).xyz;\r\n      ${V_COLOR} = ${A_COLOR};\r\n      ${V_TEXTURE_COORDS} = ${U_TEXTURE_MATRIX} * vec3(${A_TEXTURE_COORDS}, 1);\r\n    }\r\n  `;\r\n\r\n  const fsSource = glsl`\r\n    // Varyings\r\n    varying highp vec3 ${V_NORMAL};\r\n    varying lowp vec4 ${V_COLOR};\r\n    varying highp vec3 ${V_TEXTURE_COORDS};\r\n    // Uniforms\r\n    uniform sampler2D ${U_SAMPLER};\r\n    // Program\r\n    void main(void) {\r\n      // Apply lighting\r\n      lowp vec3 Ca = vec3(0.3, 0.3, 0.3); // Ambient light color\r\n      lowp vec3 Cd = vec3(1, 1, 1); // Diffuse light color (white)\r\n      lowp vec3 Cs = vec3(1, 1, 1); // Specular light color (white)\r\n      highp vec3 u = normalize(vec3(0.85, 0.8, 0.75)); // Light direction\r\n      highp vec3 v = 2.0 * dot(u, ${V_NORMAL}) * ${V_NORMAL} - u; // Reflection direction\r\n      lowp float Id = max(0.0, (gl_FrontFacing ? +1.0 : -1.0) * dot(u, ${V_NORMAL})); // Diffuse intensity\r\n      lowp float Is = v[2] < 0.0 ? 0.0 : pow(v[2], 10.0); // Specular intensity\r\n      lowp vec4 C = vec4(Ca + Id * Cd + Is * Cs, 1.0); // Total incident light color\r\n      gl_FragColor = C * ${V_COLOR} * texture2D(${U_SAMPLER}, ${V_TEXTURE_COORDS}.xy);\r\n    }\r\n  `;\r\n\r\n  const program = buildProgram(gl, vsSource, fsSource);\r\n\r\n  return {\r\n    program,\r\n    attribs: {\r\n      position: gl.getAttribLocation(program, A_POSITION),\r\n      color: gl.getAttribLocation(program, A_COLOR),\r\n      normal: gl.getAttribLocation(program, A_NORMAL),\r\n      textureCoords: gl.getAttribLocation(program, A_TEXTURE_COORDS),\r\n    },\r\n    uniforms: {\r\n      sampler: getUniformLocation(gl, program, U_SAMPLER),\r\n      textureMatrix: getUniformLocation(gl, program, U_TEXTURE_MATRIX),\r\n      normalMatrix: getUniformLocation(gl, program, U_NORMAL_MATRIX),\r\n      modelMatrix: getUniformLocation(gl, program, U_MODEL_MATRIX),\r\n      viewMatrix: getUniformLocation(gl, program, U_VIEW_MATRIX),\r\n      projectionMatrix: getUniformLocation(gl, program, U_PROJECTION_MATRIX),\r\n    },\r\n  };\r\n}\r\n\r\nfunction buildProgram(gl: WebGLRenderingContext, vsSource: string, fsSource: string) {\r\n  const program = gl.createProgram();\r\n\r\n  if (!program) {\r\n    throw new Error('Failed to create program.');\r\n  }\r\n\r\n  gl.attachShader(program, buildShader(gl, gl.VERTEX_SHADER, vsSource));\r\n  gl.attachShader(program, buildShader(gl, gl.FRAGMENT_SHADER, fsSource));\r\n  gl.linkProgram(program);\r\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n    const message = `Unable to initialize the shader program: ${gl.getProgramInfoLog(program)}`;\r\n    gl.deleteProgram(program);\r\n    throw new Error(message);\r\n  }\r\n\r\n  return program;\r\n}\r\n\r\nfunction buildShader(gl: WebGLRenderingContext, type: number, source: string) {\r\n  const shader = gl.createShader(type);\r\n  if (!shader) {\r\n    throw new Error('Failed to create shader.');\r\n  }\r\n  gl.shaderSource(shader, source);\r\n  gl.compileShader(shader);\r\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n    const message = `An error occurred compiling the shaders: ${gl.getShaderInfoLog(shader)}`;\r\n    gl.deleteShader(shader);\r\n    throw new Error(message);\r\n  }\r\n  return shader;\r\n}\r\n\r\nfunction getUniformLocation(gl: WebGLRenderingContext, program: WebGLProgram, name: string): WebGLUniformLocation {\r\n  return gl.getUniformLocation(program, name) || error(`No uniform named \"${name}\" was found.`);\r\n}\r\n\r\nfunction error<T>(message: string): T {\r\n  throw new Error(message);\r\n}\r\n\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport './index.scss'\r\n\r\n// You need bootstrap? $ yarn add bootstrap\r\n// See: https://create-react-app.dev/docs/adding-bootstrap\r\n// import 'bootstrap/dist/css/bootstrap.css';\r\n\r\n// Single-page application (SPA)\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want to Pre-render with react-snap\r\n// Step 1: install $ yarn add --dev react-snap\r\n// Step 2: add to package.json run script: \"postbuild\": \"react-snap\"\r\n// Step 3: Add to package.json: \"reactSnap\":{\"inlineCss\":true}\r\n// Step 3: replace to the script below.\r\n\r\n/*\r\nimport { hydrate, render } from 'react-dom'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nconst rootElement = document.getElementById('root')\r\nif (rootElement && rootElement!.hasChildNodes()) {\r\n  hydrate(<AppRouter />, rootElement)\r\n\r\n  // Precache - set to 'register' once you Pre-render\r\n  // If you want your app to work offline and load faster, you can change\r\n  // unregister() to register() below. Note this comes with some pitfalls.\r\n  // Learn more about service workers: http://bit.ly/CRA-PWA\r\n  serviceWorker.register()\r\n} else {\r\n  render(<AppRouter />, rootElement)\r\n}\r\n*/\r\n"],"sourceRoot":""}