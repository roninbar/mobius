{"version":3,"sources":["App.tsx","index.tsx"],"names":["glsl","COLORS","App","useState","torsion","setTorsion","programInfo","useRef","canvas","useEffect","gl","current","getContext","Error","vsSource","fsSource","program","createProgram","attachShader","makeShader","VERTEX_SHADER","FRAGMENT_SHADER","linkProgram","getProgramParameter","LINK_STATUS","message","getProgramInfoLog","deleteProgram","attribs","position","getAttribLocation","color","textureCoords","uniforms","sampler","getUniformLocation","modelViewMatrix","projectionMatrix","buildProgram","useProgram","uniformMatrix4fv","distance","matrix","mat4","create","translate","makeModelViewMatrix","width","height","fovy","near","far","perspective","makeProjectionMatrix","Math","PI","TEXTURE0","TEXTURE1","TEXTURE2","TEXTURE3","which","texture","loadTexture","activeTexture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_MAG_FILTER","LINEAR","TEXTURE_MIN_FILTER","LINEAR_MIPMAP_LINEAR","enable","DEPTH_TEST","depthFunc","LEQUAL","clearDepth","clearColor","CULL_FACE","afid","requestAnimationFrame","f","time","cancelAnimationFrame","makeStripBuffers","positions0","positions","colors0","colors","textureCoords0","count0","count","positions2","colors2","textureCoords2","count2","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","cullFace","BACK","uniform1i","render","FRONT","className","ref","positionAttrib","colorAttrib","texCoordAttrib","positionBuffer","colorBuffer","texCoordBuffer","bindAttributeToBuffer","FLOAT","drawArrays","TRIANGLE_STRIP","url","createTexture","internalFormat","RGBA","srcFormat","srcType","UNSIGNED_BYTE","pixel","Uint8Array","texImage2D","image","Image","onload","isPowerOf2","generateMipmap","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","src","value","attrib","buffer","size","type","bindBuffer","ARRAY_BUFFER","vertexAttribPointer","enableVertexAttribArray","base","h","i","s","t","tt","nTwists","r1","cos","r2","push","sin","Array","fill","k","length","makeStrip","makeBufferFromArray","createBuffer","bufferData","Float32Array","STATIC_DRAW","U_MODEL_VIEW_MATRIX","error","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.1228d405.chunk.js","sourcesContent":["/* eslint-disable one-var */\r\n/* eslint-disable no-bitwise */\r\n\r\nimport { mat4 } from 'gl-matrix';\r\nimport React, { MutableRefObject, useEffect, useRef, useState } from 'react';\r\nimport './App.scss';\r\n\r\ntype ProgramInfo = {\r\n  program: WebGLProgram;\r\n  attribs: {\r\n    color: number;\r\n    position: number;\r\n    textureCoords: number;\r\n  };\r\n  uniforms: {\r\n    sampler: WebGLSampler;\r\n    modelViewMatrix: WebGLUniformLocation;\r\n    projectionMatrix: WebGLUniformLocation;\r\n  };\r\n};\r\n\r\nconst glsl = ([s]: TemplateStringsArray): string => s;\r\n\r\nconst BLUE = [0, 0, 1];\r\nconst GREEN = [0, 1, 0];\r\nconst YELLOW = [1, 1, 0];\r\nconst RED = [1, 0, 0];\r\n\r\nconst COLORS = [BLUE, GREEN, YELLOW, RED];\r\n\r\nexport default function App() {\r\n\r\n  const [torsion, setTorsion] = useState(0);\r\n\r\n  const programInfo: MutableRefObject<ProgramInfo | null> = useRef(null);\r\n\r\n  const canvas = useRef<HTMLCanvasElement>(null);\r\n\r\n  // Initialize WebGL stuff and start the animation.\r\n  useEffect(() => {\r\n\r\n    const gl = canvas.current?.getContext('webgl');\r\n\r\n    if (!gl) {\r\n      throw new Error('Failed to get a WebGL context.');\r\n    }\r\n\r\n    programInfo.current = buildProgram(gl);\r\n\r\n    gl.useProgram(programInfo.current.program);\r\n    gl.uniformMatrix4fv(programInfo.current.uniforms.modelViewMatrix, false, makeModelViewMatrix(4));\r\n    gl.uniformMatrix4fv(programInfo.current.uniforms.projectionMatrix, false, makeProjectionMatrix(gl.canvas.width, gl.canvas.height, Math.PI / 5, 0.1, 100));\r\n\r\n    for (const which of [gl.TEXTURE0, gl.TEXTURE1, gl.TEXTURE2, gl.TEXTURE3]) {\r\n      const texture = loadTexture(gl, `/mobius/texture/hours${which - gl.TEXTURE0}.bmp`);\r\n      gl.activeTexture(which);\r\n      gl.bindTexture(gl.TEXTURE_2D, texture);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);\r\n    }\r\n\r\n\r\n    gl.enable(gl.DEPTH_TEST);\r\n    gl.depthFunc(gl.LEQUAL);\r\n    gl.clearDepth(1);\r\n    gl.clearColor(0, 0, 0, 1);\r\n\r\n    gl.enable(gl.CULL_FACE);\r\n\r\n    let afid = requestAnimationFrame(function f(time) {\r\n      setTorsion(time / 4000 * Math.PI);\r\n      afid = requestAnimationFrame(f);\r\n    });\r\n\r\n    return () => {\r\n      cancelAnimationFrame(afid);\r\n    };\r\n\r\n  }, []);\r\n\r\n  // Render one frame.\r\n  useEffect(() => {\r\n\r\n    const gl = canvas.current?.getContext('webgl');\r\n\r\n    if (!gl) {\r\n      throw new Error('Failed to get a WebGL context.');\r\n    }\r\n\r\n    const { positions: positions0, colors: colors0, textureCoords: textureCoords0, count: count0 } = makeStripBuffers(gl, torsion, 0);\r\n    const { positions: positions2, colors: colors2, textureCoords: textureCoords2, count: count2 } = makeStripBuffers(gl, torsion, 2);\r\n\r\n    if (!programInfo.current) {\r\n      throw new Error('No shader program!');\r\n    }\r\n\r\n    const { attribs } = programInfo.current;\r\n\r\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n    gl.cullFace(gl.BACK);\r\n    gl.uniform1i(programInfo.current.uniforms.sampler, 0);\r\n    render(gl, attribs.position, attribs.color, attribs.textureCoords, positions0, colors0, textureCoords0, count0 / 3);\r\n    gl.cullFace(gl.FRONT);\r\n    gl.uniform1i(programInfo.current.uniforms.sampler, 2);\r\n    render(gl, attribs.position, attribs.color, attribs.textureCoords, positions2, colors2, textureCoords2, count2 / 3);\r\n\r\n  }, [torsion]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <canvas width=\"640px\" height=\"640px\" ref={canvas} />\r\n        <p>\r\n          M&ouml;bius Clock\r\n        </p>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction error<T>(message: string): T {\r\n  throw new Error(message);\r\n}\r\n\r\nfunction render(\r\n  gl: WebGLRenderingContext,\r\n  positionAttrib: number,\r\n  colorAttrib: number,\r\n  texCoordAttrib: number,\r\n  positionBuffer: WebGLBuffer,\r\n  colorBuffer: WebGLBuffer,\r\n  texCoordBuffer: WebGLBuffer,\r\n  count: number,\r\n) {\r\n  bindAttributeToBuffer(gl, positionAttrib, positionBuffer, 3, gl.FLOAT);\r\n  bindAttributeToBuffer(gl, colorAttrib, colorBuffer, 3, gl.FLOAT);\r\n  bindAttributeToBuffer(gl, texCoordAttrib, texCoordBuffer, 2, gl.FLOAT);\r\n  gl.drawArrays(gl.TRIANGLE_STRIP, 0, count);\r\n}\r\n\r\n//\r\n// Initialize a texture and load an image.\r\n// When the image finished loading copy it into the texture.\r\n//\r\nfunction loadTexture(gl: WebGLRenderingContext, url: string) {\r\n  const texture = gl.createTexture();\r\n  gl.bindTexture(gl.TEXTURE_2D, texture);\r\n\r\n  // Because images have to be download over the internet\r\n  // they might take a moment until they are ready.\r\n  // Until then put a single pixel in the texture so we can\r\n  // use it immediately. When the image has finished downloading\r\n  // we'll update the texture with the contents of the image.\r\n  const level = 0;\r\n  const internalFormat = gl.RGBA;\r\n  const width = 1;\r\n  const height = 1;\r\n  const border = 0;\r\n  const srcFormat = gl.RGBA;\r\n  const srcType = gl.UNSIGNED_BYTE;\r\n  const pixel = new Uint8Array([0, 0, 255, 255]);  // opaque blue\r\n  gl.texImage2D(gl.TEXTURE_2D, level, internalFormat,\r\n    width, height, border, srcFormat, srcType,\r\n    pixel);\r\n\r\n  const image = new Image();\r\n  image.onload = () => {\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.texImage2D(gl.TEXTURE_2D, level, internalFormat,\r\n      srcFormat, srcType, image);\r\n\r\n    // WebGL1 has different requirements for power of 2 images\r\n    // vs non power of 2 images so check if the image is a\r\n    // power of 2 in both dimensions.\r\n    if (isPowerOf2(image.width) && isPowerOf2(image.height)) {\r\n      // Yes, it's a power of 2. Generate mips.\r\n      gl.generateMipmap(gl.TEXTURE_2D);\r\n    } else {\r\n      // No, it's not a power of 2. Turn of mips and set\r\n      // wrapping to clamp to edge\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n    }\r\n  };\r\n  image.src = url;\r\n\r\n  return texture;\r\n}\r\n\r\nfunction isPowerOf2(value: number) {\r\n  return (value & (value - 1)) === 0;\r\n}\r\n\r\nfunction bindAttributeToBuffer(gl: WebGLRenderingContext, attrib: number, buffer: WebGLBuffer, size: number, type: number) {\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n  gl.vertexAttribPointer(attrib, size, type, false, 0, 0);\r\n  gl.enableVertexAttribArray(attrib);\r\n}\r\n\r\nfunction makeStripBuffers(gl: WebGLRenderingContext, torsion: number, base: number) {\r\n  const { positions, colors, textureCoords } = makeStrip(torsion, base);\r\n  return {\r\n    positions: makeBufferFromArray(gl, positions),\r\n    colors: makeBufferFromArray(gl, colors),\r\n    textureCoords: makeBufferFromArray(gl, textureCoords),\r\n    count: positions.length,\r\n  };\r\n}\r\n\r\nfunction makeBufferFromArray(gl: WebGLRenderingContext, positions: number[]) {\r\n  const buffer = gl.createBuffer();\r\n  if (!buffer) {\r\n    throw new Error('Failed to create buffer.');\r\n  }\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);\r\n  return buffer;\r\n}\r\n\r\nfunction makeStrip(torsion: number, base: number) {\r\n  const textureCoords: number[] = [];\r\n  const positions: number[] = [];\r\n  const colors: number[] = [];\r\n  const nTwists = 3;\r\n  const R = 1.0; const h = 0.1;\r\n  for (let i = 0; i < 2; i++) {\r\n    for (let s = 0.0; s < 1.001; s += 0.033333) {\r\n      // Position\r\n      const t = (i + s) * Math.PI;\r\n      const tt = nTwists * 0.5 * t - torsion;\r\n      const r1 = R - h * Math.cos(tt);\r\n      const r2 = R + h * Math.cos(tt);\r\n      positions.push(r1 * Math.sin(t), r1 * Math.cos(t), -h * Math.sin(tt));\r\n      positions.push(r2 * Math.sin(t), r2 * Math.cos(t), +h * Math.sin(tt));\r\n      // Color\r\n      const color = new Array(3).fill(0);\r\n      for (let k = 0; k < 3; k++) {\r\n        color[k] = (1 - s) * COLORS[base + i][k] + s * COLORS[(base + i + 1) % COLORS.length][k];\r\n      }\r\n      colors.push(...color, ...color);\r\n      // Texture Coordinates\r\n      textureCoords.push(t / Math.PI, 1, t / Math.PI, 0);\r\n    }\r\n  }\r\n  return { positions, colors, textureCoords };\r\n}\r\n\r\nfunction buildProgram(gl: WebGLRenderingContext): ProgramInfo {\r\n  const U_MODEL_VIEW_MATRIX = 'uModelViewMatrix';\r\n  const U_PROJECTION_MATRIX = 'uProjectionMatrix';\r\n  const U_SAMPLER = 'uSampler';\r\n  const A_POSITION = 'aPosition';\r\n  const A_COLOR = 'aColor';\r\n  const A_TEXTURE_COORDS = 'aTextureCoords';\r\n\r\n  const vsSource = glsl`\r\n    // Attributes\r\n    attribute vec4 aPosition;\r\n    attribute vec4 aColor;\r\n    attribute vec2 aTextureCoords;\r\n    // Uniforms\r\n    uniform mat4 uModelViewMatrix;\r\n    uniform mat4 uProjectionMatrix;\r\n    // Varyings\r\n    varying lowp vec4 vColor;\r\n    varying highp vec2 vTextureCoords;\r\n    // Program\r\n    void main(void) {\r\n      gl_Position = uProjectionMatrix * uModelViewMatrix * aPosition;\r\n      vColor = aColor;\r\n      vTextureCoords = aTextureCoords;\r\n    }\r\n  `;\r\n\r\n  const fsSource = glsl`\r\n    // Varyings\r\n    varying lowp vec4 vColor;\r\n    varying highp vec2 vTextureCoords;\r\n    // Uniforms\r\n    uniform sampler2D uSampler;\r\n    // Program\r\n    void main(void) {\r\n      gl_FragColor = vColor * texture2D(uSampler, vTextureCoords);\r\n    }\r\n  `;\r\n\r\n  const program = gl.createProgram();\r\n\r\n  if (!program) {\r\n    throw new Error('Failed to create program.');\r\n  }\r\n\r\n  gl.attachShader(program, makeShader(gl, gl.VERTEX_SHADER, vsSource));\r\n  gl.attachShader(program, makeShader(gl, gl.FRAGMENT_SHADER, fsSource));\r\n  gl.linkProgram(program);\r\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n    const message = `Unable to initialize the shader program: ${gl.getProgramInfoLog(program)}`;\r\n    gl.deleteProgram(program);\r\n    throw new Error(message);\r\n  }\r\n\r\n  return {\r\n    program,\r\n    attribs: {\r\n      position: gl.getAttribLocation(program, A_POSITION),\r\n      color: gl.getAttribLocation(program, A_COLOR),\r\n      textureCoords: gl.getAttribLocation(program, A_TEXTURE_COORDS),\r\n    },\r\n    uniforms: {\r\n      sampler: getUniformLocation(gl, program, U_SAMPLER),\r\n      modelViewMatrix: getUniformLocation(gl, program, U_MODEL_VIEW_MATRIX),\r\n      projectionMatrix: getUniformLocation(gl, program, U_PROJECTION_MATRIX),\r\n    },\r\n  };\r\n}\r\n\r\nfunction getUniformLocation(gl: WebGLRenderingContext, program: WebGLProgram, U_MODEL_VIEW_MATRIX: string): WebGLUniformLocation {\r\n  return gl.getUniformLocation(program, U_MODEL_VIEW_MATRIX) || error(`No uniform named \"${U_MODEL_VIEW_MATRIX}\" was found.`);\r\n}\r\n\r\nfunction makeShader(gl: WebGLRenderingContext, type: number, source: string) {\r\n  const shader = gl.createShader(type);\r\n  if (!shader) {\r\n    throw new Error('Failed to create shader.');\r\n  }\r\n  gl.shaderSource(shader, source);\r\n  gl.compileShader(shader);\r\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n    const message = `An error occurred compiling the shaders: ${gl.getShaderInfoLog(shader)}`;\r\n    gl.deleteShader(shader);\r\n    throw new Error(message);\r\n  }\r\n  return shader;\r\n}\r\n\r\nfunction makeModelViewMatrix(distance: number) {\r\n  const matrix = mat4.create();\r\n  mat4.translate(matrix, matrix, [0, 0, -distance]);\r\n  return matrix;\r\n}\r\n\r\nfunction makeProjectionMatrix(width: number, height: number, fovy: number, near: number, far: number) {\r\n  const matrix = mat4.create();\r\n  mat4.perspective(matrix, fovy, width / height, near, far);\r\n  return matrix;\r\n}\r\n\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport './index.scss'\r\n\r\n// You need bootstrap? $ yarn add bootstrap\r\n// See: https://create-react-app.dev/docs/adding-bootstrap\r\n// import 'bootstrap/dist/css/bootstrap.css';\r\n\r\n// Single-page application (SPA)\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want to Pre-render with react-snap\r\n// Step 1: install $ yarn add --dev react-snap\r\n// Step 2: add to package.json run script: \"postbuild\": \"react-snap\"\r\n// Step 3: Add to package.json: \"reactSnap\":{\"inlineCss\":true}\r\n// Step 3: replace to the script below.\r\n\r\n/*\r\nimport { hydrate, render } from 'react-dom'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nconst rootElement = document.getElementById('root')\r\nif (rootElement && rootElement!.hasChildNodes()) {\r\n  hydrate(<AppRouter />, rootElement)\r\n\r\n  // Precache - set to 'register' once you Pre-render\r\n  // If you want your app to work offline and load faster, you can change\r\n  // unregister() to register() below. Note this comes with some pitfalls.\r\n  // Learn more about service workers: http://bit.ly/CRA-PWA\r\n  serviceWorker.register()\r\n} else {\r\n  render(<AppRouter />, rootElement)\r\n}\r\n*/\r\n"],"sourceRoot":""}