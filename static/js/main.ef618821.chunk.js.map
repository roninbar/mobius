{"version":3,"sources":["App.tsx","index.tsx"],"names":["glsl","COLOR","App","canvas","useRef","useEffect","gl","current","getContext","Error","makeStripBuffers","positions0","positions","colors0","colors","count0","count","positions2","colors2","count2","program","vsSource","fsSource","createProgram","attachShader","makeShader","VERTEX_SHADER","FRAGMENT_SHADER","linkProgram","getProgramParameter","LINK_STATUS","message","getProgramInfoLog","deleteProgram","buildProgram","useProgram","uniformMatrix4fv","getUniformLocation","distance","matrix","mat4","create","translate","makeModelViewMatrix","width","height","fovy","near","far","perspective","makeProjectionMatrix","Math","PI","enable","DEPTH_TEST","depthFunc","LEQUAL","clearDepth","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","CULL_FACE","cullFace","BACK","render","FRONT","className","ref","bindBuffer","ARRAY_BUFFER","vertexAttribPointer","getAttribLocation","FLOAT","enableVertexAttribArray","drawArrays","TRIANGLE_STRIP","base","h","i","s","t","tt","nTwists","ct","cos","st","sin","ctt","stt","r1","r2","z1","z2","push","color","Array","fill","k","length","makeStrip","positionBuffer","createBuffer","bufferData","Float32Array","STATIC_DRAW","colorBuffer","type","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.ef618821.chunk.js","sourcesContent":["/* eslint-disable one-var */\r\n/* eslint-disable no-bitwise */\r\n\r\nimport { mat4 } from 'gl-matrix';\r\nimport React, { useEffect, useRef } from 'react';\r\nimport './App.scss';\r\n\r\nconst glsl = ([s]: TemplateStringsArray): string => s;\r\n\r\nconst BLUE = [0, 0, 1];\r\nconst GREEN = [0, 1, 0];\r\nconst YELLOW = [1, 1, 0];\r\nconst RED = [1, 0, 0];\r\n\r\nconst COLOR = [BLUE, GREEN, YELLOW, RED];\r\n\r\nexport default function App() {\r\n\r\n  const canvas = useRef<HTMLCanvasElement>(null);\r\n\r\n  useEffect(() => {\r\n    const gl = canvas.current?.getContext('webgl');\r\n\r\n    if (!gl) {\r\n      throw new Error('Failed to get a WebGL context.');\r\n    }\r\n\r\n    const { positions: positions0, colors: colors0, count: count0 } = makeStripBuffers(gl, 0);\r\n    const { positions: positions2, colors: colors2, count: count2 } = makeStripBuffers(gl, 2);\r\n\r\n    const program = buildProgram(\r\n      gl,\r\n      glsl`\r\n        attribute vec4 aVertexPosition;\r\n        attribute vec4 aVertexColor;\r\n        uniform mat4 uModelViewMatrix;\r\n        uniform mat4 uProjectionMatrix;\r\n        varying lowp vec4 vColor;\r\n        void main(void) {\r\n          gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPosition;\r\n          vColor = aVertexColor;\r\n        }\r\n      `,\r\n      glsl`\r\n        varying lowp vec4 vColor;\r\n        void main(void) {\r\n          gl_FragColor = vColor;\r\n        }\r\n      `,\r\n    );\r\n\r\n    gl.useProgram(program);\r\n    gl.uniformMatrix4fv(gl.getUniformLocation(program, 'uModelViewMatrix'), false, makeModelViewMatrix(4));\r\n    gl.uniformMatrix4fv(gl.getUniformLocation(program, 'uProjectionMatrix'), false, makeProjectionMatrix(gl.canvas.width, gl.canvas.height, Math.PI / 5, 0.1, 100));\r\n\r\n    gl.enable(gl.DEPTH_TEST);\r\n    gl.depthFunc(gl.LEQUAL);\r\n    gl.clearDepth(1);\r\n    gl.clearColor(0, 0, 0, 1);\r\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n    gl.enable(gl.CULL_FACE);\r\n    gl.cullFace(gl.BACK);\r\n    render(gl, program, count0 / 3, positions0, colors0);\r\n    gl.cullFace(gl.FRONT);\r\n    render(gl, program, count2 / 3, positions2, colors2);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <canvas width=\"640px\" height=\"640px\" ref={canvas} />\r\n        <p>\r\n          M&ouml;bius Clock\r\n        </p>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction render(gl: WebGLRenderingContext, program: WebGLProgram, count: number, positions0: WebGLBuffer, colors0: WebGLBuffer) {\r\n  // Bind the position buffer to attribute aVertexPosition.\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, positions0);\r\n  gl.vertexAttribPointer(gl.getAttribLocation(program, 'aVertexPosition'), 3, gl.FLOAT, false, 0, 0);\r\n  gl.enableVertexAttribArray(gl.getAttribLocation(program, 'aVertexPosition'));\r\n\r\n  // Bind the color buffer to attribute aVertexColor.\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, colors0);\r\n  gl.vertexAttribPointer(gl.getAttribLocation(program, 'aVertexColor'), 3, gl.FLOAT, false, 0, 0);\r\n  gl.enableVertexAttribArray(gl.getAttribLocation(program, 'aVertexColor'));\r\n\r\n  gl.drawArrays(gl.TRIANGLE_STRIP, 0, count);\r\n}\r\n\r\nfunction makeStripBuffers(gl: WebGLRenderingContext, base: number) {\r\n  const { positions, colors } = makeStrip(base);\r\n\r\n  const positionBuffer = gl.createBuffer();\r\n  if (!positionBuffer) {\r\n    throw new Error('Failed to create position buffer.');\r\n  }\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);\r\n\r\n  const colorBuffer = gl.createBuffer();\r\n  if (!colorBuffer) {\r\n    throw new Error('Failed to create color buffer.');\r\n  }\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);\r\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW);\r\n  \r\n  return { positions: positionBuffer, colors: colorBuffer, count: positions.length };\r\n}\r\n\r\nfunction makeStrip(base: number): { positions: number[], colors: number[] } {\r\n  const positions: number[] = [];\r\n  const colors: number[] = [];\r\n  const epsilon = 0.001;\r\n  const nTwists = 3;\r\n  const step = 1 / 30.0;\r\n  const R = 1.0; const h = 0.1;\r\n  const torsion = 0;\r\n  for (let i = 0; i < 2; i++) {\r\n    for (let s = 0.0; s < 1.0 + epsilon; s += step) {\r\n      const t = (i + s) * Math.PI;\r\n      const tt = nTwists * 0.5 * t - torsion;\r\n      const ct = Math.cos(t), st = Math.sin(t);\r\n      const ctt = Math.cos(tt), stt = Math.sin(tt);\r\n      const r1 = R - h * ctt;\r\n      const r2 = R + h * ctt;\r\n      const z1 = -h * stt;\r\n      const z2 = +h * stt;\r\n      positions.push(r2 * st, r2 * ct, z2);\r\n      positions.push(r1 * st, r1 * ct, z1);\r\n      const color = new Array(3).fill(0);\r\n      for (let k = 0; k < 3; k++) {\r\n        color[k] = (1 - s) * COLOR[base + i][k] + s * COLOR[(base + i + 1) % COLOR.length][k];\r\n      }\r\n      colors.push(...color, ...color);\r\n    }\r\n  }\r\n  return { positions, colors };\r\n}\r\n\r\nfunction buildProgram(gl: WebGLRenderingContext, vsSource: string, fsSource: string) {\r\n  const program = gl.createProgram();\r\n  if (!program) {\r\n    throw new Error('Failed to create program.');\r\n  }\r\n  gl.attachShader(program, makeShader(gl, gl.VERTEX_SHADER, vsSource));\r\n  gl.attachShader(program, makeShader(gl, gl.FRAGMENT_SHADER, fsSource));\r\n  gl.linkProgram(program);\r\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n    const message = `Unable to initialize the shader program: ${gl.getProgramInfoLog(program)}`;\r\n    gl.deleteProgram(program);\r\n    throw new Error(message);\r\n  }\r\n  return program;\r\n}\r\n\r\nfunction makeShader(gl: WebGLRenderingContext, type: number, source: string) {\r\n  const shader = gl.createShader(type);\r\n  if (!shader) {\r\n    throw new Error('Failed to create shader.');\r\n  }\r\n  gl.shaderSource(shader, source);\r\n  gl.compileShader(shader);\r\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n    const message = `An error occurred compiling the shaders: ${gl.getShaderInfoLog(shader)}`;\r\n    gl.deleteShader(shader);\r\n    throw new Error(message);\r\n  }\r\n  return shader;\r\n}\r\n\r\nfunction makeModelViewMatrix(distance: number) {\r\n  const matrix = mat4.create();\r\n  mat4.translate(matrix, matrix, [0, 0, -distance]);\r\n  return matrix;\r\n}\r\n\r\nfunction makeProjectionMatrix(width: number, height: number, fovy: number, near: number, far: number) {\r\n  const matrix = mat4.create();\r\n  mat4.perspective(matrix, fovy, width / height, near, far);\r\n  return matrix;\r\n}\r\n\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport './index.scss'\r\n\r\n// You need bootstrap? $ yarn add bootstrap\r\n// See: https://create-react-app.dev/docs/adding-bootstrap\r\n// import 'bootstrap/dist/css/bootstrap.css';\r\n\r\n// Single-page application (SPA)\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want to Pre-render with react-snap\r\n// Step 1: install $ yarn add --dev react-snap\r\n// Step 2: add to package.json run script: \"postbuild\": \"react-snap\"\r\n// Step 3: Add to package.json: \"reactSnap\":{\"inlineCss\":true}\r\n// Step 3: replace to the script below.\r\n\r\n/*\r\nimport { hydrate, render } from 'react-dom'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nconst rootElement = document.getElementById('root')\r\nif (rootElement && rootElement!.hasChildNodes()) {\r\n  hydrate(<AppRouter />, rootElement)\r\n\r\n  // Precache - set to 'register' once you Pre-render\r\n  // If you want your app to work offline and load faster, you can change\r\n  // unregister() to register() below. Note this comes with some pitfalls.\r\n  // Learn more about service workers: http://bit.ly/CRA-PWA\r\n  serviceWorker.register()\r\n} else {\r\n  render(<AppRouter />, rootElement)\r\n}\r\n*/\r\n"],"sourceRoot":""}