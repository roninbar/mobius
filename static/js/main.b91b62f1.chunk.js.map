{"version":3,"sources":["App.tsx","index.tsx"],"names":["glsl","App","canvas","useRef","useEffect","gl","current","getContext","Error","positions","step","Math","PI","h","i","s","t","tt","nTwists","ct","cos","st","sin","ctt","stt","r1","r2","z1","z2","push","makeStrip","buffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","program","vsSource","fsSource","createProgram","attachShader","makeShader","VERTEX_SHADER","FRAGMENT_SHADER","linkProgram","getProgramParameter","LINK_STATUS","message","getProgramInfoLog","deleteProgram","buildProgram","useProgram","uniformMatrix4fv","getUniformLocation","matrix","mat4","create","translate","makeModelViewMatrix","width","height","perspective","makeProjectionMatrix","vertexAttribPointer","getAttribLocation","FLOAT","enableVertexAttribArray","clearColor","clearDepth","enable","DEPTH_TEST","depthFunc","LEQUAL","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","drawArrays","TRIANGLE_STRIP","length","className","ref","href","target","rel","type","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b91b62f1.chunk.js","sourcesContent":["/* eslint-disable one-var */\r\n/* eslint-disable no-bitwise */\r\n\r\nimport { mat4 } from 'gl-matrix';\r\nimport React, { useEffect, useRef } from 'react';\r\nimport './App.scss';\r\n\r\nconst glsl = ([s]: TemplateStringsArray): string => s;\r\n\r\nexport default function App() {\r\n\r\n  const canvas = useRef<HTMLCanvasElement>(null);\r\n\r\n  useEffect(() => {\r\n    const gl = canvas.current?.getContext('webgl');\r\n\r\n    if (!gl) {\r\n      throw new Error('Failed to get a WebGL context.');\r\n    }\r\n\r\n    const positions = makeStrip();\r\n\r\n    const buffer = gl.createBuffer();\r\n    if (!buffer) {\r\n      throw new Error('Failed to create buffer.');\r\n    }\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);\r\n\r\n    const program = buildProgram(\r\n      gl,\r\n      glsl`\r\n        attribute vec4 aVertexPosition;\r\n        uniform mat4 uModelViewMatrix;\r\n        uniform mat4 uProjectionMatrix;\r\n        void main() {\r\n          gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPosition;\r\n        }\r\n      `,\r\n      glsl`\r\n        void main() {\r\n          gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\r\n        }\r\n      `,\r\n    );\r\n\r\n    gl.useProgram(program);\r\n    gl.uniformMatrix4fv(gl.getUniformLocation(program, 'uModelViewMatrix'), false, makeModelViewMatrix());\r\n    gl.uniformMatrix4fv(gl.getUniformLocation(program, 'uProjectionMatrix'), false, makeProjectionMatrix(gl.canvas.width, gl.canvas.height));\r\n    gl.vertexAttribPointer(gl.getAttribLocation(program, 'aVertexPosition'), 3, gl.FLOAT, false, 0, 0);\r\n    gl.enableVertexAttribArray(gl.getAttribLocation(program, 'aVertexPosition'));\r\n\r\n    gl.clearColor(0, 0, 0, 1);\r\n    gl.clearDepth(1.0);\r\n    gl.enable(gl.DEPTH_TEST);\r\n    gl.depthFunc(gl.LEQUAL);\r\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, positions.length / 3);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <canvas width=\"320px\" height=\"320px\" ref={canvas} />\r\n        <p>\r\n          Edit <code>src/App.tsx</code> and save to reload.\r\n        </p>\r\n        <a className=\"App-link\" href=\"https://github.com/EliEladElrom/react-tutorials\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          Eli Elad Elrom - React Tutorials\r\n        </a>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction makeStrip(): number[] {\r\n  const positions: number[] = [];\r\n  const epsilon = 0.001;\r\n  const nTwists = 3;\r\n  const step = Math.PI / 30.0;\r\n  const R = 1.0; const h = 0.1;\r\n  const torsion = 0;\r\n  for (let i = 0; i < 2; i++) {\r\n    for (let s = 0.0; s < 1.0 + epsilon; s += step / Math.PI) {\r\n      const t = (i + s) * Math.PI;\r\n      const tt = nTwists * 0.5 * t - torsion;\r\n      const ct = Math.cos(t), st = Math.sin(t);\r\n      const ctt = Math.cos(tt), stt = Math.sin(tt);\r\n      const r1 = R - h * ctt;\r\n      const r2 = R + h * ctt;\r\n      const z1 = -h * stt;\r\n      const z2 = +h * stt;\r\n      positions.push(r2 * st, r2 * ct, z2);\r\n      positions.push(r1 * st, r1 * ct, z1);\r\n    }\r\n  }\r\n  return positions;\r\n}\r\n\r\nfunction buildProgram(gl: WebGLRenderingContext, vsSource: string, fsSource: string) {\r\n  const program = gl.createProgram();\r\n  if (!program) {\r\n    throw new Error('Failed to create program.');\r\n  }\r\n  gl.attachShader(program, makeShader(gl, gl.VERTEX_SHADER, vsSource));\r\n  gl.attachShader(program, makeShader(gl, gl.FRAGMENT_SHADER, fsSource));\r\n  gl.linkProgram(program);\r\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n    const message = `Unable to initialize the shader program: ${gl.getProgramInfoLog(program)}`;\r\n    gl.deleteProgram(program);\r\n    throw new Error(message);\r\n  }\r\n  return program;\r\n}\r\n\r\nfunction makeShader(gl: WebGLRenderingContext, type: number, source: string) {\r\n  const shader = gl.createShader(type);\r\n  if (!shader) {\r\n    throw new Error('Failed to create shader.');\r\n  }\r\n  gl.shaderSource(shader, source);\r\n  gl.compileShader(shader);\r\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n    const message = `An error occurred compiling the shaders: ${gl.getShaderInfoLog(shader)}`;\r\n    gl.deleteShader(shader);\r\n    throw new Error(message);\r\n  }\r\n  return shader;\r\n}\r\n\r\nfunction makeModelViewMatrix() {\r\n  const matrix = mat4.create();\r\n  mat4.translate(matrix, matrix, [0, 0, -4]);\r\n  return matrix;\r\n}\r\n\r\nfunction makeProjectionMatrix(width: number, height: number) {\r\n  const matrix = mat4.create();\r\n  mat4.perspective(matrix, Math.PI / 4, width / height, 0.1, 100);\r\n  return matrix;\r\n}\r\n\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport './index.scss'\r\n\r\n// You need bootstrap? $ yarn add bootstrap\r\n// See: https://create-react-app.dev/docs/adding-bootstrap\r\n// import 'bootstrap/dist/css/bootstrap.css';\r\n\r\n// Single-page application (SPA)\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want to Pre-render with react-snap\r\n// Step 1: install $ yarn add --dev react-snap\r\n// Step 2: add to package.json run script: \"postbuild\": \"react-snap\"\r\n// Step 3: Add to package.json: \"reactSnap\":{\"inlineCss\":true}\r\n// Step 3: replace to the script below.\r\n\r\n/*\r\nimport { hydrate, render } from 'react-dom'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nconst rootElement = document.getElementById('root')\r\nif (rootElement && rootElement!.hasChildNodes()) {\r\n  hydrate(<AppRouter />, rootElement)\r\n\r\n  // Precache - set to 'register' once you Pre-render\r\n  // If you want your app to work offline and load faster, you can change\r\n  // unregister() to register() below. Note this comes with some pitfalls.\r\n  // Learn more about service workers: http://bit.ly/CRA-PWA\r\n  serviceWorker.register()\r\n} else {\r\n  render(<AppRouter />, rootElement)\r\n}\r\n*/\r\n"],"sourceRoot":""}