{"version":3,"sources":["App.tsx","index.tsx"],"names":["glsl","pieces","args","slice","reduce","a","b","i","COLORS","App","useState","theta","setTheta","programWithTextureMapping","useRef","programWithoutTextureMapping","canvas","useEffect","gl","current","getContext","Error","vsSource","fsSource","program","buildProgram","attribs","position","getAttribLocation","color","textureCoords","uniforms","sampler","getUniformLocation","modelViewMatrix","projectionMatrix","makeProgramWithTextureMapping","makeProgramWithoutTextureMapping","TEXTURE0","TEXTURE1","TEXTURE2","TEXTURE3","which","loadTexture","process","enable","DEPTH_TEST","depthFunc","LEQUAL","clearDepth","clearColor","CULL_FACE","cullFace","BACK","afid","requestAnimationFrame","f","time","Math","PI","cancelAnimationFrame","texProgram","texAttribs","texUniforms","nonTexProgram","nonTexAttribs","nonTexUniforms","width","height","fovy","near","far","matrix","mat4","create","perspective","makeProjectionMatrix","distance","translate","makeModelViewMatrix","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","vertexCounts","positionBuffers","colorBuffers","textureCoordBuffers","makeStripBuffers","vertexCount","positions","colors","useProgram","uniformMatrix4fv","uniform1i","bindAttributeToBuffer","FLOAT","drawArrays","TRIANGLE_STRIP","unbindAttribute","forEach","buffer","deleteBuffer","drawHand","length","angle","makeFloatBufferFromArray","makeHandBuffers","positionBuffer","colorBuffer","rotateZ","className","ref","url","texture","createTexture","activeTexture","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","Uint8Array","image","Image","onload","isPowerOf2","generateMipmap","texParameteri","TEXTURE_MAG_FILTER","LINEAR","TEXTURE_MIN_FILTER","LINEAR_MIPMAP_LINEAR","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","src","value","attrib","size","type","bindBuffer","ARRAY_BUFFER","vertexAttribPointer","enableVertexAttribArray","disableVertexAttribArray","torsion","piece","h","s","t","tt","nTwists","r1","cos","r2","push","sin","k","makeStrip","createBuffer","bufferData","Float32Array","STATIC_DRAW","createProgram","attachShader","makeShader","VERTEX_SHADER","FRAGMENT_SHADER","linkProgram","getProgramParameter","LINK_STATUS","message","getProgramInfoLog","deleteProgram","name","error","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c00b78d7.chunk.js","sourcesContent":["/* eslint-disable one-var */\r\n/* eslint-disable no-bitwise */\r\n\r\nimport { mat4 } from 'gl-matrix';\r\nimport React, { MutableRefObject, useEffect, useRef, useState } from 'react';\r\nimport './App.scss';\r\n\r\ninterface ProgramInfo {\r\n  program: WebGLProgram;\r\n  attribs: {\r\n    color: number;\r\n    position: number;\r\n  };\r\n  uniforms: {\r\n    modelViewMatrix: WebGLUniformLocation;\r\n    projectionMatrix: WebGLUniformLocation;\r\n  };\r\n}\r\n\r\ntype TextureMappingProgramInfo = ProgramInfo & {\r\n  attribs: {\r\n    textureCoords: number;\r\n  };\r\n  uniforms: {\r\n    sampler: WebGLSampler;\r\n  };\r\n};\r\n\r\nconst glsl = (pieces: TemplateStringsArray, ...args: string[]) => pieces.slice(1).reduce((a, b, i) => a + args[i] + b, pieces[0]);\r\n\r\nconst BLUE = [0, 0, 1];\r\nconst GREEN = [0, 1, 0];\r\nconst YELLOW = [1, 1, 0];\r\nconst RED = [1, 0, 0];\r\n\r\nconst COLORS = [BLUE, GREEN, YELLOW, RED];\r\n\r\nexport default function App() {\r\n\r\n  const [theta, setTheta] = useState(0);\r\n\r\n  const programWithTextureMapping: MutableRefObject<TextureMappingProgramInfo | null> = useRef(null);\r\n  const programWithoutTextureMapping: MutableRefObject<ProgramInfo | null> = useRef(null);\r\n\r\n  const canvas = useRef<HTMLCanvasElement>(null);\r\n\r\n  // Initialize WebGL stuff and start the animation.\r\n  useEffect(() => {\r\n\r\n    const gl = canvas.current?.getContext('webgl');\r\n\r\n    if (!gl) {\r\n      throw new Error('Failed to get a WebGL context.');\r\n    }\r\n\r\n    programWithTextureMapping.current = makeProgramWithTextureMapping(gl);\r\n    programWithoutTextureMapping.current = makeProgramWithoutTextureMapping(gl);\r\n\r\n    for (const which of [gl.TEXTURE0, gl.TEXTURE1, gl.TEXTURE2, gl.TEXTURE3]) {\r\n      loadTexture(gl, which, `${process.env.PUBLIC_URL}/texture/hours${which - gl.TEXTURE0}.bmp`);\r\n    }\r\n\r\n    gl.enable(gl.DEPTH_TEST);\r\n    gl.depthFunc(gl.LEQUAL);\r\n    gl.clearDepth(1);\r\n    gl.clearColor(0, 0, 0, 1);\r\n    gl.enable(gl.CULL_FACE);\r\n    gl.cullFace(gl.BACK);\r\n\r\n    let afid = requestAnimationFrame(function f(time) {\r\n      setTheta(time / 60000 * Math.PI);\r\n      afid = requestAnimationFrame(f);\r\n    });\r\n\r\n    return () => {\r\n      cancelAnimationFrame(afid);\r\n    };\r\n\r\n  }, []);\r\n\r\n  // Render one frame.\r\n  useEffect(() => {\r\n\r\n    const gl = canvas.current?.getContext('webgl');\r\n\r\n    if (!gl) {\r\n      throw new Error('Failed to get a WebGL context.');\r\n    }\r\n\r\n    if (!programWithTextureMapping.current || !programWithoutTextureMapping.current) {\r\n      throw new Error('Missing shader program!');\r\n    }\r\n\r\n    const { program: texProgram, attribs: texAttribs, uniforms: texUniforms } = programWithTextureMapping.current;\r\n    const { program: nonTexProgram, attribs: nonTexAttribs, uniforms: nonTexUniforms } = programWithoutTextureMapping.current;\r\n\r\n    const projectionMatrix = makeProjectionMatrix(gl.canvas.width, gl.canvas.height, Math.PI / 5, 0.1, 100);\r\n    const modelViewMatrix = makeModelViewMatrix(4);\r\n\r\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n    const vertexCounts: number[] = [];\r\n    const positionBuffers: WebGLBuffer[] = [];\r\n    const colorBuffers: WebGLBuffer[] = [];\r\n    const textureCoordBuffers: WebGLBuffer[] = [];\r\n\r\n    for (let i = 0; i < 4; i++) (\r\n      {\r\n        vertexCount: vertexCounts[i],\r\n        positions: positionBuffers[i],\r\n        colors: colorBuffers[i],\r\n        textureCoords: textureCoordBuffers[i],\r\n      } = makeStripBuffers(gl, theta, i)\r\n    );\r\n\r\n    try {\r\n      gl.useProgram(texProgram);\r\n      gl.uniformMatrix4fv(programWithTextureMapping.current.uniforms.modelViewMatrix, false, modelViewMatrix);\r\n      gl.uniformMatrix4fv(programWithTextureMapping.current.uniforms.projectionMatrix, false, projectionMatrix);\r\n      for (let i = 0; i < 4; i++) {\r\n        gl.uniform1i(texUniforms.sampler, i);\r\n        bindAttributeToBuffer(gl, texAttribs.position, positionBuffers[i], 3, gl.FLOAT);\r\n        bindAttributeToBuffer(gl, texAttribs.color, colorBuffers[i], 3, gl.FLOAT);\r\n        bindAttributeToBuffer(gl, texAttribs.textureCoords, textureCoordBuffers[i], 2, gl.FLOAT);\r\n        try {\r\n          gl.drawArrays(gl.TRIANGLE_STRIP, 0, vertexCounts[i]);\r\n        } finally {\r\n          unbindAttribute(gl, texAttribs.textureCoords);\r\n          unbindAttribute(gl, texAttribs.color);\r\n          unbindAttribute(gl, texAttribs.position);\r\n        }\r\n      }\r\n    } finally {\r\n      [...positionBuffers, ...colorBuffers, ...textureCoordBuffers].forEach((buffer) => gl.deleteBuffer(buffer));\r\n    }\r\n\r\n    const drawHand = function (width: number, length: number, angle: number) {\r\n      const { vertexCount, positions: positionBuffer, colors: colorBuffer } = makeHandBuffers(gl, width, length);\r\n      try {\r\n        gl.useProgram(nonTexProgram);\r\n        gl.uniformMatrix4fv(nonTexUniforms.modelViewMatrix, false, mat4.rotateZ(mat4.create(), modelViewMatrix, -angle));\r\n        gl.uniformMatrix4fv(nonTexUniforms.projectionMatrix, false, projectionMatrix);\r\n        bindAttributeToBuffer(gl, nonTexAttribs.position, positionBuffer, 3, gl.FLOAT);\r\n        bindAttributeToBuffer(gl, nonTexAttribs.color, colorBuffer, 3, gl.FLOAT);\r\n        try {\r\n          gl.drawArrays(gl.TRIANGLE_STRIP, 0, vertexCount);\r\n        } finally {\r\n          unbindAttribute(gl, nonTexAttribs.color);\r\n          unbindAttribute(gl, nonTexAttribs.position);\r\n        }\r\n      } finally {\r\n        gl.deleteBuffer(colorBuffer);\r\n        gl.deleteBuffer(positionBuffer);\r\n      }\r\n    };\r\n\r\n    drawHand(0.02, 0.6, theta); // Hours\r\n    drawHand(0.02, 0.8, 60 * theta); // Minutes\r\n\r\n  }, [theta]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <canvas width=\"640px\" height=\"640px\" ref={canvas} />\r\n        <p>M&ouml;bius Clock</p>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction error<T>(message: string): T {\r\n  throw new Error(message);\r\n}\r\n\r\n//\r\n// Initialize a texture and load an image.\r\n// When the image finished loading copy it into the texture.\r\n//\r\nfunction loadTexture(gl: WebGLRenderingContext, which: number, url: string) {\r\n  const texture = gl.createTexture();\r\n\r\n  gl.activeTexture(which);\r\n  gl.bindTexture(gl.TEXTURE_2D, texture);\r\n\r\n  // Because images have to be downloaded over the internet\r\n  // they might take a moment until they are ready.\r\n  // Until then put a single pixel in the texture so we can\r\n  // use it immediately. When the image has finished downloading\r\n  // we'll update the texture with the contents of the image.\r\n  gl.texImage2D(\r\n    gl.TEXTURE_2D,\r\n    0, // level\r\n    gl.RGBA,\r\n    1, // width\r\n    1, // height\r\n    0, // border\r\n    gl.RGBA,\r\n    gl.UNSIGNED_BYTE,\r\n    new Uint8Array([255, 255, 255, 255]), // opaque white\r\n  );\r\n\r\n  const image = new Image();\r\n  image.onload = () => {\r\n    gl.activeTexture(which);\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\r\n\r\n    // WebGL1 has different requirements for power of 2 images\r\n    // vs non power of 2 images so check if the image is a\r\n    // power of 2 in both dimensions.\r\n    if (isPowerOf2(image.width) && isPowerOf2(image.height)) {\r\n      // Yes, it's a power of 2. Generate mips.\r\n      gl.generateMipmap(gl.TEXTURE_2D);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);\r\n    } else {\r\n      // No, it's not a power of 2. Turn off mips and set\r\n      // wrapping to clamp to edge.\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n    }\r\n  };\r\n  image.src = url;\r\n\r\n  return texture;\r\n}\r\n\r\nfunction isPowerOf2(value: number) {\r\n  return (value & (value - 1)) === 0;\r\n}\r\n\r\nfunction bindAttributeToBuffer(gl: WebGLRenderingContext, attrib: number, buffer: WebGLBuffer, size: number, type: number) {\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n  gl.vertexAttribPointer(attrib, size, type, false, 0, 0);\r\n  gl.enableVertexAttribArray(attrib);\r\n}\r\n\r\nfunction unbindAttribute(gl: WebGLRenderingContext, attrib: number) {\r\n  gl.disableVertexAttribArray(attrib);\r\n}\r\n\r\nfunction makeHandBuffers(gl: WebGLRenderingContext, width: number, length: number) {\r\n  return {\r\n    vertexCount: 4,\r\n    positions: makeFloatBufferFromArray(gl, [\r\n      -width, 0, 0,\r\n      +width, 0, 0,\r\n      -width, length, 0,\r\n      +width, length, 0,\r\n    ]),\r\n    colors: makeFloatBufferFromArray(gl, [\r\n      0.75, 0.75, 0.75,\r\n      0.75, 0.75, 0.75,\r\n      0.75, 0.75, 0.75,\r\n      0.75, 0.75, 0.75,\r\n    ]),\r\n  };\r\n}\r\n\r\nfunction makeStripBuffers(gl: WebGLRenderingContext, torsion: number, piece: number) {\r\n  const { positions, colors, textureCoords } = makeStrip(torsion, piece);\r\n  return {\r\n    vertexCount: positions.length / 3,\r\n    positions: makeFloatBufferFromArray(gl, positions),\r\n    colors: makeFloatBufferFromArray(gl, colors),\r\n    textureCoords: makeFloatBufferFromArray(gl, textureCoords),\r\n  };\r\n}\r\n\r\nfunction makeFloatBufferFromArray(gl: WebGLRenderingContext, positions: number[]) {\r\n  const buffer = gl.createBuffer();\r\n  if (!buffer) {\r\n    throw new Error('Failed to create buffer.');\r\n  }\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);\r\n  return buffer;\r\n}\r\n\r\nfunction makeStrip(theta: number, piece: number) {\r\n  const textureCoords: number[] = [];\r\n  const positions: number[] = [];\r\n  const colors: number[] = [];\r\n  const nTwists = 3;\r\n  const R = 1.0;\r\n  const h = 0.1;\r\n  for (let s = 0.0; s < 1.001; s += 0.033333) {\r\n    const t = (piece + s) * Math.PI;\r\n    const tt = nTwists * 0.5 * (t - theta);\r\n    // Position\r\n    const r1 = R - h * Math.cos(tt);\r\n    const r2 = R + h * Math.cos(tt);\r\n    positions.push(r1 * Math.sin(t), r1 * Math.cos(t), -h * Math.sin(tt));\r\n    positions.push(r2 * Math.sin(t), r2 * Math.cos(t), +h * Math.sin(tt));\r\n    // Color\r\n    const color = [0, 0, 0];\r\n    for (let k = 0; k < 3; k++) {\r\n      color[k] = (1 - s) * COLORS[piece][k] + s * COLORS[(piece + 1) % COLORS.length][k];\r\n    }\r\n    colors.push(...color, ...color);\r\n    // Texture Coordinates\r\n    textureCoords.push(s, 0, s, 1);\r\n  }\r\n  return { positions, colors, textureCoords };\r\n}\r\n\r\nfunction makeProgramWithoutTextureMapping(gl: WebGLRenderingContext) {\r\n  const U_MODEL_VIEW_MATRIX = 'uModelViewMatrix';\r\n  const U_PROJECTION_MATRIX = 'uProjectionMatrix';\r\n  const A_POSITION = 'aPosition';\r\n  const A_COLOR = 'aColor';\r\n  const V_COLOR = 'vColor';\r\n\r\n  const vsSource = glsl`\r\n    // Attributes\r\n    attribute vec4 ${A_POSITION};\r\n    attribute vec4 ${A_COLOR};\r\n    // Uniforms\r\n    uniform mat4 ${U_MODEL_VIEW_MATRIX};\r\n    uniform mat4 ${U_PROJECTION_MATRIX};\r\n    // Varyings\r\n    varying lowp vec4 ${V_COLOR};\r\n    // Program\r\n    void main(void) {\r\n      gl_Position = ${U_PROJECTION_MATRIX} * ${U_MODEL_VIEW_MATRIX} * ${A_POSITION};\r\n      ${V_COLOR} = ${A_COLOR};\r\n    }\r\n  `;\r\n\r\n  const fsSource = glsl`\r\n    // Varyings\r\n    varying lowp vec4 ${V_COLOR};\r\n    // Program\r\n    void main(void) {\r\n      gl_FragColor = ${V_COLOR};\r\n    }\r\n  `;\r\n\r\n  const program = buildProgram(gl, vsSource, fsSource);\r\n\r\n  return {\r\n    program,\r\n    attribs: {\r\n      position: gl.getAttribLocation(program, A_POSITION),\r\n      color: gl.getAttribLocation(program, A_COLOR),\r\n    },\r\n    uniforms: {\r\n      modelViewMatrix: getUniformLocation(gl, program, U_MODEL_VIEW_MATRIX),\r\n      projectionMatrix: getUniformLocation(gl, program, U_PROJECTION_MATRIX),\r\n    },\r\n  };\r\n}\r\n\r\nfunction makeProgramWithTextureMapping(gl: WebGLRenderingContext) {\r\n  const U_MODEL_VIEW_MATRIX = 'uModelViewMatrix';\r\n  const U_PROJECTION_MATRIX = 'uProjectionMatrix';\r\n  const U_SAMPLER = 'uSampler';\r\n  const A_POSITION = 'aPosition';\r\n  const A_COLOR = 'aColor';\r\n  const A_TEXTURE_COORDS = 'aTextureCoords';\r\n  const V_COLOR = 'vColor';\r\n  const V_TEXTURE_COORDS = 'vTextureCoords';\r\n\r\n  const vsSource = glsl`\r\n    // Attributes\r\n    attribute vec4 ${A_POSITION};\r\n    attribute vec4 ${A_COLOR};\r\n    attribute vec2 ${A_TEXTURE_COORDS};\r\n    // Uniforms\r\n    uniform mat4 ${U_MODEL_VIEW_MATRIX};\r\n    uniform mat4 ${U_PROJECTION_MATRIX};\r\n    // Varyings\r\n    varying lowp vec4 ${V_COLOR};\r\n    varying highp vec2 ${V_TEXTURE_COORDS};\r\n    // Program\r\n    void main(void) {\r\n      gl_Position = ${U_PROJECTION_MATRIX} * ${U_MODEL_VIEW_MATRIX} * ${A_POSITION};\r\n      ${V_COLOR} = ${A_COLOR};\r\n      ${V_TEXTURE_COORDS} = ${A_TEXTURE_COORDS};\r\n    }\r\n  `;\r\n\r\n  const fsSource = glsl`\r\n    // Varyings\r\n    varying lowp vec4 ${V_COLOR};\r\n    varying highp vec2 ${V_TEXTURE_COORDS};\r\n    // Uniforms\r\n    uniform sampler2D ${U_SAMPLER};\r\n    // Program\r\n    void main(void) {\r\n      gl_FragColor = ${V_COLOR} * texture2D(${U_SAMPLER}, ${V_TEXTURE_COORDS});\r\n    }\r\n  `;\r\n\r\n  const program = buildProgram(gl, vsSource, fsSource);\r\n\r\n  return {\r\n    program,\r\n    attribs: {\r\n      position: gl.getAttribLocation(program, A_POSITION),\r\n      color: gl.getAttribLocation(program, A_COLOR),\r\n      textureCoords: gl.getAttribLocation(program, A_TEXTURE_COORDS),\r\n    },\r\n    uniforms: {\r\n      sampler: getUniformLocation(gl, program, U_SAMPLER),\r\n      modelViewMatrix: getUniformLocation(gl, program, U_MODEL_VIEW_MATRIX),\r\n      projectionMatrix: getUniformLocation(gl, program, U_PROJECTION_MATRIX),\r\n    },\r\n  };\r\n}\r\n\r\nfunction buildProgram(gl: WebGLRenderingContext, vsSource: string, fsSource: string) {\r\n  const program = gl.createProgram();\r\n\r\n  if (!program) {\r\n    throw new Error('Failed to create program.');\r\n  }\r\n\r\n  gl.attachShader(program, makeShader(gl, gl.VERTEX_SHADER, vsSource));\r\n  gl.attachShader(program, makeShader(gl, gl.FRAGMENT_SHADER, fsSource));\r\n  gl.linkProgram(program);\r\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n    const message = `Unable to initialize the shader program: ${gl.getProgramInfoLog(program)}`;\r\n    gl.deleteProgram(program);\r\n    throw new Error(message);\r\n  }\r\n\r\n  return program;\r\n}\r\n\r\nfunction getUniformLocation(gl: WebGLRenderingContext, program: WebGLProgram, name: string): WebGLUniformLocation {\r\n  return gl.getUniformLocation(program, name) || error(`No uniform named \"${name}\" was found.`);\r\n}\r\n\r\nfunction makeShader(gl: WebGLRenderingContext, type: number, source: string) {\r\n  const shader = gl.createShader(type);\r\n  if (!shader) {\r\n    throw new Error('Failed to create shader.');\r\n  }\r\n  gl.shaderSource(shader, source);\r\n  gl.compileShader(shader);\r\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n    const message = `An error occurred compiling the shaders: ${gl.getShaderInfoLog(shader)}`;\r\n    gl.deleteShader(shader);\r\n    throw new Error(message);\r\n  }\r\n  return shader;\r\n}\r\n\r\nfunction makeModelViewMatrix(distance: number) {\r\n  const matrix = mat4.create();\r\n  mat4.translate(matrix, matrix, [0, 0, -distance]);\r\n  return matrix;\r\n}\r\n\r\nfunction makeProjectionMatrix(width: number, height: number, fovy: number, near: number, far: number) {\r\n  const matrix = mat4.create();\r\n  mat4.perspective(matrix, fovy, width / height, near, far);\r\n  return matrix;\r\n}\r\n\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport './index.scss'\r\n\r\n// You need bootstrap? $ yarn add bootstrap\r\n// See: https://create-react-app.dev/docs/adding-bootstrap\r\n// import 'bootstrap/dist/css/bootstrap.css';\r\n\r\n// Single-page application (SPA)\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want to Pre-render with react-snap\r\n// Step 1: install $ yarn add --dev react-snap\r\n// Step 2: add to package.json run script: \"postbuild\": \"react-snap\"\r\n// Step 3: Add to package.json: \"reactSnap\":{\"inlineCss\":true}\r\n// Step 3: replace to the script below.\r\n\r\n/*\r\nimport { hydrate, render } from 'react-dom'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nconst rootElement = document.getElementById('root')\r\nif (rootElement && rootElement!.hasChildNodes()) {\r\n  hydrate(<AppRouter />, rootElement)\r\n\r\n  // Precache - set to 'register' once you Pre-render\r\n  // If you want your app to work offline and load faster, you can change\r\n  // unregister() to register() below. Note this comes with some pitfalls.\r\n  // Learn more about service workers: http://bit.ly/CRA-PWA\r\n  serviceWorker.register()\r\n} else {\r\n  render(<AppRouter />, rootElement)\r\n}\r\n*/\r\n"],"sourceRoot":""}