{"version":3,"sources":["App.tsx","index.tsx"],"names":["glsl","String","raw","BLACK","GOLD","SILVER","COLORS","H","STEP","Math","PI","App","useState","theta","setTheta","anchor","setAnchor","mat4","create","modelMatrix","setModelMatrix","programWithTextureMapping","useRef","programWithoutTextureMapping","canvas","useEffect","gl","current","getContext","Error","vsSource","fsSource","program","buildProgram","attribs","position","getAttribLocation","color","textureCoords","uniforms","sampler","getUniformLocation","viewMatrix","projectionMatrix","makeProgramWithTextureMapping","normal","makeProgramWithoutTextureMapping","TEXTURE0","TEXTURE1","TEXTURE2","TEXTURE3","which","loadTexture","process","enable","DEPTH_TEST","depthFunc","LEQUAL","clearDepth","clearColor","CULL_FACE","cullFace","BACK","afid","requestAnimationFrame","f","time","cancelAnimationFrame","texProgram","texAttribs","texUniforms","nonTexProgram","nonTexAttribs","nonTexUniforms","perspective","width","height","fromTranslation","drawWithoutTexture","makeBuffers","topology","positionBuffer","normalBuffer","colorBuffer","useProgram","drawArrays","deleteBuffer","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","FRONT","uniformMatrix4fv","scale","makeRimBuffers","translate","makeDiscBuffers","vertexCounts","positionBuffers","colorBuffers","textureCoordBuffers","i","makeStripBuffers","vertexCount","positions","colors","uniform1i","bindAttribute","FLOAT","TRIANGLE_STRIP","unbindAttribute","forEach","buffer","drawHand","length","angle","makeFloatBufferFromArray","normals","makeHandBuffers","rotateZ","r","h","norm","sqrt","nr","nh","t","push","cos","sin","makeHubcapBuffers","TRIANGLE_FAN","m","copy","rotateY","makeFrisbeeBuffers","className","ref","onPointerDown","currentTarget","pointerId","x","clientX","y","clientY","setPointerCapture","onPointerMove","dx","dy","distance","rot","fromRotation","mul","onPointerUp","releasePointerCapture","url","texture","createTexture","activeTexture","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","Uint8Array","image","Image","onload","isPowerOf2","generateMipmap","texParameteri","TEXTURE_MAG_FILTER","LINEAR","TEXTURE_MIN_FILTER","LINEAR_MIPMAP_LINEAR","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","src","value","first","v","z","mode","count","r0","r1","z0","z1","x0","x1","y0","y1","rr","textureCoordBuffer","torsion","piece","s","tt","nTwists","r2","k","makeStrip","array","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","positionAttrib","normalAttrib","colorAttrib","attrib","size","type","vertexAttribPointer","enableVertexAttribArray","disableVertexAttribArray","createProgram","attachShader","buildShader","VERTEX_SHADER","FRAGMENT_SHADER","linkProgram","getProgramParameter","LINK_STATUS","message","getProgramInfoLog","deleteProgram","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","name","error","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e6c61500.chunk.js","sourcesContent":["/* eslint-disable one-var */\r\n/* eslint-disable no-bitwise */\r\n\r\nimport { mat4 } from 'gl-matrix';\r\nimport React, { MutableRefObject, useEffect, useRef, useState } from 'react';\r\nimport './App.scss';\r\n\r\ninterface ProgramInfo {\r\n  program: WebGLProgram;\r\n  attribs: {\r\n    color: number;\r\n    position: number;\r\n  };\r\n  uniforms: {\r\n    modelMatrix: WebGLUniformLocation;\r\n    viewMatrix: WebGLUniformLocation;\r\n    projectionMatrix: WebGLUniformLocation;\r\n  };\r\n}\r\n\r\ntype NonTextureMappingProgramInfo = ProgramInfo & {\r\n  attribs: {\r\n    normal: number;\r\n  };\r\n};\r\n\r\ntype TextureMappingProgramInfo = ProgramInfo & {\r\n  attribs: {\r\n    textureCoords: number;\r\n  };\r\n  uniforms: {\r\n    sampler: WebGLSampler;\r\n  };\r\n};\r\n\r\ntype Primitive = {\r\n  mode: number;\r\n  first: number;\r\n  count: number;\r\n};\r\n\r\nconst glsl = String.raw;\r\n\r\nconst BLACK = [0, 0, 0];\r\nconst BLUE = [0, 0, 1];\r\nconst GREEN = [0, 1, 0];\r\nconst YELLOW = [1, 1, 0];\r\nconst RED = [1, 0, 0];\r\nconst GOLD = [1.0, 0.8, 0.5];\r\nconst SILVER = [0.75, 0.75, 0.75];\r\n\r\nconst COLORS = [BLUE, GREEN, YELLOW, RED];\r\n\r\nconst R = 1.0, H = 0.1;\r\nconst STEP = Math.PI / 36;\r\nconst EPSILON = 0.001;\r\n\r\nexport default function App() {\r\n\r\n  const [theta, setTheta] = useState(0); // The angle of the hour hand, in radians.\r\n  const [anchor, setAnchor] = useState<{ x: number, y: number; } | null>();\r\n  const [modelMatrix, setModelMatrix] = useState(mat4.create());\r\n\r\n  const programWithTextureMapping: MutableRefObject<TextureMappingProgramInfo | null> = useRef(null);\r\n  const programWithoutTextureMapping: MutableRefObject<NonTextureMappingProgramInfo | null> = useRef(null);\r\n\r\n  const canvas = useRef<HTMLCanvasElement>(null);\r\n\r\n  // #region Initialize WebGL stuff and start the animation.\r\n  useEffect(() => {\r\n\r\n    const gl = canvas.current?.getContext('webgl');\r\n\r\n    if (!gl) {\r\n      throw new Error('Failed to get a WebGL context.');\r\n    }\r\n\r\n    programWithTextureMapping.current = makeProgramWithTextureMapping(gl);\r\n    programWithoutTextureMapping.current = makeProgramWithoutTextureMapping(gl);\r\n\r\n    for (const which of [gl.TEXTURE0, gl.TEXTURE1, gl.TEXTURE2, gl.TEXTURE3]) {\r\n      loadTexture(gl, which, `${process.env.PUBLIC_URL}/texture/hours${which - gl.TEXTURE0}.bmp`);\r\n    }\r\n\r\n    gl.enable(gl.DEPTH_TEST);\r\n    gl.depthFunc(gl.LEQUAL);\r\n    gl.clearDepth(1);\r\n    gl.clearColor(0, 0, 0, 1);\r\n    gl.enable(gl.CULL_FACE);\r\n    gl.cullFace(gl.BACK);\r\n\r\n    let afid = requestAnimationFrame(function f(time) {\r\n      setTheta(time / 12000 * Math.PI);\r\n      // const now = new Date();\r\n      // setTheta(((now.getSeconds() / 60 + now.getMinutes()) / 60 + now.getHours()) / 6 * Math.PI);\r\n      afid = requestAnimationFrame(f);\r\n    });\r\n\r\n    return () => {\r\n      cancelAnimationFrame(afid);\r\n    };\r\n\r\n  }, []);\r\n  // #endregion\r\n\r\n  // #region Render one frame.\r\n  useEffect(() => {\r\n\r\n    const gl = canvas.current?.getContext('webgl');\r\n\r\n    if (!gl) {\r\n      throw new Error('Failed to get a WebGL context.');\r\n    }\r\n\r\n    if (!programWithTextureMapping.current || !programWithoutTextureMapping.current) {\r\n      throw new Error('Missing shader program!');\r\n    }\r\n\r\n    const { program: texProgram, attribs: texAttribs, uniforms: texUniforms } = programWithTextureMapping.current;\r\n    const { program: nonTexProgram, attribs: nonTexAttribs, uniforms: nonTexUniforms } = programWithoutTextureMapping.current;\r\n\r\n    const projectionMatrix = mat4.perspective(mat4.create(), Math.PI / 5, gl.canvas.width / gl.canvas.height, 0.1, 100);\r\n    const viewMatrix = mat4.fromTranslation(mat4.create(), [0, 0, -4]);\r\n\r\n    const drawWithoutTexture = function (\r\n      makeBuffers: (gl: WebGLRenderingContext) => { topology: Primitive[]; positionBuffer: WebGLBuffer; normalBuffer: WebGLBuffer; colorBuffer: WebGLBuffer; }) {\r\n      const { topology, positionBuffer, normalBuffer, colorBuffer } = makeBuffers(gl);\r\n      try {\r\n        gl.useProgram(nonTexProgram);\r\n        drawArrays(gl, topology, nonTexAttribs.position, positionBuffer, nonTexAttribs.normal, normalBuffer, nonTexAttribs.color, colorBuffer);\r\n      } finally {\r\n        gl.deleteBuffer(colorBuffer);\r\n        gl.deleteBuffer(normalBuffer);\r\n        gl.deleteBuffer(positionBuffer);\r\n      }\r\n    };\r\n\r\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n    gl.cullFace(gl.FRONT);\r\n\r\n    // #region Inside of Rim\r\n    {\r\n      gl.uniformMatrix4fv(nonTexUniforms.modelMatrix, false, mat4.scale(mat4.create(), modelMatrix, [1.2, 1.2, 1]));\r\n      gl.uniformMatrix4fv(nonTexUniforms.viewMatrix, false, viewMatrix);\r\n      gl.uniformMatrix4fv(nonTexUniforms.projectionMatrix, false, projectionMatrix);\r\n      const { topology, positionBuffer, normalBuffer, colorBuffer } = makeRimBuffers(gl);\r\n      try {\r\n        gl.useProgram(nonTexProgram);\r\n        drawArrays(gl, topology, nonTexAttribs.position, positionBuffer, nonTexAttribs.normal, normalBuffer, nonTexAttribs.color, colorBuffer);\r\n      } finally {\r\n        gl.deleteBuffer(colorBuffer);\r\n        gl.deleteBuffer(normalBuffer);\r\n        gl.deleteBuffer(colorBuffer);\r\n      }\r\n    }\r\n    // #endregion\r\n\r\n    gl.cullFace(gl.BACK);\r\n\r\n    // #region Clock Face\r\n    gl.uniformMatrix4fv(nonTexUniforms.modelMatrix, false, mat4.scale(mat4.create(), mat4.translate(mat4.create(), modelMatrix, [0, 0, -H]), [1.199, 1.199, 1]));\r\n    drawWithoutTexture(makeDiscBuffers);\r\n    // #endregion\r\n\r\n    // #region Hours Strip\r\n    const vertexCounts: number[] = [];\r\n    const positionBuffers: WebGLBuffer[] = [];\r\n    const colorBuffers: WebGLBuffer[] = [];\r\n    const textureCoordBuffers: WebGLBuffer[] = [];\r\n\r\n    for (let i = 0; i < 4; i++) (\r\n      {\r\n        vertexCount: vertexCounts[i],\r\n        positions: positionBuffers[i],\r\n        colors: colorBuffers[i],\r\n        textureCoords: textureCoordBuffers[i],\r\n      } = makeStripBuffers(gl, theta, i)\r\n    );\r\n\r\n    try {\r\n      gl.useProgram(texProgram);\r\n      gl.uniformMatrix4fv(programWithTextureMapping.current.uniforms.modelMatrix, false, modelMatrix);\r\n      gl.uniformMatrix4fv(programWithTextureMapping.current.uniforms.viewMatrix, false, viewMatrix);\r\n      gl.uniformMatrix4fv(programWithTextureMapping.current.uniforms.projectionMatrix, false, projectionMatrix);\r\n      for (let i = 0; i < 4; i++) {\r\n        gl.uniform1i(texUniforms.sampler, i);\r\n        bindAttribute(gl, texAttribs.position, positionBuffers[i], 3, gl.FLOAT);\r\n        bindAttribute(gl, texAttribs.color, colorBuffers[i], 3, gl.FLOAT);\r\n        bindAttribute(gl, texAttribs.textureCoords, textureCoordBuffers[i], 2, gl.FLOAT);\r\n        try {\r\n          gl.cullFace(gl.BACK);\r\n          gl.drawArrays(gl.TRIANGLE_STRIP, 0, vertexCounts[i]);\r\n        } finally {\r\n          unbindAttribute(gl, texAttribs.textureCoords);\r\n          unbindAttribute(gl, texAttribs.color);\r\n          unbindAttribute(gl, texAttribs.position);\r\n        }\r\n      }\r\n    } finally {\r\n      [...positionBuffers, ...colorBuffers, ...textureCoordBuffers].forEach((buffer) => gl.deleteBuffer(buffer));\r\n    }\r\n    // #endregion\r\n\r\n    // #region Hands\r\n    const drawHand = function (height: number, width: number, length: number, angle: number) {\r\n      const { vertexCount, positions, normals, colors } = makeHandBuffers(gl, height, width, length);\r\n      try {\r\n        gl.useProgram(nonTexProgram);\r\n        gl.uniformMatrix4fv(nonTexUniforms.modelMatrix, false, mat4.rotateZ(mat4.create(), modelMatrix, -angle));\r\n        gl.uniformMatrix4fv(nonTexUniforms.viewMatrix, false, viewMatrix);\r\n        gl.uniformMatrix4fv(nonTexUniforms.projectionMatrix, false, projectionMatrix);\r\n        bindAttribute(gl, nonTexAttribs.position, positions, 3, gl.FLOAT);\r\n        bindAttribute(gl, nonTexAttribs.normal, normals, 3, gl.FLOAT);\r\n        bindAttribute(gl, nonTexAttribs.color, colors, 3, gl.FLOAT);\r\n        try {\r\n          gl.drawArrays(gl.TRIANGLE_STRIP, 0, vertexCount);\r\n        } finally {\r\n          unbindAttribute(gl, nonTexAttribs.color);\r\n          unbindAttribute(gl, nonTexAttribs.normal);\r\n          unbindAttribute(gl, nonTexAttribs.position);\r\n        }\r\n      } finally {\r\n        gl.deleteBuffer(colors);\r\n        gl.deleteBuffer(normals);\r\n        gl.deleteBuffer(positions);\r\n      }\r\n    };\r\n\r\n    drawHand(0.01, 0.02, 0.6, theta); // Hours\r\n    drawHand(0.02, 0.02, 0.8, 12 * theta); // Minutes\r\n    // #endregion\r\n\r\n    // #region Hubcap\r\n    const { vertexCount, positions, normals, colors } = makeHubcapBuffers(gl, 0.03);\r\n    try {\r\n      gl.useProgram(nonTexProgram);\r\n      gl.uniformMatrix4fv(nonTexUniforms.modelMatrix, false, modelMatrix);\r\n      gl.uniformMatrix4fv(nonTexUniforms.viewMatrix, false, viewMatrix);\r\n      gl.uniformMatrix4fv(nonTexUniforms.projectionMatrix, false, projectionMatrix);\r\n      bindAttribute(gl, nonTexAttribs.position, positions, 3, gl.FLOAT);\r\n      bindAttribute(gl, nonTexAttribs.normal, normals, 3, gl.FLOAT);\r\n      bindAttribute(gl, nonTexAttribs.color, colors, 3, gl.FLOAT);\r\n      try {\r\n        gl.drawArrays(gl.TRIANGLE_FAN, 0, vertexCount);\r\n      } finally {\r\n        unbindAttribute(gl, nonTexAttribs.position);\r\n        unbindAttribute(gl, nonTexAttribs.color);\r\n      }\r\n    } finally {\r\n      gl.deleteBuffer(colors);\r\n      gl.deleteBuffer(positions);\r\n    }\r\n    // #endregion\r\n\r\n    // #region Back of Case\r\n    const m = mat4.copy(mat4.create(), modelMatrix);\r\n    mat4.translate(m, m, [0, 0, -H]);\r\n    mat4.rotateY(m, m, Math.PI);\r\n    mat4.scale(m, m, [1.2, 1.2, 0.24]);\r\n    gl.uniformMatrix4fv(nonTexUniforms.modelMatrix, false, m);\r\n    drawWithoutTexture(makeFrisbeeBuffers);\r\n    gl.uniformMatrix4fv(nonTexUniforms.modelMatrix, false, mat4.scale(mat4.create(), modelMatrix, [1.2, 1.2, 1]));\r\n    drawWithoutTexture(makeRimBuffers);\r\n    // #endregion\r\n\r\n  }, [theta, modelMatrix]);\r\n  // #endregion\r\n\r\n  // #region Event Handlers \r\n  const onPointerDown = ({ currentTarget, pointerId, clientX: x, clientY: y }: React.PointerEvent<HTMLCanvasElement>): void => {\r\n    currentTarget.setPointerCapture(pointerId);\r\n    setAnchor({ x, y });\r\n  };\r\n\r\n  const onPointerUp = ({ currentTarget, pointerId }: React.PointerEvent<HTMLCanvasElement>): void => {\r\n    setAnchor(null);\r\n    currentTarget.releasePointerCapture(pointerId);\r\n  };\r\n\r\n  const onPointerMove = ({ clientX: x, clientY: y }: React.PointerEvent<HTMLCanvasElement>): void => {\r\n    if (anchor) {\r\n      const dx = x - anchor.x;\r\n      const dy = y - anchor.y;\r\n      const distance = Math.sqrt(dx * dx + dy * dy);\r\n      if (distance > 0) {\r\n        const rot = mat4.fromRotation(mat4.create(), 0.01 * distance, [dy, dx, 0]);\r\n        setModelMatrix(mat4.mul(mat4.create(), rot, modelMatrix));\r\n        setAnchor({ x, y });\r\n      }\r\n    }\r\n  };\r\n  // #endregion\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <canvas\r\n          width=\"768px\"\r\n          height=\"768px\"\r\n          ref={canvas}\r\n          onPointerDown={onPointerDown}\r\n          onPointerMove={onPointerMove}\r\n          onPointerUp={onPointerUp}\r\n        />\r\n        <p>M&ouml;bius Clock</p>\r\n      </header>\r\n    </div>\r\n  );\r\n\r\n}\r\n\r\nfunction loadTexture(gl: WebGLRenderingContext, which: number, url: string) {\r\n  const texture = gl.createTexture();\r\n\r\n  // Because images have to be downloaded over the internet\r\n  // they might take a moment until they are ready.\r\n  // Until then put a single pixel in the texture so we can\r\n  // use it immediately. When the image has finished downloading\r\n  // we'll update the texture with the contents of the image.\r\n  gl.activeTexture(which);\r\n  gl.bindTexture(gl.TEXTURE_2D, texture);\r\n  gl.texImage2D(\r\n    gl.TEXTURE_2D,\r\n    0, // level\r\n    gl.RGBA,\r\n    1, // width\r\n    1, // height\r\n    0, // border\r\n    gl.RGBA,\r\n    gl.UNSIGNED_BYTE,\r\n    new Uint8Array([255, 255, 255, 255]), // opaque white\r\n  );\r\n\r\n  const image = new Image();\r\n  image.onload = () => {\r\n    gl.activeTexture(which);\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\r\n\r\n    // WebGL1 has different requirements for power of 2 images\r\n    // vs non power of 2 images so check if the image is a\r\n    // power of 2 in both dimensions.\r\n    if (isPowerOf2(image.width) && isPowerOf2(image.height)) {\r\n      // Yes, it's a power of 2. Generate mips.\r\n      gl.generateMipmap(gl.TEXTURE_2D);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);\r\n    } else {\r\n      // No, it's not a power of 2. Turn off mips and set\r\n      // wrapping to clamp to edge.\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n    }\r\n  };\r\n  image.src = url;\r\n\r\n  return texture;\r\n}\r\n\r\nfunction isPowerOf2(value: number) {\r\n  return (value & (value - 1)) === 0;\r\n}\r\n\r\nfunction makeFrisbeeBuffers(gl: WebGLRenderingContext) {\r\n  const topology: Primitive[] = [];\r\n  const positions = [0, 0, R];\r\n  const normals = [0, 0, 1];\r\n  const colors = [...GOLD];\r\n\r\n  let first = 0, v = 1;\r\n\r\n  const r = R * Math.sin(STEP);\r\n  const z = R * Math.cos(STEP);\r\n\r\n  for (let f = -Math.PI; f < Math.PI + EPSILON; f += STEP, v++) {\r\n    const x = r * Math.cos(f), y = r * Math.sin(f);\r\n\r\n    positions.push(x, y, z);\r\n    normals.push(x, y, z);\r\n    colors.push(...GOLD);\r\n  }\r\n\r\n  topology.push({ mode: gl.TRIANGLE_FAN, first, count: v - first });\r\n  first = v;\r\n\r\n  for (let t = STEP; t < 0.5 * Math.PI - EPSILON; t += STEP) {\r\n    const r0 = R * Math.sin(t), r1 = R * Math.sin(t + STEP);\r\n    const z0 = R * Math.cos(t), z1 = R * Math.cos(t + STEP);\r\n\r\n    for (let f = -Math.PI; f < Math.PI + EPSILON; f += STEP, v += 2) {\r\n      const x0 = r0 * Math.cos(f), x1 = r1 * Math.cos(f);\r\n      const y0 = r0 * Math.sin(f), y1 = r1 * Math.sin(f);\r\n\r\n      positions.push(x0, y0, z0);\r\n      normals.push(x0, y0, z0);\r\n      colors.push(...GOLD);\r\n\r\n      positions.push(x1, y1, z1);\r\n      normals.push(x1, y1, z1);\r\n      colors.push(...GOLD);\r\n    }\r\n\r\n    topology.push({ mode: gl.TRIANGLE_STRIP, first, count: v - first });\r\n    first = v;\r\n  }\r\n\r\n  return {\r\n    topology,\r\n    positionBuffer: makeFloatBufferFromArray(gl, positions),\r\n    normalBuffer: makeFloatBufferFromArray(gl, normals),\r\n    colorBuffer: makeFloatBufferFromArray(gl, colors),\r\n  };\r\n}\r\n\r\nfunction makeRimBuffers(gl: WebGLRenderingContext) {\r\n  const topology: Primitive[] = [];\r\n  const positions = [];\r\n  const normals = [];\r\n  const colors = [];\r\n  for (let t = 0; t < 2 * Math.PI + EPSILON; t += STEP) {\r\n    positions.push(R * Math.cos(t), R * Math.sin(t), +H);\r\n    normals.push(Math.cos(t), Math.sin(t), 0);\r\n    colors.push(...GOLD);\r\n    positions.push(R * Math.cos(t), R * Math.sin(t), -H);\r\n    normals.push(Math.cos(t), Math.sin(t), 0);\r\n    colors.push(...GOLD);\r\n  }\r\n  topology.push({ mode: gl.TRIANGLE_STRIP, first: 0, count: positions.length / 3 });\r\n  return {\r\n    topology,\r\n    positionBuffer: makeFloatBufferFromArray(gl, positions),\r\n    normalBuffer: makeFloatBufferFromArray(gl, normals),\r\n    colorBuffer: makeFloatBufferFromArray(gl, colors),\r\n  };\r\n}\r\n\r\nfunction makeDiscBuffers(gl: WebGLRenderingContext) {\r\n  const topology: Primitive[] = [];\r\n  const positions = [0, 0, 0];\r\n  const colors = [...BLACK];\r\n  const normals = [0, 0, 1];\r\n  const textureCoords = [0, 0];\r\n\r\n  const r = 1;\r\n  const dr = r / 6;\r\n\r\n  let first = 0, v = 1;\r\n  for (let t = 0; t < 2 * Math.PI + 0.001; t += Math.PI / 36, v++) {\r\n    const x = dr * Math.cos(t);\r\n    const y = dr * Math.sin(t);\r\n    positions.push(x, y, 0);\r\n    normals.push(0, 0, 1);\r\n    colors.push(...BLACK);\r\n    textureCoords.push(x / r, y / r);\r\n  }\r\n  topology.push({ mode: gl.TRIANGLE_FAN, first, count: v - first });\r\n  first = v;\r\n\r\n  for (let rr = dr; rr < r - 0.001; rr += dr) {\r\n    for (let t = 0; t < 2 * Math.PI + 0.001; t += Math.PI / 36, v += 2) {\r\n      const x0 = rr * Math.cos(t), y0 = rr * Math.sin(t);\r\n      positions.push(x0, y0, 0);\r\n      normals.push(0, 0, 1);\r\n      colors.push(...BLACK);\r\n      textureCoords.push(x0 / r, y0 / r);\r\n\r\n      const x1 = (rr + dr) * Math.cos(t), y1 = (rr + dr) * Math.sin(t);\r\n      positions.push(x1, y1, 0);\r\n      normals.push(0, 0, 1);\r\n      colors.push(...BLACK);\r\n      textureCoords.push(x1 / r, y1 / r);\r\n    }\r\n    topology.push({ mode: gl.TRIANGLE_STRIP, first, count: v - first });\r\n    first = v;\r\n  }\r\n\r\n  return {\r\n    topology,\r\n    positionBuffer: makeFloatBufferFromArray(gl, positions),\r\n    normalBuffer: makeFloatBufferFromArray(gl, normals),\r\n    colorBuffer: makeFloatBufferFromArray(gl, colors),\r\n    textureCoordBuffer: makeFloatBufferFromArray(gl, textureCoords),\r\n  };\r\n}\r\n\r\nfunction makeHubcapBuffers(gl: WebGLRenderingContext, height: number) {\r\n  const r = 0.05;\r\n  const h = 0.01;\r\n  const norm = Math.sqrt(r * r + h * h);\r\n  const nr = r / norm;\r\n  const nh = h / norm;\r\n  const positions = [0, 0, height + h];\r\n  const normals = [0, 0, 1];\r\n  const colors = [...SILVER];\r\n  for (let t = 0; t < 2 * Math.PI; t += Math.PI / 30) {\r\n    positions.push(r * Math.cos(t), r * Math.sin(t), height);\r\n    normals.push(nh * Math.cos(t), nh * Math.sin(t), nr);\r\n    colors.push(...SILVER);\r\n  }\r\n  const vertexCount = positions.length / 3;\r\n  return {\r\n    vertexCount,\r\n    positions: makeFloatBufferFromArray(gl, positions),\r\n    normals: makeFloatBufferFromArray(gl, normals),\r\n    colors: makeFloatBufferFromArray(gl, colors),\r\n  };\r\n}\r\n\r\nfunction makeHandBuffers(gl: WebGLRenderingContext, height: number, width: number, length: number) {\r\n  return {\r\n    vertexCount: 4,\r\n    positions: makeFloatBufferFromArray(gl, [\r\n      -width, -0.2 * length, height,\r\n      +width, -0.2 * length, height,\r\n      -width, length, height,\r\n      +width, length, height,\r\n    ]),\r\n    normals: makeFloatBufferFromArray(gl, [\r\n      0, 0, 1,\r\n      0, 0, 1,\r\n      0, 0, 1,\r\n      0, 0, 1,\r\n    ]),\r\n    colors: makeFloatBufferFromArray(gl, [\r\n      ...SILVER,\r\n      ...SILVER,\r\n      ...SILVER,\r\n      ...SILVER,\r\n    ]),\r\n  };\r\n}\r\n\r\nfunction makeStripBuffers(gl: WebGLRenderingContext, torsion: number, piece: number) {\r\n  const { positions, colors, textureCoords } = makeStrip(torsion, piece);\r\n  return {\r\n    vertexCount: positions.length / 3,\r\n    positions: makeFloatBufferFromArray(gl, positions),\r\n    colors: makeFloatBufferFromArray(gl, colors),\r\n    textureCoords: makeFloatBufferFromArray(gl, textureCoords),\r\n  };\r\n}\r\n\r\nfunction makeStrip(theta: number, piece: number) {\r\n  const textureCoords: number[] = [];\r\n  const positions: number[] = [];\r\n  const colors: number[] = [];\r\n  const nTwists = 3;\r\n  for (let s = 0.0; s < 1.001; s += 0.033333) {\r\n    const t = (piece + s) * Math.PI;\r\n    const tt = nTwists * 0.5 * (t - theta);\r\n    // Position\r\n    const r1 = R + H * Math.cos(tt);\r\n    const r2 = R - H * Math.cos(tt);\r\n    positions.push(r1 * Math.sin(t), r1 * Math.cos(t), -H * Math.sin(tt));\r\n    positions.push(r2 * Math.sin(t), r2 * Math.cos(t), +H * Math.sin(tt));\r\n    // Color\r\n    const color = [0, 0, 0];\r\n    for (let k = 0; k < 3; k++) {\r\n      color[k] = (1 - s) * COLORS[piece][k] + s * COLORS[(piece + 1) % COLORS.length][k];\r\n    }\r\n    colors.push(...color, ...color);\r\n    // Texture Coordinates\r\n    textureCoords.push(s, 0, s, 1);\r\n  }\r\n  return { positions, colors, textureCoords };\r\n}\r\n\r\nfunction makeFloatBufferFromArray(gl: WebGLRenderingContext, array: number[]) {\r\n  const buffer = gl.createBuffer();\r\n  if (!buffer) {\r\n    throw new Error('Failed to create buffer.');\r\n  }\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(array), gl.STATIC_DRAW);\r\n  return buffer;\r\n}\r\n\r\nfunction drawArrays(\r\n  gl: WebGLRenderingContext,\r\n  topology: Primitive[],\r\n  positionAttrib: number,\r\n  positionBuffer: WebGLBuffer,\r\n  normalAttrib: number,\r\n  normalBuffer: WebGLBuffer,\r\n  colorAttrib: number,\r\n  colorBuffer: WebGLBuffer,\r\n) {\r\n  bindAttribute(gl, positionAttrib, positionBuffer, 3, gl.FLOAT);\r\n  bindAttribute(gl, normalAttrib, normalBuffer, 3, gl.FLOAT);\r\n  bindAttribute(gl, colorAttrib, colorBuffer, 3, gl.FLOAT);\r\n  try {\r\n    for (const { mode, first, count } of topology) {\r\n      gl.drawArrays(mode, first, count);\r\n    }\r\n  } finally {\r\n    unbindAttribute(gl, colorAttrib);\r\n    unbindAttribute(gl, normalAttrib);\r\n    unbindAttribute(gl, positionAttrib);\r\n  }\r\n}\r\n\r\nfunction bindAttribute(gl: WebGLRenderingContext, attrib: number, buffer: WebGLBuffer, size: number, type: number) {\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n  gl.vertexAttribPointer(attrib, size, type, false, 0, 0);\r\n  gl.enableVertexAttribArray(attrib);\r\n}\r\n\r\nfunction unbindAttribute(gl: WebGLRenderingContext, attrib: number) {\r\n  gl.disableVertexAttribArray(attrib);\r\n}\r\n\r\nfunction makeProgramWithoutTextureMapping(gl: WebGLRenderingContext) {\r\n  const U_MODEL_MATRIX = 'uModelMatrix';\r\n  const U_VIEW_MATRIX = 'uViewMatrix';\r\n  const U_PROJECTION_MATRIX = 'uProjectionMatrix';\r\n  const A_POSITION = 'aPosition';\r\n  const A_NORMAL = 'aNormal';\r\n  const A_COLOR = 'aColor';\r\n  const V_COLOR = 'vColor';\r\n  const V_LIGHTING = 'vLighting';\r\n\r\n  const vsSource = glsl`\r\n    // Uniforms\r\n    uniform mat4 ${U_MODEL_MATRIX};\r\n    uniform mat4 ${U_VIEW_MATRIX};\r\n    uniform mat4 ${U_PROJECTION_MATRIX};\r\n    // Attributes\r\n    attribute vec4 ${A_POSITION};\r\n    attribute vec3 ${A_NORMAL};\r\n    attribute vec4 ${A_COLOR};\r\n    // Varyings\r\n    varying lowp vec4 ${V_COLOR};\r\n    varying lowp vec3 ${V_LIGHTING};\r\n    // Program\r\n    void main(void) {\r\n      // Apply lighting\r\n      highp vec3 ambientLightColor = vec3(0.3, 0.3, 0.3);\r\n      highp vec3 directionalLightColor = vec3(1, 1, 1);\r\n      highp vec3 directionalLightVector = normalize(vec3(0.85, 0.8, 0.75));\r\n      highp vec4 transformedNormal = normalize(${U_VIEW_MATRIX} * ${U_MODEL_MATRIX} * vec4(${A_NORMAL}, 0));\r\n      highp float directionalLightIntensity = max(0.0, dot(directionalLightVector, transformedNormal.xyz));\r\n      ${V_LIGHTING} = ambientLightColor + directionalLightIntensity * directionalLightColor;\r\n      ${V_COLOR} = ${A_COLOR};\r\n      gl_Position = ${U_PROJECTION_MATRIX} * ${U_VIEW_MATRIX} * ${U_MODEL_MATRIX} * ${A_POSITION};\r\n    }\r\n  `;\r\n\r\n  const fsSource = glsl`\r\n    // Varyings\r\n    varying lowp vec4 ${V_COLOR};\r\n    varying lowp vec3 ${V_LIGHTING};\r\n    // Program\r\n    void main(void) {\r\n      gl_FragColor = ${V_COLOR} * vec4(${V_LIGHTING}, 1.0);\r\n    }\r\n  `;\r\n\r\n  const program = buildProgram(gl, vsSource, fsSource);\r\n\r\n  return {\r\n    program,\r\n    attribs: {\r\n      position: gl.getAttribLocation(program, A_POSITION),\r\n      normal: gl.getAttribLocation(program, A_NORMAL),\r\n      color: gl.getAttribLocation(program, A_COLOR),\r\n    },\r\n    uniforms: {\r\n      modelMatrix: getUniformLocation(gl, program, U_MODEL_MATRIX),\r\n      viewMatrix: getUniformLocation(gl, program, U_VIEW_MATRIX),\r\n      projectionMatrix: getUniformLocation(gl, program, U_PROJECTION_MATRIX),\r\n    },\r\n  };\r\n}\r\n\r\nfunction makeProgramWithTextureMapping(gl: WebGLRenderingContext) {\r\n  const U_MODEL_MATRIX = 'uModelMatrix';\r\n  const U_VIEW_MATRIX = 'uViewMatrix';\r\n  const U_PROJECTION_MATRIX = 'uProjectionMatrix';\r\n  const U_SAMPLER = 'uSampler';\r\n  const A_POSITION = 'aPosition';\r\n  const A_COLOR = 'aColor';\r\n  const A_TEXTURE_COORDS = 'aTextureCoords';\r\n  const V_COLOR = 'vColor';\r\n  const V_TEXTURE_COORDS = 'vTextureCoords';\r\n\r\n  const vsSource = glsl`\r\n    // Attributes\r\n    attribute vec4 ${A_POSITION};\r\n    attribute vec4 ${A_COLOR};\r\n    attribute vec2 ${A_TEXTURE_COORDS};\r\n    // Uniforms\r\n    uniform mat4 ${U_MODEL_MATRIX};\r\n    uniform mat4 ${U_VIEW_MATRIX};\r\n    uniform mat4 ${U_PROJECTION_MATRIX};\r\n    // Varyings\r\n    varying lowp vec4 ${V_COLOR};\r\n    varying highp vec2 ${V_TEXTURE_COORDS};\r\n    // Program\r\n    void main(void) {\r\n      gl_Position = ${U_PROJECTION_MATRIX} * ${U_VIEW_MATRIX} * ${U_MODEL_MATRIX} * ${A_POSITION};\r\n      ${V_COLOR} = ${A_COLOR};\r\n      ${V_TEXTURE_COORDS} = ${A_TEXTURE_COORDS};\r\n    }\r\n  `;\r\n\r\n  const fsSource = glsl`\r\n    // Varyings\r\n    varying lowp vec4 ${V_COLOR};\r\n    varying highp vec2 ${V_TEXTURE_COORDS};\r\n    // Uniforms\r\n    uniform sampler2D ${U_SAMPLER};\r\n    // Program\r\n    void main(void) {\r\n      gl_FragColor = ${V_COLOR} * texture2D(${U_SAMPLER}, ${V_TEXTURE_COORDS});\r\n    }\r\n  `;\r\n\r\n  const program = buildProgram(gl, vsSource, fsSource);\r\n\r\n  return {\r\n    program,\r\n    attribs: {\r\n      position: gl.getAttribLocation(program, A_POSITION),\r\n      color: gl.getAttribLocation(program, A_COLOR),\r\n      textureCoords: gl.getAttribLocation(program, A_TEXTURE_COORDS),\r\n    },\r\n    uniforms: {\r\n      sampler: getUniformLocation(gl, program, U_SAMPLER),\r\n      modelMatrix: getUniformLocation(gl, program, U_MODEL_MATRIX),\r\n      viewMatrix: getUniformLocation(gl, program, U_VIEW_MATRIX),\r\n      projectionMatrix: getUniformLocation(gl, program, U_PROJECTION_MATRIX),\r\n    },\r\n  };\r\n}\r\n\r\nfunction buildProgram(gl: WebGLRenderingContext, vsSource: string, fsSource: string) {\r\n  const program = gl.createProgram();\r\n\r\n  if (!program) {\r\n    throw new Error('Failed to create program.');\r\n  }\r\n\r\n  gl.attachShader(program, buildShader(gl, gl.VERTEX_SHADER, vsSource));\r\n  gl.attachShader(program, buildShader(gl, gl.FRAGMENT_SHADER, fsSource));\r\n  gl.linkProgram(program);\r\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n    const message = `Unable to initialize the shader program: ${gl.getProgramInfoLog(program)}`;\r\n    gl.deleteProgram(program);\r\n    throw new Error(message);\r\n  }\r\n\r\n  return program;\r\n}\r\n\r\nfunction buildShader(gl: WebGLRenderingContext, type: number, source: string) {\r\n  const shader = gl.createShader(type);\r\n  if (!shader) {\r\n    throw new Error('Failed to create shader.');\r\n  }\r\n  gl.shaderSource(shader, source);\r\n  gl.compileShader(shader);\r\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n    const message = `An error occurred compiling the shaders: ${gl.getShaderInfoLog(shader)}`;\r\n    gl.deleteShader(shader);\r\n    throw new Error(message);\r\n  }\r\n  return shader;\r\n}\r\n\r\nfunction getUniformLocation(gl: WebGLRenderingContext, program: WebGLProgram, name: string): WebGLUniformLocation {\r\n  return gl.getUniformLocation(program, name) || error(`No uniform named \"${name}\" was found.`);\r\n}\r\n\r\nfunction error<T>(message: string): T {\r\n  throw new Error(message);\r\n}\r\n\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport './index.scss'\r\n\r\n// You need bootstrap? $ yarn add bootstrap\r\n// See: https://create-react-app.dev/docs/adding-bootstrap\r\n// import 'bootstrap/dist/css/bootstrap.css';\r\n\r\n// Single-page application (SPA)\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want to Pre-render with react-snap\r\n// Step 1: install $ yarn add --dev react-snap\r\n// Step 2: add to package.json run script: \"postbuild\": \"react-snap\"\r\n// Step 3: Add to package.json: \"reactSnap\":{\"inlineCss\":true}\r\n// Step 3: replace to the script below.\r\n\r\n/*\r\nimport { hydrate, render } from 'react-dom'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nconst rootElement = document.getElementById('root')\r\nif (rootElement && rootElement!.hasChildNodes()) {\r\n  hydrate(<AppRouter />, rootElement)\r\n\r\n  // Precache - set to 'register' once you Pre-render\r\n  // If you want your app to work offline and load faster, you can change\r\n  // unregister() to register() below. Note this comes with some pitfalls.\r\n  // Learn more about service workers: http://bit.ly/CRA-PWA\r\n  serviceWorker.register()\r\n} else {\r\n  render(<AppRouter />, rootElement)\r\n}\r\n*/\r\n"],"sourceRoot":""}